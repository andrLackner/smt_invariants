unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x392 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x251 (* (- 1) ?x36)))
 (let ((?x235 (* (- 2) x00)))
 (let ((?x298 (+ r00 ?x235 ?x251 (* 2 x!0) (* (- 1) r!1) ?x392)))
 (let (($x285 (<= ?x298 0)))
 (let (($x299 (= ?x298 0)))
 (let ((?x452 (* (- 2) (* x!0 x!0 x!0))))
 (let ((?x439 (* r!1 r!1 r!1)))
 (let ((?x440 (* (- 1) (* r!1 r!1 r!1 r!1))))
 (let ((?x220 (+ (* 2 (* x00 x!0 x!0)) (* (- 4) (* x!0 r!1 r!1)) (* 2 (* x00 r!1 r!1)) (* (- 1) (* r00 r!1 r!1)) (* r00 r00 r!1 r!1) (* 2 (* r00 x!0 r!1)) (* 2 (* x!0 r!1 r!1 r!1)) (* 5 (* x!0 x!0 r!1)) (* (- 4) (* x00 x!0 r!1)) (* (- 2) (* r00 r00 x!0 r!1)) (* (- 1) (* r00 x!0 x!0)) (* (- 1) (* x!0 x!0 r!1 r!1)) (* r00 r00 x!0 x!0) ?x440 ?x439 ?x452)))
 (let (($x425 (= ?x220 0)))
 (let (($x363 (not $x425)))
 (let (($x349 (not $x299)))
 (let (($x427 (or $x349 $x363)))
 (let (($x369 (and $x299 $x427)))
 (let ((?x270 (+ ?x439 (* (- 4) (* r!1 r!1 x!0)) (* (- 1) (* r!1 r!1 r00)) ?x440 (* 2 (* r!1 r!1 x00)) (* r!1 r!1 r00 r00) (* 5 (* r!1 x!0 x!0)) (* 2 (* r!1 x!0 r00)) (* 2 (* r!1 r!1 r!1 x!0)) (* (- 4) (* r!1 x!0 x00)) (* (- 2) (* r!1 x!0 r00 r00)) ?x452 (* (- 1) (* x!0 x!0 r00)) (* (- 1) (* r!1 r!1 x!0 x!0)) (* 2 (* x!0 x!0 x00)) (* x!0 x!0 r00 r00))))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 1) r00)))
 (let (($x370 (= (+ r!1 (* (- 2) x!0) ?x115 (* (- 1) ?x392) ?x35 ?x36) 0)))
 (let (($x277 (and $x370 (or (not $x370) (not (= ?x270 0))))))
 (let (($x212 (exists ((r Int) (x Int) )(! (let ((?x455 (+ (* r r r) (* (- 4) (* r r x)) (* (- 1) (* r r r00)) (* (- 1) (* r r r r)) (* 2 (* r r x00)) (* r r r00 r00) (* 5 (* r x x)) (* 2 (* r x r00)) (* 2 (* r r r x)) (* (- 4) (* r x x00)) (* (- 2) (* r x r00 r00)) (* (- 2) (* x x x)) (* (- 1) (* x x r00)) (* (- 1) (* r r x x)) (* 2 (* x x x00)) (* x x r00 r00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x116 (* (- 1) ?x30)))
 (let ((?x115 (* (- 1) r00)))
 (let ((?x114 (* (- 2) x)))
 (let (($x118 (= (+ r ?x114 ?x115 ?x116 ?x35 ?x36) 0)))
 (and $x118 (or (not $x118) (not (= ?x455 0)))))))))))) :qid k!27))
 ))
 (let (($x234 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x251 (* (- 1) ?x36)))
 (let ((?x235 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x226 (+ 1 r)))
 (let ((?x256 (* ?x226 ?x226)))
 (let ((?x295 (* (- 3) r)))
 (let ((?x106 (* (- 1) r)))
 (let ((?x266 (+ x ?x106)))
 (let (($x365 (not (= (* ?x266 ?x266 (+ (- 1) ?x295 r00 ?x256 ?x32 ?x235 ?x251)) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x114 (* (- 2) x)))
 (let ((?x115 (* (- 1) r00)))
 (let (($x283 (not (= (+ (* 3 r) ?x115 (* (- 1) ?x256) ?x114 ?x35 ?x36) (- 1)))))
 (and (= (+ r ?x115 (* (- 1) (* r r)) ?x114 ?x35 ?x36) 0) (or $x283 $x365)))))))))))))))) :qid k!27))
 ))
 (let ((?x305 (lambda ((r Int) (x Int) )(let ((?x455 (+ (* r r r) (* (- 4) (* r r x)) (* (- 1) (* r r r00)) (* (- 1) (* r r r r)) (* 2 (* r r x00)) (* r r r00 r00) (* 5 (* r x x)) (* 2 (* r x r00)) (* 2 (* r r r x)) (* (- 4) (* r x x00)) (* (- 2) (* r x r00 r00)) (* (- 2) (* x x x)) (* (- 1) (* x x r00)) (* (- 1) (* r r x x)) (* 2 (* x x x00)) (* x x r00 r00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x116 (* (- 1) ?x30)))
 (let ((?x115 (* (- 1) r00)))
 (let ((?x114 (* (- 2) x)))
 (let (($x118 (= (+ r ?x114 ?x115 ?x116 ?x35 ?x36) 0)))
 (let (($x496 (and $x118 (or (not $x118) (not (= ?x455 0))))))
 (let ((?x251 (* (- 1) ?x36)))
 (let ((?x235 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x226 (+ 1 r)))
 (let ((?x256 (* ?x226 ?x226)))
 (let ((?x295 (* (- 3) r)))
 (let ((?x106 (* (- 1) r)))
 (let ((?x266 (+ x ?x106)))
 (let (($x365 (not (= (* ?x266 ?x266 (+ (- 1) ?x295 r00 ?x256 ?x32 ?x235 ?x251)) 0))))
 (let (($x283 (not (= (+ (* 3 r) ?x115 (* (- 1) ?x256) ?x114 ?x35 ?x36) (- 1)))))
 (let (($x246 (and (= (+ r ?x115 ?x116 ?x114 ?x35 ?x36) 0) (or $x283 $x365))))
 (rewrite (= $x246 $x496)))))))))))))))))))))))
 ))
 (let (($x333 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x251 (* (- 1) ?x36)))
 (let ((?x235 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x226 (+ 1 r)))
 (let ((?x256 (* ?x226 ?x226)))
 (let ((?x295 (* (- 3) r)))
 (let ((?x106 (* (- 1) r)))
 (let ((?x266 (+ x ?x106)))
 (let (($x365 (not (= (* ?x266 ?x266 (+ (- 1) ?x295 r00 ?x256 ?x32 ?x235 ?x251)) 0))))
 (and (= (+ ?x106 r00 (* r r) ?x32 ?x235 ?x251) 0) (or (not (= (+ ?x295 r00 ?x256 ?x32 ?x235 ?x251) 1)) $x365)))))))))))) :qid k!27))
 ))
 (let ((?x228 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x251 (* (- 1) ?x36)))
 (let ((?x235 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x226 (+ 1 r)))
 (let ((?x256 (* ?x226 ?x226)))
 (let ((?x295 (* (- 3) r)))
 (let ((?x106 (* (- 1) r)))
 (let ((?x266 (+ x ?x106)))
 (let (($x365 (not (= (* ?x266 ?x266 (+ (- 1) ?x295 r00 ?x256 ?x32 ?x235 ?x251)) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x114 (* (- 2) x)))
 (let ((?x115 (* (- 1) r00)))
 (let (($x283 (not (= (+ (* 3 r) ?x115 (* (- 1) ?x256) ?x114 ?x35 ?x36) (- 1)))))
 (let (($x246 (and (= (+ r ?x115 (* (- 1) (* r r)) ?x114 ?x35 ?x36) 0) (or $x283 $x365))))
 (let (($x368 (and (= (+ ?x106 r00 (* r r) ?x32 ?x235 ?x251) 0) (or (not (= (+ ?x295 r00 ?x256 ?x32 ?x235 ?x251) 1)) $x365))))
 (rewrite (= $x368 $x246)))))))))))))))))))
 ))
 (let (($x58 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 ?x44))))
 (let ((?x48 (- (- ?x46 ?x35) ?x36)))
 (let (($x56 (or (not (= ?x48 0)) (not (= (* ?x48 (- 4) ?x44 ?x44) 0)))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) $x56)))))))) :qid k!27))
 ))
 (let ((?x341 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x251 (* (- 1) ?x36)))
 (let ((?x235 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x226 (+ 1 r)))
 (let ((?x256 (* ?x226 ?x226)))
 (let ((?x295 (* (- 3) r)))
 (let ((?x106 (* (- 1) r)))
 (let ((?x266 (+ x ?x106)))
 (let (($x365 (not (= (* ?x266 ?x266 (+ (- 1) ?x295 r00 ?x256 ?x32 ?x235 ?x251)) 0))))
 (let (($x368 (and (= (+ ?x106 r00 (* r r) ?x32 ?x235 ?x251) 0) (or (not (= (+ ?x295 r00 ?x256 ?x32 ?x235 ?x251) 1)) $x365))))
 (let ((?x44 (- x r)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 ?x44))))
 (let ((?x48 (- (- ?x46 ?x35) ?x36)))
 (let (($x56 (or (not (= ?x48 0)) (not (= (* ?x48 (- 4) ?x44 ?x44) 0)))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x57 (and $x40 $x56)))
 (rewrite (= $x57 $x368)))))))))))))))))))))
 ))
 (let ((@x59 (asserted $x58)))
 (let ((@x233 (mp (mp @x59 (quant-intro (proof-bind ?x341) (= $x58 $x333)) $x333) (rewrite (= $x333 $x333)) $x333)))
 (let ((@x345 (mp (mp @x233 (quant-intro (proof-bind ?x228) (= $x333 $x234)) $x234) (quant-intro (proof-bind ?x305) (= $x234 $x212)) $x212)))
 (let ((@x428 (mp (mp~ @x345 (sk (~ $x212 $x277)) $x277) (rewrite (= $x277 $x369)) $x369)))
 (let ((@x375 (and-elim @x428 $x299)))
 (let ((@x377 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x349 $x285)) @x375 $x285)))
 (let (($x287 (>= ?x298 0)))
 (let ((@x409 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x349 $x287)) @x375 $x287)))
 (let (($x443 (not (>= ?x220 0))))
 (let (($x286 (<= ?x220 0)))
 (let ((@x399 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x425 (not $x286) $x443)) (unit-resolution (and-elim @x428 $x427) @x375 $x363) (or (not $x286) $x443))))
 (let ((@x447 (unit-resolution @x399 (lemma ((_ th-lemma arith) (hypothesis (not $x286)) @x409 @x377 false) $x286) $x443)))
 ((_ th-lemma arith) @x447 @x409 @x377 false)))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        15
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             164
 :arith-nonlinear-bounds    12
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-tableau-max-columns 30
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.59
 :memory                    3.09
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1123606
 :num-checks                1
 :propagations              4
 :rlimit-count              2572
 :time                      0.01
 :total-time                0.01)
