unsat
((set-logic NIA)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x348 (* (- 3) c!3)))
 (let ((?x867 (* n!0 k!2)))
 (let ((?x799 (* (- 3) k!2)))
 (let ((?x427 (* m!1 n!0)))
 (let ((?x744 (* 2 n!0)))
 (let ((?x745 (+ ?x744 ?x427 ?x799 ?x867 ?x348)))
 (let (($x828 (<= ?x745 (- 2))))
 (let (($x967 (<= n!0 0)))
 (let (($x985 (<= n!0 1)))
 (let (($x1529 (>= c!3 8)))
 (let (($x1715 (not $x1529)))
 (let ((?x307 (* (- 1) k!2)))
 (let ((?x910 (+ (* 3 n!0) (* 3 (* n!0 n!0)) ?x307)))
 (let (($x722 (<= ?x910 0)))
 (let (($x830 (= ?x910 0)))
 (let ((?x377 (+ m!1 (* (- 6) n!0))))
 (let (($x375 (= ?x377 6)))
 (let (($x891 (not $x375)))
 (let (($x810 (not (= (+ m!1 (* (- 9) n!0) (* (- 3) (* n!0 n!0)) k!2) 6))))
 (let ((?x158 (* 27 c!3)))
 (let ((?x433 (* 32 k!2)))
 (let ((?x899 (* (- 1) (* m!1 m!1))))
 (let ((?x428 (* (- 9) n!0)))
 (let ((?x367 (* k!2 k!2)))
 (let ((?x366 (* (- 1) ?x367)))
 (let ((?x607 (* 5 m!1)))
 (let ((?x733 (+ ?x607 ?x366 ?x428 ?x899 ?x433 (* 9 ?x867) (* (- 2) (* m!1 k!2)) (* 9 (* n!0 c!3)) ?x158)))
 (let ((?x385 (+ k!2 c!3)))
 (let ((?x314 (+ m!1 k!2)))
 (let ((?x608 (+ 1 n!0)))
 (let ((?x449 (* n!0 n!0)))
 (let ((?x483 (* (- 6) ?x449)))
 (let ((?x167 (* (- 12) n!0)))
 (let ((?x379 (* (- 3) ?x367)))
 (let ((?x414 (+ (- 6) (* (- 6) (* n!0 k!2 c!3)) (* (- 3) (* n!0 n!0 k!2 c!3)) (* (- 3) (* m!1 c!3)) (* (- 3) (* k!2 c!3)) ?x379 ?x167 ?x483 (* (- 6) (* m!1 n!0 k!2)) (* (- 3) (* m!1 n!0 n!0 c!3)) (* (- 3) (* m!1 n!0 n!0 k!2)) (* (- 3) (* n!0 n!0 k!2 k!2)) (* (- 6) (* n!0 k!2 k!2)) (* (- 1) (* ?x608 ?x608 ?x314 ?x314 ?x385 ?x385)) (* (- 3) (* m!1 k!2)) (* (- 6) (* m!1 n!0 c!3)))))
 (let (($x339 (or (not (= ?x745 (- 2))) (not (= (* ?x414 (+ 2 ?x744 ?x427 ?x799 ?x867 ?x348)) 0)) (not (= ?x733 13)) $x810 $x891)))
 (let ((?x338 (+ ?x744 ?x307 ?x867 ?x348)))
 (let (($x804 (= ?x338 0)))
 (let ((?x502 (+ ?x367 (* 9 n!0) (* (- 5) k!2) (* (- 9) (* n!0 c!3)) (* (- 18) c!3))))
 (let (($x873 (= ?x502 (- 4))))
 (let (($x137 (and $x375 $x873 $x804 $x830 $x339)))
 (let ((?x885 (* k!2 n!0)))
 (let ((?x813 (* (- 1) ?x885)))
 (let ((?x887 (* (- 2) n!0)))
 (let ((?x364 (* 3 c!3)))
 (let ((?x360 (* 9 (* c!3 n!0))))
 (let ((?x896 (+ ?x158 ?x433 ?x607 ?x428 ?x366 (* 9 ?x885) ?x360 (* (- 2) (* k!2 m!1)) ?x899)))
 (let ((?x610 (+ c!3 k!2)))
 (let ((?x176 (+ k!2 m!1)))
 (let ((?x199 (+ (- 6) ?x167 ?x379 ?x483 (* (- 3) (* k!2 m!1)) (* (- 1) (* ?x608 ?x608 ?x176 ?x176 ?x610 ?x610)) (* (- 3) (* c!3 k!2 n!0 n!0)) (* (- 3) (* k!2 k!2 n!0 n!0)) (* (- 3) (* c!3 m!1 n!0 n!0)) (* (- 3) (* k!2 m!1 n!0 n!0)) (* (- 3) (* c!3 k!2)) (* (- 3) (* c!3 m!1)) (* (- 6) (* c!3 k!2 n!0)) (* (- 6) (* k!2 k!2 n!0)) (* (- 6) (* c!3 m!1 n!0)) (* (- 6) (* k!2 m!1 n!0)))))
 (let (($x354 (or $x891 (not (= (* ?x199 (+ 2 ?x348 ?x799 ?x744 ?x885 ?x427)) 0)) (not (= ?x896 13)) (not (= (+ ?x364 (* 3 k!2) ?x887 ?x813 (* (- 1) ?x427)) 2)) (not (= (+ k!2 m!1 ?x428 (* (- 3) ?x449)) 6)))))
 (let (($x770 (and $x375 (= (+ (* 18 c!3) (* 5 k!2) ?x428 ?x366 ?x360) 4) (= (+ ?x364 k!2 ?x887 ?x813) 0) (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x449)) 0) $x354)))
 (let (($x206 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let (($x808 (not (= (+ k m (* (- 9) n) (* (- 3) (* n n))) 6))))
 (let ((?x52 (* k n)))
 (let ((?x264 (* (- 1) ?x52)))
 (let ((?x263 (* (- 2) n)))
 (let ((?x261 (* 3 c)))
 (let (($x546 (= (+ ?x261 (* 3 k) ?x263 ?x264 (* (- 1) (* m n))) 2)))
 (let (($x554 (not $x546)))
 (let ((?x161 (* 9 (* c n))))
 (let ((?x46 (* k k)))
 (let ((?x224 (* (- 1) ?x46)))
 (let ((?x223 (* (- 9) n)))
 (let ((?x436 (* 5 m)))
 (let ((?x524 (+ (* 27 c) (* 32 k) ?x436 ?x223 ?x224 (* 9 ?x52) ?x161 (* (- 2) (* k m)) (* (- 1) (* m m)))))
 (let (($x528 (not (= ?x524 13))))
 (let ((?x373 (* m n)))
 (let ((?x56 (* 2 n)))
 (let ((?x232 (* (- 3) c)))
 (let ((?x538 (+ 2 ?x232 (* (- 3) k) ?x56 ?x52 ?x373)))
 (let ((?x920 (* (- 6) (* k m n))))
 (let ((?x919 (* (- 6) (* c m n))))
 (let ((?x918 (* (- 6) (* k k n))))
 (let ((?x917 (* (- 6) (* c k n))))
 (let ((?x872 (* (- 3) (* c m))))
 (let ((?x865 (* (- 3) (* c k))))
 (let ((?x911 (* (- 3) (* k m n n))))
 (let ((?x908 (* (- 3) (* c m n n))))
 (let ((?x905 (* (- 3) (* k k n n))))
 (let ((?x902 (* (- 3) (* c k n n))))
 (let ((?x71 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x803 (+ 1 n)))
 (let ((?x741 (* (- 1) (* ?x803 ?x803 ?x74 ?x74 ?x71 ?x71))))
 (let ((?x486 (* k m)))
 (let ((?x875 (* (- 3) ?x486)))
 (let ((?x271 (* n n)))
 (let ((?x769 (* (- 6) ?x271)))
 (let ((?x868 (* (- 3) ?x46)))
 (let ((?x778 (* (- 12) n)))
 (let ((?x819 (+ (- 6) ?x778 ?x868 ?x769 ?x875 ?x741 ?x902 ?x905 ?x908 ?x911 ?x865 ?x872 ?x917 ?x918 ?x919 ?x920)))
 (let (($x144 (= (+ m (* (- 6) n)) 6)))
 (let (($x362 (not $x144)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) ?x271)) 0)))
 (let (($x266 (= (+ ?x261 k ?x263 ?x264) 0)))
 (let (($x221 (= (+ (* 18 c) (* 5 k) ?x223 ?x224 ?x161) 4)))
 (and $x144 $x221 $x266 $x302 (or $x362 (not (= (* ?x819 ?x538) 0)) $x528 $x554 $x808)))))))))))))))))))))))))))))))))))))))))))))) :qid k!38))
 ))
 (let (($x912 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x61 (* 3 n)))
 (let ((?x405 (* (- 1) m)))
 (let ((?x800 (* (- 1) k)))
 (let (($x509 (= (+ (* 3 (* (+ 1 n) (+ 1 n))) ?x800 ?x405 ?x61) (- 3))))
 (let (($x517 (not $x509)))
 (let ((?x223 (* (- 9) n)))
 (let ((?x436 (* 5 m)))
 (let ((?x37 (* 18 c)))
 (let ((?x448 (+ ?x37 (* 23 k) (* 9 (* (+ 1 n) (+ c k))) ?x436 ?x223 (* (- 1) (* (+ k m) (+ k m))))))
 (let ((?x56 (* 2 n)))
 (let ((?x74 (+ k m)))
 (let ((?x803 (+ 1 n)))
 (let ((?x909 (* ?x803 ?x74)))
 (let ((?x431 (* (- 4) k)))
 (let ((?x232 (* (- 3) c)))
 (let ((?x741 (* (- 1) (* ?x803 ?x803 ?x74 ?x74 (+ c k) (+ c k)))))
 (let ((?x351 (+ ?x741 (* (- 6) (* ?x803 ?x803)) (* (- 3) (* ?x803 ?x803 ?x74 (+ c k))))))
 (let (($x497 (not (= (* ?x351 (+ 2 ?x232 ?x431 ?x909 ?x405 ?x56)) 0))))
 (let ((?x263 (* (- 2) n)))
 (let ((?x261 (* 3 c)))
 (let (($x144 (= (+ m (* (- 6) n)) 6)))
 (let (($x362 (not $x144)))
 (let (($x112 (or $x362 (not (= (+ ?x261 (* 4 k) (* (- 1) ?x909) m ?x263) 2)) $x497 (not (= ?x448 13)) $x517)))
 (let (($x880 (= (+ (* 3 (* n n)) ?x800 ?x61) 0)))
 (let ((?x46 (* k k)))
 (let ((?x224 (* (- 1) ?x46)))
 (let ((?x41 (* 5 k)))
 (and $x144 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x223 ?x224) 4) (= (+ ?x261 (* (- 1) (* n k)) k ?x263) 0) $x880 $x112)))))))))))))))))))))))))))) :qid k!38))
 ))
 (let ((?x884 (lambda ((c Int) (k Int) (m Int) (n Int) )(let (($x808 (not (= (+ k m (* (- 9) n) (* (- 3) (* n n))) 6))))
 (let ((?x52 (* k n)))
 (let ((?x264 (* (- 1) ?x52)))
 (let ((?x263 (* (- 2) n)))
 (let ((?x261 (* 3 c)))
 (let (($x546 (= (+ ?x261 (* 3 k) ?x263 ?x264 (* (- 1) (* m n))) 2)))
 (let (($x554 (not $x546)))
 (let ((?x161 (* 9 (* c n))))
 (let ((?x46 (* k k)))
 (let ((?x224 (* (- 1) ?x46)))
 (let ((?x223 (* (- 9) n)))
 (let ((?x436 (* 5 m)))
 (let ((?x524 (+ (* 27 c) (* 32 k) ?x436 ?x223 ?x224 (* 9 ?x52) ?x161 (* (- 2) (* k m)) (* (- 1) (* m m)))))
 (let (($x528 (not (= ?x524 13))))
 (let ((?x373 (* m n)))
 (let ((?x56 (* 2 n)))
 (let ((?x232 (* (- 3) c)))
 (let ((?x538 (+ 2 ?x232 (* (- 3) k) ?x56 ?x52 ?x373)))
 (let ((?x920 (* (- 6) (* k m n))))
 (let ((?x919 (* (- 6) (* c m n))))
 (let ((?x918 (* (- 6) (* k k n))))
 (let ((?x917 (* (- 6) (* c k n))))
 (let ((?x872 (* (- 3) (* c m))))
 (let ((?x865 (* (- 3) (* c k))))
 (let ((?x911 (* (- 3) (* k m n n))))
 (let ((?x908 (* (- 3) (* c m n n))))
 (let ((?x905 (* (- 3) (* k k n n))))
 (let ((?x902 (* (- 3) (* c k n n))))
 (let ((?x71 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x803 (+ 1 n)))
 (let ((?x741 (* (- 1) (* ?x803 ?x803 ?x74 ?x74 ?x71 ?x71))))
 (let ((?x486 (* k m)))
 (let ((?x875 (* (- 3) ?x486)))
 (let ((?x271 (* n n)))
 (let ((?x769 (* (- 6) ?x271)))
 (let ((?x868 (* (- 3) ?x46)))
 (let ((?x778 (* (- 12) n)))
 (let ((?x819 (+ (- 6) ?x778 ?x868 ?x769 ?x875 ?x741 ?x902 ?x905 ?x908 ?x911 ?x865 ?x872 ?x917 ?x918 ?x919 ?x920)))
 (let (($x144 (= (+ m (* (- 6) n)) 6)))
 (let (($x362 (not $x144)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) ?x271)) 0)))
 (let (($x266 (= (+ ?x261 k ?x263 ?x264) 0)))
 (let (($x221 (= (+ (* 18 c) (* 5 k) ?x223 ?x224 ?x161) 4)))
 (let (($x540 (and $x144 $x221 $x266 $x302 (or $x362 (not (= (* ?x819 ?x538) 0)) $x528 $x554 $x808))))
 (let ((?x61 (* 3 n)))
 (let ((?x405 (* (- 1) m)))
 (let ((?x800 (* (- 1) k)))
 (let (($x517 (not (= (+ (* 3 (* ?x803 ?x803)) ?x800 ?x405 ?x61) (- 3)))))
 (let ((?x37 (* 18 c)))
 (let ((?x448 (+ ?x37 (* 23 k) (* 9 (* ?x803 ?x71)) ?x436 ?x223 (* (- 1) (* ?x74 ?x74)))))
 (let ((?x926 (* (+ ?x741 (* (- 6) (* ?x803 ?x803)) (* (- 3) (* ?x803 ?x803 ?x74 ?x71))) (+ 2 ?x232 (* (- 4) k) (* ?x803 ?x74) ?x405 ?x56))))
 (let (($x497 (not (= ?x926 0))))
 (let (($x444 (= (+ ?x261 (* 4 k) (* (- 1) (* ?x803 ?x74)) m ?x263) 2)))
 (let (($x880 (= (+ (* 3 ?x271) ?x800 ?x61) 0)))
 (let (($x392 (= (+ ?x37 (* 9 (* n c)) (* 5 k) ?x223 ?x224) 4)))
 (let (($x319 (and $x144 $x392 (= (+ ?x261 (* (- 1) (* n k)) k ?x263) 0) $x880 (or $x362 (not $x444) $x497 (not (= ?x448 13)) $x517))))
 (rewrite (= $x319 $x540))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x903 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x56 (* 2 n)))
 (let ((?x405 (* (- 1) m)))
 (let ((?x74 (+ k m)))
 (let ((?x803 (+ 1 n)))
 (let ((?x909 (* ?x803 ?x74)))
 (let ((?x431 (* (- 4) k)))
 (let ((?x232 (* (- 3) c)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x131 (* (- 18) c)))
 (let ((?x465 (+ ?x131 (* (- 23) k) (* (- 9) (* ?x803 (+ c k))) (* (- 5) m) ?x45 ?x80)))
 (let (($x509 (= (+ (* 3 (* ?x803 ?x803)) (* (- 1) k) ?x405 (* 3 n)) (- 3))))
 (let (($x517 (not $x509)))
 (let ((?x741 (* (- 1) (* ?x803 ?x803 ?x74 ?x74 (+ c k) (+ c k)))))
 (let ((?x351 (+ ?x741 (* (- 6) (* ?x803 ?x803)) (* (- 3) (* ?x803 ?x803 ?x74 (+ c k))))))
 (let (($x497 (not (= (* ?x351 (+ 2 ?x232 ?x431 ?x909 ?x405 ?x56)) 0))))
 (let (($x144 (= (+ m (* (- 6) n)) 6)))
 (let (($x362 (not $x144)))
 (let (($x730 (or $x362 $x497 $x517 (not (= ?x465 (- 13))) (not (= (+ ?x232 ?x431 ?x909 ?x405 ?x56) (- 2))))))
 (let (($x880 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) 0)))
 (let (($x480 (= (+ ?x131 (* (- 9) (* n c)) (* (- 5) k) ?x45 (* k k)) (- 4))))
 (and $x144 $x480 (= (+ ?x232 (* n k) (* (- 1) k) ?x56) 0) $x880 $x730)))))))))))))))))))))) :qid k!38))
 ))
 (let ((?x455 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x61 (* 3 n)))
 (let ((?x405 (* (- 1) m)))
 (let ((?x800 (* (- 1) k)))
 (let (($x509 (= (+ (* 3 (* (+ 1 n) (+ 1 n))) ?x800 ?x405 ?x61) (- 3))))
 (let (($x517 (not $x509)))
 (let ((?x223 (* (- 9) n)))
 (let ((?x436 (* 5 m)))
 (let ((?x37 (* 18 c)))
 (let ((?x448 (+ ?x37 (* 23 k) (* 9 (* (+ 1 n) (+ c k))) ?x436 ?x223 (* (- 1) (* (+ k m) (+ k m))))))
 (let ((?x56 (* 2 n)))
 (let ((?x74 (+ k m)))
 (let ((?x803 (+ 1 n)))
 (let ((?x909 (* ?x803 ?x74)))
 (let ((?x431 (* (- 4) k)))
 (let ((?x232 (* (- 3) c)))
 (let ((?x741 (* (- 1) (* ?x803 ?x803 ?x74 ?x74 (+ c k) (+ c k)))))
 (let ((?x351 (+ ?x741 (* (- 6) (* ?x803 ?x803)) (* (- 3) (* ?x803 ?x803 ?x74 (+ c k))))))
 (let (($x497 (not (= (* ?x351 (+ 2 ?x232 ?x431 ?x909 ?x405 ?x56)) 0))))
 (let ((?x263 (* (- 2) n)))
 (let ((?x261 (* 3 c)))
 (let (($x144 (= (+ m (* (- 6) n)) 6)))
 (let (($x362 (not $x144)))
 (let (($x112 (or $x362 (not (= (+ ?x261 (* 4 k) (* (- 1) ?x909) m ?x263) 2)) $x497 (not (= ?x448 13)) $x517)))
 (let (($x880 (= (+ (* 3 (* n n)) ?x800 ?x61) 0)))
 (let ((?x46 (* k k)))
 (let ((?x224 (* (- 1) ?x46)))
 (let ((?x41 (* 5 k)))
 (let (($x319 (and $x144 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x223 ?x224) 4) (= (+ ?x261 (* (- 1) (* n k)) k ?x263) 0) $x880 $x112)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x131 (* (- 18) c)))
 (let ((?x465 (+ ?x131 (* (- 23) k) (* (- 9) (* ?x803 (+ c k))) (* (- 5) m) ?x45 ?x80)))
 (let (($x730 (or $x362 $x497 $x517 (not (= ?x465 (- 13))) (not (= (+ ?x232 ?x431 ?x909 ?x405 ?x56) (- 2))))))
 (let (($x480 (= (+ ?x131 (* (- 9) (* n c)) (* (- 5) k) ?x45 ?x46) (- 4))))
 (let (($x746 (and $x144 $x480 (= (+ ?x232 (* n k) ?x800 ?x56) 0) $x880 $x730)))
 (rewrite (= $x746 $x319))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x109 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x66 (+ n 1)))
 (let ((?x74 (+ k m)))
 (let ((?x71 (+ c k)))
 (let ((?x102 (- (* (- 1) ?x71 ?x71 ?x74 ?x74 ?x66 ?x66) (* 6 ?x66 ?x66))))
 (let ((?x89 (+ (- (+ (* (- 3) ?x71) (* ?x74 ?x66)) ?x74) (* 2 ?x66))))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x78 (- (- (- 4 (* 18 ?x71)) (* 9 ?x71 ?x66)) (* 5 ?x74))))
 (let (($x107 (or (not (= (- (+ (- 6) m 6) (* 6 ?x66)) 0)) (not (= (+ ?x78 (* 9 ?x66) ?x80) 0)) (not (= ?x89 0)) (not (= (+ (- (* 3 ?x66 ?x66) ?x74) (* 3 ?x66)) 0)) (not (= (* ?x89 (- ?x102 (* 3 ?x71 ?x74 ?x66 ?x66))) 0)))))
 (let (($x58 (= (+ (- (+ (* (- 3) c) (* k n)) k) (* 2 n)) 0)))
 (let ((?x46 (* k k)))
 (let ((?x45 (* 9 n)))
 (let ((?x41 (* 5 k)))
 (let ((?x47 (+ (- (- (- 4 (* 18 c)) (* 9 c n)) ?x41) ?x45 ?x46)))
 (and (= (- (+ (- 6) m) (* 6 n)) 0) (= ?x47 0) $x58 (= (+ (- (* 3 n n) k) (* 3 n)) 0) $x107)))))))))))))) :qid k!38))
 ))
 (let ((?x826 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x56 (* 2 n)))
 (let ((?x405 (* (- 1) m)))
 (let ((?x74 (+ k m)))
 (let ((?x803 (+ 1 n)))
 (let ((?x909 (* ?x803 ?x74)))
 (let ((?x431 (* (- 4) k)))
 (let ((?x232 (* (- 3) c)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x131 (* (- 18) c)))
 (let ((?x465 (+ ?x131 (* (- 23) k) (* (- 9) (* ?x803 (+ c k))) (* (- 5) m) ?x45 ?x80)))
 (let (($x509 (= (+ (* 3 (* ?x803 ?x803)) (* (- 1) k) ?x405 (* 3 n)) (- 3))))
 (let (($x517 (not $x509)))
 (let ((?x741 (* (- 1) (* ?x803 ?x803 ?x74 ?x74 (+ c k) (+ c k)))))
 (let ((?x351 (+ ?x741 (* (- 6) (* ?x803 ?x803)) (* (- 3) (* ?x803 ?x803 ?x74 (+ c k))))))
 (let (($x497 (not (= (* ?x351 (+ 2 ?x232 ?x431 ?x909 ?x405 ?x56)) 0))))
 (let (($x144 (= (+ m (* (- 6) n)) 6)))
 (let (($x362 (not $x144)))
 (let (($x730 (or $x362 $x497 $x517 (not (= ?x465 (- 13))) (not (= (+ ?x232 ?x431 ?x909 ?x405 ?x56) (- 2))))))
 (let (($x880 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) 0)))
 (let (($x480 (= (+ ?x131 (* (- 9) (* n c)) (* (- 5) k) ?x45 (* k k)) (- 4))))
 (let (($x746 (and $x144 $x480 (= (+ ?x232 (* n k) (* (- 1) k) ?x56) 0) $x880 $x730)))
 (let ((?x66 (+ n 1)))
 (let ((?x71 (+ c k)))
 (let ((?x102 (- (* (- 1) ?x71 ?x71 ?x74 ?x74 ?x66 ?x66) (* 6 ?x66 ?x66))))
 (let ((?x89 (+ (- (+ (* (- 3) ?x71) (* ?x74 ?x66)) ?x74) (* 2 ?x66))))
 (let ((?x78 (- (- (- 4 (* 18 ?x71)) (* 9 ?x71 ?x66)) (* 5 ?x74))))
 (let (($x107 (or (not (= (- (+ (- 6) m 6) (* 6 ?x66)) 0)) (not (= (+ ?x78 (* 9 ?x66) ?x80) 0)) (not (= ?x89 0)) (not (= (+ (- (* 3 ?x66 ?x66) ?x74) (* 3 ?x66)) 0)) (not (= (* ?x89 (- ?x102 (* 3 ?x71 ?x74 ?x66 ?x66))) 0)))))
 (let ((?x46 (* k k)))
 (let ((?x41 (* 5 k)))
 (let ((?x47 (+ (- (- (- 4 (* 18 c)) (* 9 c n)) ?x41) ?x45 ?x46)))
 (let (($x108 (and (= (- (+ (- 6) m) (* 6 n)) 0) (= ?x47 0) (= (+ (- (+ (* (- 3) c) (* k n)) k) ?x56) 0) (= (+ (- (* 3 n n) k) (* 3 n)) 0) $x107)))
 (rewrite (= $x108 $x746)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x110 (asserted $x109)))
 (let ((@x341 (mp (mp @x110 (quant-intro (proof-bind ?x826) (= $x109 $x903)) $x903) (rewrite (= $x903 $x903)) $x903)))
 (let ((@x420 (mp (mp @x341 (quant-intro (proof-bind ?x455) (= $x903 $x912)) $x912) (quant-intro (proof-bind ?x884) (= $x912 $x206)) $x206)))
 (let ((@x121 (mp (mp~ @x420 (sk (~ $x206 $x770)) $x770) (rewrite (= $x770 $x137)) $x137)))
 (let ((@x443 (and-elim @x121 $x830)))
 (let ((@x425 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x830) $x722)) @x443 $x722)))
 (let (($x922 (>= ?x910 0)))
 (let ((@x496 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x830) $x922)) @x443 $x922)))
 (let (($x821 (<= ?x502 (- 4))))
 (let ((@x856 (and-elim @x121 $x873)))
 (let ((@x848 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x873) $x821)) @x856 $x821)))
 (let (($x809 (>= ?x502 (- 4))))
 (let ((@x457 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x873) $x809)) @x856 $x809)))
 (let (($x430 (<= ?x338 0)))
 (let ((@x315 (and-elim @x121 $x804)))
 (let ((@x456 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x804) $x430)) @x315 $x430)))
 (let (($x429 (>= ?x338 0)))
 (let ((@x915 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x804) $x429)) @x315 $x429)))
 (let ((@x1728 ((_ th-lemma arith) (hypothesis $x1529) @x496 @x425 @x496 @x425 @x496 @x425 @x915 @x456 @x457 @x848 @x496 @x425 false)))
 (let ((?x1724 (+ ?x367 (* 8 n!0) (* 2 ?x449) (* (- 4) k!2) (* (- 6) (* n!0 c!3)) (* (- 12) c!3))))
 (let ((@x1721 ((_ th-lemma arith) ((_ th-lemma arith gomory-cut 1 1 1/2 1/2) @x457 @x496 @x425 (hypothesis (not $x985)) (>= ?x1724 106)) (hypothesis $x1715) @x457 @x848 @x496 @x425 @x457 @x848 @x496 @x425 @x496 @x425 @x457 @x848 @x496 @x425 @x496 @x425 @x457 @x848 @x457 @x848 @x915 @x456 @x496 @x425 @x457 @x848 false)))
 (let ((@x989 (hypothesis $x985)))
 (let (($x978 (not $x967)))
 (let ((@x990 (hypothesis $x978)))
 (let ((@x1365 ((_ th-lemma arith gcd-test -1 -1 3 3 -11 -11 -11 -11 -11 -46/3 -46/3 -5 -5 -5 -5 -17/3 -17/3 -17/3 -17/3 17/3 17/3) @x457 @x848 @x496 @x425 @x990 @x990 @x989 @x990 @x989 @x990 @x989 @x990 @x989 @x990 @x989 @x990 @x989 @x990 @x989 @x915 @x456 false)))
 (let ((@x1732 (unit-resolution (lemma @x1365 (or $x967 (not $x985))) (unit-resolution (lemma @x1721 (or $x1529 $x985)) (lemma @x1728 $x1715) $x985) $x967)))
 (let (($x545 (<= k!2 0)))
 (let (($x281 (not $x545)))
 (let (($x783 (>= k!2 0)))
 (let (($x525 (not $x783)))
 (let ((@x550 (hypothesis $x525)))
 (let (($x1413 (>= ?x449 0)))
 (let ((@x1449 (lemma ((_ th-lemma arith farkas 1) (hypothesis (not $x1413)) false) $x1413)))
 (let ((@x1446 (lemma ((_ th-lemma arith) @x425 @x1449 @x550 @x425 @x550 @x425 @x1449 @x550 false) $x783)))
 (let ((@x833 (hypothesis $x545)))
 (let ((@x834 (hypothesis $x783)))
 (let ((@x835 ((_ th-lemma arith gcd-test -4/9 -4/9 -5/9 -5/9 -2/3 -2/3 -2/3 -2/3 2/3 2/3 -4/9 -4/9) @x457 @x848 @x834 @x833 @x834 @x833 @x834 @x833 @x915 @x456 @x496 @x425 false)))
 (let (($x723 (<= n!0 (- 1))))
 (let (($x208 (not $x723)))
 (let ((@x282 (hypothesis $x281)))
 (let ((@x192 (hypothesis $x723)))
 (let (($x397 (>= c!3 (- 1))))
 (let ((@x530 ((_ th-lemma arith) (hypothesis (not $x397)) @x457 @x848 @x496 @x425 @x457 @x848 @x496 @x425 @x496 @x425 @x496 @x425 @x496 @x425 @x915 @x456 @x457 @x848 @x915 @x456 @x915 @x456 @x457 @x848 @x915 @x456 @x457 @x848 false)))
 (let ((@x965 (lemma ((_ th-lemma arith farkas -1 -1 1 3 -2 1) @x192 @x282 @x915 (lemma @x530 $x397) @x192 @x282 false) (or $x208 $x545))))
 (let ((@x974 ((_ th-lemma arith farkas 1 -1 2 1 1) (hypothesis (not $x828)) @x456 @x282 (unit-resolution @x965 @x282 $x208) (hypothesis $x967) false)))
 (let ((@x1734 (unit-resolution (lemma @x974 (or $x978 $x828 $x545)) (unit-resolution (lemma @x835 (or $x281 $x525)) @x1446 $x281) (or $x978 $x828))))
 (let (($x850 (>= ?x745 (- 2))))
 (let (($x426 (<= ?x377 6)))
 (let ((@x467 (and-elim @x121 $x375)))
 (let ((@x879 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x891 $x426)) @x467 $x426)))
 (let (($x811 (>= ?x377 6)))
 (let ((@x913 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x891 $x811)) @x467 $x811)))
 (let ((@x324 ((_ th-lemma arith) (hypothesis (not $x850)) @x457 @x848 @x496 @x425 @x457 @x848 @x496 @x425 @x496 @x425 @x915 @x456 @x457 @x848 @x496 @x425 @x915 @x456 @x457 @x848 @x496 @x425 @x913 @x879 @x457 @x848 false)))
 ((_ th-lemma arith) @x496 @x425 @x913 @x879 @x915 @x456 (lemma @x324 $x850) (unit-resolution @x1734 @x1732 $x828) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 167
 :arith-assert-diseq        22
 :arith-assert-lower        872
 :arith-assert-upper        394
 :arith-bound-prop          11
 :arith-branch-var          26
 :arith-conflicts           69
 :arith-eq-adapter          16
 :arith-fixed-eqs           221
 :arith-gcd-tests           285
 :arith-gomory-cuts         18
 :arith-grobner             88
 :arith-ineq-splits         26
 :arith-max-min             7883
 :arith-nonlinear-bounds    134
 :arith-nonlinear-horner    917
 :arith-num-rows            24
 :arith-offset-eqs          17
 :arith-patches             71
 :arith-patches_succ        20
 :arith-pivots              1124
 :arith-pseudo-nonlinear    230
 :arith-row-summations      9276
 :arith-tableau-max-columns 71
 :arith-tableau-max-rows    24
 :conflicts                 83
 :decisions                 286
 :del-clause                141
 :final-checks              220
 :max-memory                4.22
 :memory                    3.31
 :minimized-lits            19
 :mk-bool-var               355
 :mk-clause                 273
 :num-allocs                13528640
 :num-checks                1
 :propagations              411
 :rlimit-count              573162
 :time                      0.14
 :total-time                0.15)
