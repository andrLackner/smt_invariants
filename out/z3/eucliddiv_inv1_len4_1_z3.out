unsat
((set-logic NIA)
(proof
(let (($x250 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x92 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x70 (* (- 1) y00)))
 (let (($x135 (not (= (+ r ?x70 ?x68 ?x92 (* y00 (+ 1 q))) 0))))
 (let (($x253 (= (+ r ?x68 ?x92 (* y00 q)) 0)))
 (let ((?x245 (* (- 1) y)))
 (let ((?x246 (+ y00 ?x245)))
 (let (($x247 (= ?x246 0)))
 (and $x247 $x253 $x135)))))))))) :qid k!31))
 ))
 (let (($x231 (exists ((q Int) (r Int) (y Int) )(! false :qid k!31))
 ))
 (let ((@x237 (elim-unused (= $x231 false))))
 (let ((?x145 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x92 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x70 (* (- 1) y00)))
 (let (($x135 (not (= (+ r ?x70 ?x68 ?x92 (* y00 (+ 1 q))) 0))))
 (let (($x253 (= (+ r ?x68 ?x92 (* y00 q)) 0)))
 (let ((?x245 (* (- 1) y)))
 (let ((?x246 (+ y00 ?x245)))
 (let (($x247 (= ?x246 0)))
 (let (($x281 (and $x247 $x253 $x135)))
 (let (($x104 (= (+ r ?x68 (* q y00) (* (- 1) (* y00 q00))) 0)))
 (let (($x112 (not $x104)))
 (let (($x79 (= (+ y ?x70) 0)))
 (let (($x224 (and $x79 $x104 $x112)))
 (let ((@x228 (rewrite (= $x224 false))))
 (let ((@x262 (monotonicity (rewrite (= ?x246 (+ ?x245 y00))) (= $x247 (= (+ ?x245 y00) 0)))))
 (let ((@x266 (trans @x262 (rewrite (= (= (+ ?x245 y00) 0) $x79)) (= $x247 $x79))))
 (let ((@x133 (monotonicity @x266 (rewrite (= $x253 $x104)) (rewrite (= $x135 $x112)) (= $x281 $x224))))
 (trans @x133 @x228 (= $x281 false)))))))))))))))))))))
 ))
 (let ((@x122 (trans (quant-intro (proof-bind ?x145) (= $x250 $x231)) @x237 (= $x250 false))))
 (let (($x297 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x92 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x70 (* (- 1) y00)))
 (let (($x135 (not (= (+ r ?x70 ?x68 ?x92 (* y00 (+ 1 q))) 0))))
 (let (($x253 (= (+ r ?x68 ?x92 (* y00 q)) 0)))
 (and (= (+ ?x70 y) 0) $x253 $x135))))))) :qid k!31))
 ))
 (let ((?x249 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x92 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x70 (* (- 1) y00)))
 (let (($x135 (not (= (+ r ?x70 ?x68 ?x92 (* y00 (+ 1 q))) 0))))
 (let (($x253 (= (+ r ?x68 ?x92 (* y00 q)) 0)))
 (let ((?x245 (* (- 1) y)))
 (let ((?x246 (+ y00 ?x245)))
 (let (($x247 (= ?x246 0)))
 (let (($x281 (and $x247 $x253 $x135)))
 (let (($x295 (and (= (+ ?x70 y) 0) $x253 $x135)))
 (rewrite (= $x295 $x281))))))))))))))
 ))
 (let (($x65 (exists ((q Int) (r Int) (y Int) )(! (let ((?x45 (- r y00)))
 (let ((?x48 (+ q 1)))
 (let ((?x58 (* 2 ?x48 ?x48 ?x45 y00)))
 (let ((?x56 (* 10 ?x48 ?x45 ?x45 y00)))
 (let ((?x54 (* 4 ?x48 ?x48 y00 y00)))
 (let ((?x59 (+ ?x54 ?x45 ?x56 ?x58)))
 (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x60 (* ?x42 ?x59)))
 (let (($x61 (= ?x60 0)))
 (let (($x62 (not $x61)))
 (let (($x52 (not (= (+ (- (- ?x45 r00) (* q00 y00)) (* ?x48 y00)) 0))))
 (let (($x43 (= ?x42 0)))
 (let (($x44 (not $x43)))
 (let (($x63 (or $x44 $x52 $x62)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x63)))))))))))))))))) :qid k!31))
 ))
 (let ((?x299 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x92 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x70 (* (- 1) y00)))
 (let (($x135 (not (= (+ r ?x70 ?x68 ?x92 (* y00 (+ 1 q))) 0))))
 (let (($x253 (= (+ r ?x68 ?x92 (* y00 q)) 0)))
 (let (($x295 (and (= (+ ?x70 y) 0) $x253 $x135)))
 (let ((?x45 (- r y00)))
 (let ((?x48 (+ q 1)))
 (let ((?x58 (* 2 ?x48 ?x48 ?x45 y00)))
 (let ((?x56 (* 10 ?x48 ?x45 ?x45 y00)))
 (let ((?x54 (* 4 ?x48 ?x48 y00 y00)))
 (let ((?x59 (+ ?x54 ?x45 ?x56 ?x58)))
 (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x60 (* ?x42 ?x59)))
 (let (($x61 (= ?x60 0)))
 (let (($x62 (not $x61)))
 (let (($x52 (not (= (+ (- (- ?x45 r00) ?x36) (* ?x48 y00)) 0))))
 (let (($x43 (= ?x42 0)))
 (let (($x44 (not $x43)))
 (let (($x63 (or $x44 $x52 $x62)))
 (let (($x41 (= (+ (- (- r r00) ?x36) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x64 (and $x33 $x41 $x63)))
 (rewrite (= $x64 $x295))))))))))))))))))))))))))))
 ))
 (let ((@x66 (asserted $x65)))
 (let ((@x256 (mp (mp @x66 (quant-intro (proof-bind ?x299) (= $x65 $x297)) $x297) (rewrite (= $x297 $x297)) $x297)))
 (mp (mp @x256 (quant-intro (proof-bind ?x249) (= $x297 $x250)) $x250) @x122 false))))))))))))))

(:max-memory   3.35
 :memory       3.04
 :mk-bool-var  6
 :num-allocs   980835
 :num-checks   1
 :rlimit-count 423
 :time         0.01
 :total-time   0.02)
