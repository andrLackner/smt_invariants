unsat
((set-logic NIA)
(proof
(let (($x140 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x109 (* (- 2) x)))
 (let ((?x110 (* (- 1) r00)))
 (let ((?x192 (+ (* 3 r) ?x110 (* (- 1) (* (+ 1 r) (+ 1 r))) ?x109 ?x35 ?x36)))
 (let (($x148 (not (= ?x192 (- 1)))))
 (let (($x216 (= (+ r ?x110 (* (- 1) (* r r)) ?x109 ?x35 ?x36) 0)))
 (and $x216 $x148)))))))) :qid k!25))
 ))
 (let (($x144 (exists ((r Int) (x Int) )(! false :qid k!25))
 ))
 (let ((@x169 (elim-unused (= $x144 false))))
 (let ((?x159 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x109 (* (- 2) x)))
 (let ((?x110 (* (- 1) r00)))
 (let ((?x192 (+ (* 3 r) ?x110 (* (- 1) (* (+ 1 r) (+ 1 r))) ?x109 ?x35 ?x36)))
 (let (($x148 (not (= ?x192 (- 1)))))
 (let (($x216 (= (+ r ?x110 (* (- 1) (* r r)) ?x109 ?x35 ?x36) 0)))
 (let (($x194 (and $x216 $x148)))
 (let (($x113 (= (+ r ?x109 ?x110 (* (- 1) (* r r)) ?x35 ?x36) 0)))
 (let (($x209 (not $x113)))
 (let (($x130 (and $x113 $x209)))
 (let ((@x137 (rewrite (= $x130 false))))
 (let ((@x185 (monotonicity (rewrite (= $x216 $x113)) (rewrite (= $x148 $x209)) (= $x194 $x130))))
 (trans @x185 @x137 (= $x194 false))))))))))))))))
 ))
 (let ((@x175 (trans (quant-intro (proof-bind ?x159) (= $x140 $x144)) @x169 (= $x140 false))))
 (let (($x195 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x95 (* (- 1) ?x36)))
 (let ((?x79 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x167 (+ 1 r)))
 (let ((?x193 (* ?x167 ?x167)))
 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x79 ?x95) 0) (not (= (+ (* (- 3) r) r00 ?x193 ?x32 ?x79 ?x95) 1))))))))) :qid k!25))
 ))
 (let ((?x141 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x109 (* (- 2) x)))
 (let ((?x110 (* (- 1) r00)))
 (let ((?x192 (+ (* 3 r) ?x110 (* (- 1) (* (+ 1 r) (+ 1 r))) ?x109 ?x35 ?x36)))
 (let (($x148 (not (= ?x192 (- 1)))))
 (let (($x216 (= (+ r ?x110 (* (- 1) (* r r)) ?x109 ?x35 ?x36) 0)))
 (let (($x194 (and $x216 $x148)))
 (let ((?x95 (* (- 1) ?x36)))
 (let ((?x79 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x167 (+ 1 r)))
 (let ((?x193 (* ?x167 ?x167)))
 (let (($x189 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x79 ?x95) 0) (not (= (+ (* (- 3) r) r00 ?x193 ?x32 ?x79 ?x95) 1)))))
 (rewrite (= $x189 $x194)))))))))))))))))
 ))
 (let (($x53 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let (($x50 (not (= (- (- ?x46 ?x35) ?x36) 0))))
 (let (($x51 (or $x50)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let ((?x27 (- 1)))
 (let ((?x28 (* ?x27 r)))
 (let ((?x33 (+ ?x28 r00 ?x30 ?x32)))
 (let ((?x37 (- ?x33 ?x35)))
 (let ((?x38 (- ?x37 ?x36)))
 (let (($x40 (= ?x38 0)))
 (and $x40 $x51)))))))))))))) :qid k!25))
 ))
 (let ((?x198 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x95 (* (- 1) ?x36)))
 (let ((?x79 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x167 (+ 1 r)))
 (let ((?x193 (* ?x167 ?x167)))
 (let (($x189 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x79 ?x95) 0) (not (= (+ (* (- 3) r) r00 ?x193 ?x32 ?x79 ?x95) 1)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let (($x50 (not (= (- (- ?x46 ?x35) ?x36) 0))))
 (let (($x51 (or $x50)))
 (let ((?x30 (* r r)))
 (let ((?x27 (- 1)))
 (let ((?x28 (* ?x27 r)))
 (let ((?x33 (+ ?x28 r00 ?x30 ?x32)))
 (let ((?x37 (- ?x33 ?x35)))
 (let ((?x38 (- ?x37 ?x36)))
 (let (($x40 (= ?x38 0)))
 (let (($x52 (and $x40 $x51)))
 (rewrite (= $x52 $x189))))))))))))))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (let ((@x211 (mp (mp @x54 (quant-intro (proof-bind ?x198) (= $x53 $x195)) $x195) (rewrite (= $x195 $x195)) $x195)))
 (mp (mp @x211 (quant-intro (proof-bind ?x141) (= $x195 $x140)) $x140) @x175 false))))))))))))))

(:max-memory   3.34
 :memory       3.04
 :mk-bool-var  6
 :num-allocs   984600
 :num-checks   1
 :rlimit-count 373
 :time         0.01
 :total-time   0.01)
