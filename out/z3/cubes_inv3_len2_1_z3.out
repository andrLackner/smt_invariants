unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x472 (* n!0 n!0)))
 (let ((?x508 (* (- 3) ?x472)))
 (let ((?x514 (+ k!2 (* (- 3) n!0) ?x508)))
 (let (($x310 (<= ?x514 0)))
 (let (($x479 (= ?x514 0)))
 (let ((?x473 (* k!2 m!1)))
 (let ((?x491 (* (- 2) ?x473)))
 (let ((?x471 (* k!2 n!0)))
 (let ((?x462 (* 9 ?x471)))
 (let ((?x245 (* 5 m!1)))
 (let ((?x345 (* k!2 k!2)))
 (let ((?x481 (* (- 1) ?x345)))
 (let ((?x233 (* 27 c!3)))
 (let ((?x243 (* m!1 m!1)))
 (let ((?x487 (* (- 1) ?x243)))
 (let ((?x202 (* n!0 c!3)))
 (let ((?x555 (* 9 ?x202)))
 (let ((?x154 (* (- 9) n!0)))
 (let ((?x239 (* 32 k!2)))
 (let ((?x470 (* (- 1) ?x471)))
 (let ((?x166 (* 3 c!3)))
 (let ((?x447 (* (- 2) n!0)))
 (let ((?x278 (* 3 k!2)))
 (let ((?x465 (* n!0 m!1)))
 (let ((?x536 (* (- 3) c!3)))
 (let ((?x540 (* 2 n!0)))
 (let ((?x538 (* (- 3) k!2)))
 (let ((?x242 (* 7 ?x473)))
 (let ((?x511 (* 42 m!1)))
 (let ((?x558 (* 216 (* c!3 c!3))))
 (let ((?x412 (* 216 ?x345)))
 (let ((?x257 (* 6 (* c!3 c!3 m!1 m!1))))
 (let ((?x252 (* 72 (* k!2 k!2 m!1))))
 (let ((?x596 (* 6 (* k!2 k!2 m!1 m!1))))
 (let ((?x346 (* 7 ?x243)))
 (let ((?x241 (* 72 (* c!3 c!3 m!1))))
 (let ((?x510 (* 42 k!2)))
 (let ((?x403 (+ ?x510 (* 144 (* k!2 c!3 m!1)) ?x241 ?x346 ?x596 ?x252 ?x257 ?x412 ?x558 ?x511 ?x242 (* 12 (* k!2 c!3 m!1 m!1)) (* 432 (* k!2 c!3)))))
 (let ((?x445 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x609 (= ?x445 (- 6))))
 (let (($x254 (not $x609)))
 (let (($x411 (or $x254 (not (= (* ?x403 (+ 2 ?x538 ?x540 ?x536 ?x465 ?x471)) 0)) (not (= (+ k!2 ?x154 m!1 ?x508) 6)) (not (= (+ ?x278 ?x447 ?x166 (* (- 1) ?x465) ?x470) 2)) (not (= (+ ?x239 ?x154 ?x555 ?x487 ?x233 ?x481 ?x245 ?x462 ?x491) 13)))))
 (let ((?x550 (+ k!2 ?x447 ?x166 ?x470)))
 (let (($x531 (= ?x550 0)))
 (let ((?x460 (* 18 c!3)))
 (let ((?x213 (* 5 k!2)))
 (let ((?x513 (+ ?x213 ?x154 ?x555 ?x460 ?x481)))
 (let (($x557 (= ?x513 4)))
 (let (($x190 (and $x609 $x557 $x531 $x479 $x411)))
 (let ((?x309 (* 9 (* c!3 n!0))))
 (let ((?x438 (+ ?x510 ?x511 ?x412 ?x558 (* 432 (* c!3 k!2)) ?x241 ?x242 ?x346 (* 144 (* c!3 k!2 m!1)) ?x252 ?x257 (* 12 (* c!3 k!2 m!1 m!1)) ?x596)))
 (let (($x321 (not (= (* ?x438 (+ 2 ?x536 ?x538 ?x540 ?x471 (* m!1 n!0))) 0))))
 (let (($x585 (or $x321 (not (= (+ m!1 (* (- 6) n!0)) 6)) (not (= (+ k!2 m!1 ?x154 ?x508) 6)) (not (= (+ ?x233 ?x239 ?x245 ?x154 ?x481 ?x462 ?x309 ?x491 ?x487) 13)) (not (= (+ ?x166 ?x278 ?x447 ?x470 (* (- 1) (* m!1 n!0))) 2)))))
 (let (($x428 (= (+ m!1 (* (- 6) n!0)) 6)))
 (let (($x384 (and $x428 (= (+ ?x460 ?x213 ?x154 ?x481 ?x309) 4) (= (+ ?x166 k!2 ?x447 ?x470) 0) $x479 $x585)))
 (let (($x133 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x52 (* k n)))
 (let ((?x263 (* (- 1) ?x52)))
 (let ((?x262 (* (- 2) n)))
 (let ((?x260 (* 3 c)))
 (let (($x545 (= (+ ?x260 (* 3 k) ?x262 ?x263 (* (- 1) (* m n))) 2)))
 (let (($x553 (not $x545)))
 (let ((?x160 (* 9 (* c n))))
 (let ((?x46 (* k k)))
 (let ((?x223 (* (- 1) ?x46)))
 (let ((?x222 (* (- 9) n)))
 (let ((?x435 (* 5 m)))
 (let ((?x523 (+ (* 27 c) (* 32 k) ?x435 ?x222 ?x223 (* 9 ?x52) ?x160 (* (- 2) (* k m)) (* (- 1) (* m m)))))
 (let (($x527 (not (= ?x523 13))))
 (let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x361 (not $x143)))
 (let ((?x372 (* m n)))
 (let ((?x56 (* 2 n)))
 (let ((?x231 (* (- 3) c)))
 (let ((?x537 (+ 2 ?x231 (* (- 3) k) ?x56 ?x52 ?x372)))
 (let ((?x644 (* 6 (* k k m m))))
 (let ((?x638 (* 6 (* c c m m))))
 (let ((?x486 (* m m)))
 (let ((?x579 (* 7 ?x486)))
 (let ((?x485 (* k m)))
 (let ((?x578 (* 7 ?x485)))
 (let ((?x454 (+ (* 42 k) (* 42 m) (* 216 ?x46) (* 216 (* c c)) (* 432 (* c k)) (* 72 (* c c m)) ?x578 ?x579 (* 144 (* c k m)) (* 72 (* k k m)) ?x638 (* 12 (* c k m m)) ?x644)))
 (let (($x161 (or (not (= (* ?x454 ?x537) 0)) $x361 (not (= (+ k m ?x222 (* (- 3) (* n n))) 6)) $x527 $x553)))
 (let (($x301 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 0)))
 (let (($x265 (= (+ ?x260 k ?x262 ?x263) 0)))
 (let (($x220 (= (+ (* 18 c) (* 5 k) ?x222 ?x223 ?x160) 4)))
 (and $x143 $x220 $x265 $x301 $x161))))))))))))))))))))))))))))))) :qid k!38))
 ))
 (let (($x175 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x361 (not $x143)))
 (let ((?x262 (* (- 2) n)))
 (let ((?x260 (* 3 c)))
 (let ((?x592 (+ ?x260 (* 4 k) (* (- 1) (* (+ 1 n) (+ k m))) m ?x262)))
 (let ((?x56 (* 2 n)))
 (let ((?x401 (* (- 1) m)))
 (let ((?x74 (+ k m)))
 (let ((?x437 (+ 1 n)))
 (let ((?x525 (* ?x437 ?x74)))
 (let ((?x432 (* (- 4) k)))
 (let ((?x231 (* (- 3) c)))
 (let ((?x286 (* 6 (* (+ 6 m) (+ 6 m) (+ c k) (+ c k)))))
 (let ((?x287 (* (+ (* 7 (* (+ 6 m) ?x74)) ?x286) (+ 2 ?x231 ?x432 ?x525 ?x401 ?x56))))
 (let (($x294 (not (= ?x287 0))))
 (let ((?x222 (* (- 9) n)))
 (let ((?x435 (* 5 m)))
 (let ((?x37 (* 18 c)))
 (let ((?x273 (+ ?x37 (* 23 k) (* 9 (* ?x437 (+ c k))) ?x435 ?x222 (* (- 1) (* ?x74 ?x74)))))
 (let (($x248 (= (+ (* 3 (* ?x437 ?x437)) (* (- 1) k) ?x401 (* 3 n)) (- 3))))
 (let (($x253 (not $x248)))
 (let (($x594 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) 0)))
 (let ((?x46 (* k k)))
 (let ((?x223 (* (- 1) ?x46)))
 (let ((?x41 (* 5 k)))
 (and $x143 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x222 ?x223) 4) (= (+ ?x260 (* (- 1) (* n k)) k ?x262) 0) $x594 (or $x253 (not (= ?x273 13)) $x294 (not (= ?x592 2)) $x361))))))))))))))))))))))))))) :qid k!38))
 ))
 (let ((?x645 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x52 (* k n)))
 (let ((?x263 (* (- 1) ?x52)))
 (let ((?x262 (* (- 2) n)))
 (let ((?x260 (* 3 c)))
 (let (($x545 (= (+ ?x260 (* 3 k) ?x262 ?x263 (* (- 1) (* m n))) 2)))
 (let (($x553 (not $x545)))
 (let ((?x160 (* 9 (* c n))))
 (let ((?x46 (* k k)))
 (let ((?x223 (* (- 1) ?x46)))
 (let ((?x222 (* (- 9) n)))
 (let ((?x435 (* 5 m)))
 (let ((?x523 (+ (* 27 c) (* 32 k) ?x435 ?x222 ?x223 (* 9 ?x52) ?x160 (* (- 2) (* k m)) (* (- 1) (* m m)))))
 (let (($x527 (not (= ?x523 13))))
 (let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x361 (not $x143)))
 (let ((?x372 (* m n)))
 (let ((?x56 (* 2 n)))
 (let ((?x231 (* (- 3) c)))
 (let ((?x537 (+ 2 ?x231 (* (- 3) k) ?x56 ?x52 ?x372)))
 (let ((?x644 (* 6 (* k k m m))))
 (let ((?x638 (* 6 (* c c m m))))
 (let ((?x486 (* m m)))
 (let ((?x579 (* 7 ?x486)))
 (let ((?x485 (* k m)))
 (let ((?x578 (* 7 ?x485)))
 (let ((?x454 (+ (* 42 k) (* 42 m) (* 216 ?x46) (* 216 (* c c)) (* 432 (* c k)) (* 72 (* c c m)) ?x578 ?x579 (* 144 (* c k m)) (* 72 (* k k m)) ?x638 (* 12 (* c k m m)) ?x644)))
 (let (($x161 (or (not (= (* ?x454 ?x537) 0)) $x361 (not (= (+ k m ?x222 (* (- 3) (* n n))) 6)) $x527 $x553)))
 (let (($x301 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 0)))
 (let (($x265 (= (+ ?x260 k ?x262 ?x263) 0)))
 (let (($x220 (= (+ (* 18 c) (* 5 k) ?x222 ?x223 ?x160) 4)))
 (let (($x529 (and $x143 $x220 $x265 $x301 $x161)))
 (let ((?x592 (+ ?x260 (* 4 k) (* (- 1) (* (+ 1 n) (+ k m))) m ?x262)))
 (let ((?x401 (* (- 1) m)))
 (let ((?x74 (+ k m)))
 (let ((?x437 (+ 1 n)))
 (let ((?x525 (* ?x437 ?x74)))
 (let ((?x432 (* (- 4) k)))
 (let ((?x286 (* 6 (* (+ 6 m) (+ 6 m) (+ c k) (+ c k)))))
 (let ((?x287 (* (+ (* 7 (* (+ 6 m) ?x74)) ?x286) (+ 2 ?x231 ?x432 ?x525 ?x401 ?x56))))
 (let (($x294 (not (= ?x287 0))))
 (let ((?x37 (* 18 c)))
 (let ((?x273 (+ ?x37 (* 23 k) (* 9 (* ?x437 (+ c k))) ?x435 ?x222 (* (- 1) (* ?x74 ?x74)))))
 (let (($x248 (= (+ (* 3 (* ?x437 ?x437)) (* (- 1) k) ?x401 (* 3 n)) (- 3))))
 (let (($x253 (not $x248)))
 (let (($x594 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) 0)))
 (let (($x173 (= (+ ?x37 (* 9 (* n c)) (* 5 k) ?x222 ?x223) 4)))
 (let (($x512 (and $x143 $x173 (= (+ ?x260 (* (- 1) (* n k)) k ?x262) 0) $x594 (or $x253 (not (= ?x273 13)) $x294 (not (= ?x592 2)) $x361))))
 (rewrite (= $x512 $x529))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x507 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x361 (not $x143)))
 (let ((?x74 (+ k m)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x459 (* (- 18) c)))
 (let ((?x182 (+ ?x459 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) (* (- 5) m) ?x45 ?x80)))
 (let ((?x56 (* 2 n)))
 (let ((?x401 (* (- 1) m)))
 (let ((?x437 (+ 1 n)))
 (let ((?x525 (* ?x437 ?x74)))
 (let ((?x432 (* (- 4) k)))
 (let ((?x231 (* (- 3) c)))
 (let ((?x286 (* 6 (* (+ 6 m) (+ 6 m) (+ c k) (+ c k)))))
 (let ((?x287 (* (+ (* 7 (* (+ 6 m) ?x74)) ?x286) (+ 2 ?x231 ?x432 ?x525 ?x401 ?x56))))
 (let (($x294 (not (= ?x287 0))))
 (let (($x248 (= (+ (* 3 (* ?x437 ?x437)) (* (- 1) k) ?x401 (* 3 n)) (- 3))))
 (let (($x253 (not $x248)))
 (let (($x281 (or (not (= (+ ?x231 ?x432 ?x525 ?x401 ?x56) (- 2))) $x253 $x294 (not (= ?x182 (- 13))) $x361)))
 (let (($x594 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) 0)))
 (let (($x366 (= (+ ?x459 (* (- 9) (* n c)) (* (- 5) k) ?x45 (* k k)) (- 4))))
 (and $x143 $x366 (= (+ ?x231 (* n k) (* (- 1) k) ?x56) 0) $x594 $x281)))))))))))))))))))))) :qid k!38))
 ))
 (let ((?x279 (lambda ((c Int) (k Int) (m Int) (n Int) )(let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x361 (not $x143)))
 (let ((?x262 (* (- 2) n)))
 (let ((?x260 (* 3 c)))
 (let ((?x592 (+ ?x260 (* 4 k) (* (- 1) (* (+ 1 n) (+ k m))) m ?x262)))
 (let ((?x56 (* 2 n)))
 (let ((?x401 (* (- 1) m)))
 (let ((?x74 (+ k m)))
 (let ((?x437 (+ 1 n)))
 (let ((?x525 (* ?x437 ?x74)))
 (let ((?x432 (* (- 4) k)))
 (let ((?x231 (* (- 3) c)))
 (let ((?x286 (* 6 (* (+ 6 m) (+ 6 m) (+ c k) (+ c k)))))
 (let ((?x287 (* (+ (* 7 (* (+ 6 m) ?x74)) ?x286) (+ 2 ?x231 ?x432 ?x525 ?x401 ?x56))))
 (let (($x294 (not (= ?x287 0))))
 (let ((?x222 (* (- 9) n)))
 (let ((?x435 (* 5 m)))
 (let ((?x37 (* 18 c)))
 (let ((?x273 (+ ?x37 (* 23 k) (* 9 (* ?x437 (+ c k))) ?x435 ?x222 (* (- 1) (* ?x74 ?x74)))))
 (let (($x248 (= (+ (* 3 (* ?x437 ?x437)) (* (- 1) k) ?x401 (* 3 n)) (- 3))))
 (let (($x253 (not $x248)))
 (let (($x594 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) 0)))
 (let ((?x46 (* k k)))
 (let ((?x223 (* (- 1) ?x46)))
 (let ((?x41 (* 5 k)))
 (let (($x512 (and $x143 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x222 ?x223) 4) (= (+ ?x260 (* (- 1) (* n k)) k ?x262) 0) $x594 (or $x253 (not (= ?x273 13)) $x294 (not (= ?x592 2)) $x361))))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x459 (* (- 18) c)))
 (let ((?x182 (+ ?x459 (* (- 23) k) (* (- 9) (* ?x437 (+ c k))) (* (- 5) m) ?x45 ?x80)))
 (let (($x281 (or (not (= (+ ?x231 ?x432 ?x525 ?x401 ?x56) (- 2))) $x253 $x294 (not (= ?x182 (- 13))) $x361)))
 (let (($x366 (= (+ ?x459 (* (- 9) (* n c)) (* (- 5) k) ?x45 ?x46) (- 4))))
 (let (($x681 (and $x143 $x366 (= (+ ?x231 (* n k) (* (- 1) k) ?x56) 0) $x594 $x281)))
 (rewrite (= $x681 $x512))))))))))))))))))))))))))))))))))))
 ))
 (let (($x108 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x99 (+ m 6)))
 (let ((?x71 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x89 (+ (- (+ (* (- 3) ?x71) (* ?x74 (+ n 1))) ?x74) (* 2 (+ n 1)))))
 (let (($x104 (= (* ?x89 (+ (* 7 ?x74 ?x99) (* 6 ?x71 ?x71 ?x99 ?x99))) 0)))
 (let ((?x95 (+ (- (* 3 (+ n 1) (+ n 1)) ?x74) (* 3 (+ n 1)))))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x78 (- (- (- 4 (* 18 ?x71)) (* 9 ?x71 (+ n 1))) (* 5 ?x74))))
 (let (($x70 (not (= (- (+ (- 6) m 6) (* 6 (+ n 1))) 0))))
 (let (($x106 (or $x70 (not (= (+ ?x78 (* 9 (+ n 1)) ?x80) 0)) (not (= ?x89 0)) (not (= ?x95 0)) (not $x104))))
 (let (($x58 (= (+ (- (+ (* (- 3) c) (* k n)) k) (* 2 n)) 0)))
 (let ((?x46 (* k k)))
 (let ((?x45 (* 9 n)))
 (let ((?x41 (* 5 k)))
 (let ((?x47 (+ (- (- (- 4 (* 18 c)) (* 9 c n)) ?x41) ?x45 ?x46)))
 (and (= (- (+ (- 6) m) (* 6 n)) 0) (= ?x47 0) $x58 (= (+ (- (* 3 n n) k) (* 3 n)) 0) $x106)))))))))))))))) :qid k!38))
 ))
 (let ((?x509 (lambda ((c Int) (k Int) (m Int) (n Int) )(let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x361 (not $x143)))
 (let ((?x74 (+ k m)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x459 (* (- 18) c)))
 (let ((?x182 (+ ?x459 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) (* (- 5) m) ?x45 ?x80)))
 (let ((?x56 (* 2 n)))
 (let ((?x401 (* (- 1) m)))
 (let ((?x437 (+ 1 n)))
 (let ((?x525 (* ?x437 ?x74)))
 (let ((?x432 (* (- 4) k)))
 (let ((?x231 (* (- 3) c)))
 (let ((?x286 (* 6 (* (+ 6 m) (+ 6 m) (+ c k) (+ c k)))))
 (let ((?x287 (* (+ (* 7 (* (+ 6 m) ?x74)) ?x286) (+ 2 ?x231 ?x432 ?x525 ?x401 ?x56))))
 (let (($x294 (not (= ?x287 0))))
 (let (($x248 (= (+ (* 3 (* ?x437 ?x437)) (* (- 1) k) ?x401 (* 3 n)) (- 3))))
 (let (($x253 (not $x248)))
 (let (($x281 (or (not (= (+ ?x231 ?x432 ?x525 ?x401 ?x56) (- 2))) $x253 $x294 (not (= ?x182 (- 13))) $x361)))
 (let (($x594 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) 0)))
 (let (($x366 (= (+ ?x459 (* (- 9) (* n c)) (* (- 5) k) ?x45 (* k k)) (- 4))))
 (let (($x681 (and $x143 $x366 (= (+ ?x231 (* n k) (* (- 1) k) ?x56) 0) $x594 $x281)))
 (let ((?x99 (+ m 6)))
 (let ((?x71 (+ c k)))
 (let ((?x89 (+ (- (+ (* (- 3) ?x71) (* ?x74 (+ n 1))) ?x74) (* 2 (+ n 1)))))
 (let (($x104 (= (* ?x89 (+ (* 7 ?x74 ?x99) (* 6 ?x71 ?x71 ?x99 ?x99))) 0)))
 (let ((?x95 (+ (- (* 3 (+ n 1) (+ n 1)) ?x74) (* 3 (+ n 1)))))
 (let ((?x78 (- (- (- 4 (* 18 ?x71)) (* 9 ?x71 (+ n 1))) (* 5 ?x74))))
 (let (($x70 (not (= (- (+ (- 6) m 6) (* 6 (+ n 1))) 0))))
 (let (($x106 (or $x70 (not (= (+ ?x78 (* 9 (+ n 1)) ?x80) 0)) (not (= ?x89 0)) (not (= ?x95 0)) (not $x104))))
 (let ((?x46 (* k k)))
 (let ((?x41 (* 5 k)))
 (let ((?x47 (+ (- (- (- 4 (* 18 c)) (* 9 c n)) ?x41) ?x45 ?x46)))
 (let (($x107 (and (= (- (+ (- 6) m) (* 6 n)) 0) (= ?x47 0) (= (+ (- (+ (* (- 3) c) (* k n)) k) ?x56) 0) (= (+ (- (* 3 n n) k) (* 3 n)) 0) $x106)))
 (rewrite (= $x107 $x681)))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x109 (asserted $x108)))
 (let ((@x474 (mp (mp @x109 (quant-intro (proof-bind ?x509) (= $x108 $x507)) $x507) (rewrite (= $x507 $x507)) $x507)))
 (let ((@x135 (mp (mp @x474 (quant-intro (proof-bind ?x279) (= $x507 $x175)) $x175) (quant-intro (proof-bind ?x645) (= $x175 $x133)) $x133)))
 (let ((@x478 (mp (mp~ @x135 (sk (~ $x133 $x384)) $x384) (rewrite (= $x384 $x190)) $x190)))
 (let ((@x371 (and-elim @x478 $x479)))
 (let ((@x468 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x479) $x310)) @x371 $x310)))
 (let (($x296 (>= ?x514 0)))
 (let ((@x534 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x479) $x296)) @x371 $x296)))
 (let (($x408 (<= ?x550 0)))
 (let ((@x417 (and-elim @x478 $x531)))
 (let ((@x387 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x531) $x408)) @x417 $x408)))
 (let (($x544 (>= ?x550 0)))
 (let ((@x325 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x531) $x544)) @x417 $x544)))
 (let (($x607 (<= ?x513 4)))
 (let ((@x597 (and-elim @x478 $x557)))
 (let ((@x267 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x557) $x607)) @x597 $x607)))
 (let (($x463 (>= ?x513 4)))
 (let ((@x488 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x557) $x463)) @x597 $x463)))
 (let (($x398 (<= ?x445 (- 6))))
 (let ((@x583 (and-elim @x478 $x609)))
 (let ((@x340 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x254 $x398)) @x583 $x398)))
 (let (($x599 (>= ?x445 (- 6))))
 (let ((@x443 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x254 $x599)) @x583 $x599)))
 (let (($x386 (>= ?x345 0)))
 (let ((@x429 (lemma ((_ th-lemma arith farkas 1) (hypothesis (not $x386)) false) $x386)))
 (let (($x156 (<= n!0 0)))
 (let (($x747 (<= n!0 4)))
 (let (($x737 (>= ?x202 4)))
 (let ((@x347 (hypothesis (not $x156))))
 (let (($x492 (<= m!1 24)))
 (let (($x707 (not $x492)))
 (let (($x209 (<= m!1 18)))
 (let (($x690 (not $x209)))
 (let (($x584 (<= m!1 12)))
 (let (($x192 (not $x584)))
 (let ((@x426 (hypothesis $x584)))
 (let (($x305 (>= ?x202 1)))
 (let ((@x235 ((_ th-lemma arith) (hypothesis (not $x305)) @x347 @x340 @x347 @x534 @x468 @x443 @x340 @x534 @x468 @x325 @x387 @x325 @x387 @x488 @x267 @x534 @x468 false)))
 (let ((@x193 ((_ th-lemma arith farkas -3 -3 -3 -1 -1/2 -1/2 1 1 1 1 1 1 1) @x347 @x426 @x340 @x468 @x426 @x340 @x347 @x534 @x387 (unit-resolution (lemma @x235 (or $x305 $x156)) @x347 $x305) @x347 @x426 @x340 false)))
 (let ((@x170 (hypothesis $x209)))
 (let ((@x684 (hypothesis $x192)))
 (let ((@x685 ((_ th-lemma arith gomory-cut 1/2 1/2 5/12 -5/12 5/12 5/12 1/2 1/2 1/2 1/2) @x534 @x325 @x443 @x340 @x684 @x443 @x684 @x443 @x170 @x340 (>= (+ c!3 (* (- 1) ?x472)) 4))))
 (let ((@x692 (lemma ((_ th-lemma arith farkas -1/3 -1/3 -5/18 -5/18 -1/3 -1/3 -1/3 -1/3 1) @x468 @x387 @x340 @x170 @x684 @x443 @x170 @x340 @x685 false) (or $x690 $x584))))
 (let ((@x759 (unit-resolution @x692 (unit-resolution (lemma @x193 (or $x192 $x156)) @x347 $x192) $x690)))
 (let ((@x697 (hypothesis $x492)))
 (let ((@x322 (hypothesis $x690)))
 (let ((@x706 ((_ th-lemma arith) @x322 @x443 @x697 @x340 @x322 @x443 @x697 @x340 @x325 @x387 @x443 @x340 @x340 @x322 @x443 @x697 @x488 @x267 @x322 @x443 @x534 @x322 @x443 @x697 @x340 @x468 @x534 @x468 @x322 @x443 @x697 @x340 @x322 @x443 @x697 @x340 @x322 @x443 @x697 @x340 false)))
 (let ((@x765 (unit-resolution (lemma @x706 (or $x707 $x209)) @x759 $x707)))
 (let ((@x704 ((_ th-lemma arith) @x765 (hypothesis (not $x737)) @x347 @x534 @x468 @x534 @x468 @x325 @x387 @x443 @x340 @x534 @x468 @x488 @x267 @x534 @x468 false)))
 (let (($x813 (<= c!3 1)))
 (let (($x776 (<= c!3 2)))
 (let ((@x840 ((_ th-lemma arith) (hypothesis (not $x776)) @x488 @x267 @x488 @x267 @x534 @x468 @x488 @x267 @x325 @x387 @x488 @x267 false)))
 (let ((@x878 (hypothesis $x776)))
 (let (($x843 (not $x813)))
 (let ((@x879 (hypothesis $x843)))
 (let ((@x889 ((_ th-lemma arith) @x879 @x878 @x879 @x878 @x879 @x878 @x443 @x340 @x879 @x878 @x488 @x267 @x879 @x878 @x879 @x878 @x879 @x878 @x879 @x878 @x879 @x878 @x879 @x878 @x879 @x878 @x879 @x878 @x879 @x878 @x534 @x468 @x879 @x878 @x879 @x878 @x879 @x878 @x879 @x878 @x879 @x878 @x879 @x878 @x879 @x878 @x879 @x878 @x325 @x387 @x879 @x878 false)))
 (let ((@x877 (unit-resolution (lemma @x889 (or (not $x776) $x813)) (lemma @x840 $x776) $x813)))
 (let ((@x746 (hypothesis $x813)))
 (let (($x788 (not $x747)))
 (let ((@x835 (hypothesis $x788)))
 (let ((@x836 (hypothesis $x737)))
 (let ((@x837 ((_ th-lemma arith) @x836 @x835 @x746 @x836 @x835 @x746 @x443 @x340 @x836 @x835 @x746 @x836 @x835 @x746 @x836 @x835 @x746 @x534 @x468 @x836 @x835 @x746 @x836 @x835 @x746 @x836 @x835 @x746 @x836 @x835 @x746 @x836 @x835 @x746 @x836 @x835 @x746 @x836 @x835 @x746 @x836 @x835 @x746 @x836 @x835 @x746 @x836 @x835 @x746 @x836 @x835 @x746 @x836 @x835 @x746 @x836 @x835 @x746 @x488 @x267 @x325 @x387 @x836 @x835 @x746 false)))
 (let ((@x880 (unit-resolution (lemma @x837 (or $x843 (not $x737) $x747)) @x877 (or (not $x737) $x747))))
 (let ((@x882 (unit-resolution @x880 (unit-resolution (lemma @x704 (or $x737 $x156)) @x347 $x737) $x747)))
 (let (($x734 (<= k!2 60)))
 (let (($x752 (not $x734)))
 (let ((@x750 (hypothesis $x707)))
 (let ((@x749 (hypothesis $x734)))
 (let ((@x751 ((_ th-lemma arith gcd-test -1/9 -1/9 -1/9 -1/9 -1/9 -1/9 -1/9 -1/9 -1/9 -1/9 -1/9 -1/9 -1/9 -1/9 -1/9 -1/9 -1/9 -1/9 -1/9 -1/9 2/3 2/3 2/3 2/3 2/3 2/3 2/3 2/3 2/3 2/3) @x534 @x468 @x534 @x750 @x443 @x749 @x534 @x750 @x443 @x749 @x534 @x750 @x443 @x749 @x534 @x750 @x443 @x749 @x488 @x267 @x534 @x750 @x443 @x749 @x534 @x750 @x443 @x749 @x325 @x387 false)))
 (let ((@x787 (hypothesis $x747)))
 (let ((@x758 ((_ th-lemma arith farkas -3 -3 -3 -3 -3 -3 -1 -3 1) @x750 @x443 @x787 @x750 @x443 @x787 @x468 @x787 (unit-resolution (lemma @x751 (or $x752 $x492)) @x750 $x752) false)))
 (let ((@x865 (lemma (unit-resolution (lemma @x758 (or $x788 $x492)) @x765 @x882 false) $x156)))
 (let (($x234 (>= n!0 0)))
 (let ((@x866 (hypothesis $x234)))
 (let ((@x945 (lemma ((_ th-lemma arith farkas 6 6 6 1 9 9 3 3 1 1) @x866 @x865 @x387 @x488 @x866 @x865 @x866 @x865 @x534 @x429 false) (not $x234))))
 (let (($x870 (>= m!1 0)))
 (let ((@x982 (hypothesis $x870)))
 (let ((@x995 ((_ th-lemma arith farkas 1 2 2 2 2/3 -1/3 -1/3 3 3 3 1/6 -1/6 1 1 1 1 1 1) @x387 @x945 @x982 @x443 @x468 @x429 @x488 @x982 @x443 @x945 @x340 @x443 @x945 @x945 @x534 @x982 @x443 @x945 false)))
 (let ((@x873 (lemma @x995 (not $x870))))
 ((_ th-lemma arith) @x873 @x873 @x534 @x468 @x443 @x340 @x534 @x468 @x488 @x267 @x325 @x387 @x534 @x468 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 67
 :arith-assert-diseq        18
 :arith-assert-lower        291
 :arith-assert-upper        183
 :arith-bound-prop          1
 :arith-branch-var          16
 :arith-conflicts           29
 :arith-eq-adapter          13
 :arith-fixed-eqs           79
 :arith-gcd-tests           127
 :arith-gomory-cuts         11
 :arith-grobner             21
 :arith-ineq-splits         16
 :arith-max-min             2013
 :arith-nonlinear-bounds    73
 :arith-nonlinear-horner    132
 :arith-num-rows            14
 :arith-offset-eqs          4
 :arith-patches             43
 :arith-patches_succ        11
 :arith-pivots              413
 :arith-pseudo-nonlinear    74
 :arith-row-summations      2220
 :arith-tableau-max-columns 61
 :arith-tableau-max-rows    14
 :conflicts                 32
 :decisions                 127
 :del-clause                42
 :final-checks              87
 :max-memory                3.81
 :memory                    3.22
 :minimized-lits            6
 :mk-bool-var               130
 :mk-clause                 93
 :num-allocs                1822167
 :num-checks                1
 :propagations              109
 :rlimit-count              105898
 :time                      0.03
 :total-time                0.03)
