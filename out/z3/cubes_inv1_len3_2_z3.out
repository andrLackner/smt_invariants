unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let (($x1017 (<= n!0 1)))
 (let ((?x757 (* (- 1) k!2)))
 (let ((?x777 (* n!0 n!0)))
 (let ((?x788 (* 3 ?x777)))
 (let ((?x890 (+ ?x788 ?x757 (* (- 1) m!1) (* 9 n!0))))
 (let (($x391 (<= ?x890 (- 6))))
 (let ((?x786 (* (- 6) n!0)))
 (let ((?x891 (+ m!1 ?x786)))
 (let (($x892 (>= ?x891 6)))
 (let (($x345 (= ?x891 6)))
 (let ((?x334 (* (- 9) n!0)))
 (let ((?x523 (* 5 m!1)))
 (let ((?x486 (* 27 c!3)))
 (let ((?x446 (* 32 k!2)))
 (let ((?x555 (* k!2 n!0)))
 (let ((?x708 (* 9 ?x555)))
 (let ((?x526 (* k!2 k!2)))
 (let ((?x859 (* (- 1) ?x526)))
 (let ((?x583 (* (- 1) (* m!1 m!1))))
 (let ((?x387 (* k!2 m!1)))
 (let ((?x516 (* (- 2) ?x387)))
 (let ((?x561 (* 9 (* c!3 n!0))))
 (let ((?x889 (* (- 3) (* c!3 m!1 n!0 n!0))))
 (let ((?x462 (* (- 12) n!0)))
 (let ((?x879 (* (- 6) (* c!3 m!1 n!0))))
 (let ((?x385 (* (- 6) ?x777)))
 (let ((?x441 (* (- 3) ?x526)))
 (let ((?x836 (* (- 3) (* c!3 m!1))))
 (let ((?x806 (* (- 3) (* k!2 k!2 n!0 n!0))))
 (let ((?x748 (+ k!2 c!3)))
 (let ((?x113 (+ k!2 m!1)))
 (let ((?x382 (+ 1 n!0)))
 (let ((?x779 (* (- 3) ?x387)))
 (let ((?x316 (* (- 3) (* k!2 m!1 n!0 n!0))))
 (let ((?x908 (* (- 6) (* k!2 m!1 n!0))))
 (let ((?x825 (* (- 6) (* k!2 k!2 n!0))))
 (let ((?x469 (+ (- 6) ?x825 ?x908 ?x316 (* (- 6) (* k!2 c!3 n!0)) (* (- 3) (* k!2 c!3)) ?x779 (* (- 1) (* ?x382 ?x382 ?x113 ?x113 ?x748 ?x748)) ?x806 ?x836 ?x441 ?x385 ?x879 (* (- 3) (* k!2 c!3 n!0 n!0)) ?x462 ?x889)))
 (let ((?x900 (+ (- 6) m!1 ?x786)))
 (let ((?x868 (* m!1 n!0)))
 (let ((?x756 (* 2 n!0)))
 (let ((?x802 (* (- 3) c!3)))
 (let (($x373 (not $x345)))
 (let (($x865 (or $x373 (not (= (+ ?x555 (* (- 3) k!2) ?x802 ?x756 ?x868) (- 2))) (not (= (* ?x900 ?x469) 0)) (not (= ?x890 (- 6))) (not (= (+ ?x561 ?x516 ?x583 ?x859 ?x708 ?x446 ?x486 ?x523 ?x334) 13)))))
 (let ((?x856 (+ ?x788 ?x757 (* 3 n!0))))
 (let (($x785 (= ?x856 0)))
 (let ((?x755 (+ ?x555 ?x757 ?x802 ?x756)))
 (let (($x747 (= ?x755 0)))
 (let ((?x442 (* 18 c!3)))
 (let ((?x898 (* 5 k!2)))
 (let ((?x234 (+ ?x561 ?x859 ?x898 ?x442 ?x334)))
 (let (($x539 (= ?x234 4)))
 (let (($x876 (and $x345 $x539 $x747 $x785 $x865)))
 (let ((?x824 (* (- 1) ?x555)))
 (let ((?x843 (* (- 2) n!0)))
 (let ((?x167 (* 3 c!3)))
 (let ((?x507 (+ (- 6) ?x462 ?x441 (* (- 1) (* ?x382 ?x382 ?x113 ?x113 (+ c!3 k!2) (+ c!3 k!2))) ?x385 ?x779 (* (- 3) (* c!3 k!2 n!0 n!0)) ?x806 ?x889 ?x316 (* (- 3) (* c!3 k!2)) ?x836 (* (- 6) (* c!3 k!2 n!0)) ?x825 ?x879 ?x908)))
 (let (($x828 (or (not (= (* ?x900 ?x507) 0)) $x373 (not (= (+ ?x486 ?x446 ?x523 ?x334 ?x859 ?x708 ?x561 ?x516 ?x583) 13)) (not (= (+ ?x167 (* 3 k!2) ?x843 ?x824 (* (- 1) ?x868)) 2)) (not (= (+ k!2 m!1 ?x334 (* (- 3) ?x777)) 6)))))
 (let (($x867 (and $x345 (= (+ ?x442 ?x898 ?x334 ?x859 ?x561) 4) (= (+ ?x167 k!2 ?x843 ?x824) 0) (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x777)) 0) $x828)))
 (let (($x822 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let (($x739 (not (= (+ k m (* (- 9) n) (* (- 3) (* n n))) 6))))
 (let ((?x52 (* k n)))
 (let ((?x264 (* (- 1) ?x52)))
 (let ((?x263 (* (- 2) n)))
 (let ((?x261 (* 3 c)))
 (let (($x571 (= (+ ?x261 (* 3 k) ?x263 ?x264 (* (- 1) (* m n))) 2)))
 (let (($x579 (not $x571)))
 (let ((?x161 (* 9 (* c n))))
 (let ((?x46 (* k k)))
 (let ((?x224 (* (- 1) ?x46)))
 (let ((?x223 (* (- 9) n)))
 (let ((?x461 (* 5 m)))
 (let ((?x549 (+ (* 27 c) (* 32 k) ?x461 ?x223 ?x224 (* 9 ?x52) ?x161 (* (- 2) (* k m)) (* (- 1) (* m m)))))
 (let (($x553 (not (= ?x549 13))))
 (let (($x144 (= (+ m (* (- 6) n)) 6)))
 (let (($x362 (not $x144)))
 (let ((?x896 (* (- 6) (* k m n))))
 (let ((?x895 (* (- 6) (* c m n))))
 (let ((?x894 (* (- 6) (* k k n))))
 (let ((?x893 (* (- 6) (* c k n))))
 (let ((?x848 (* (- 3) (* c m))))
 (let ((?x841 (* (- 3) (* c k))))
 (let ((?x887 (* (- 3) (* k m n n))))
 (let ((?x884 (* (- 3) (* c m n n))))
 (let ((?x881 (* (- 3) (* k k n n))))
 (let ((?x878 (* (- 3) (* c k n n))))
 (let ((?x511 (* k m)))
 (let ((?x851 (* (- 3) ?x511)))
 (let ((?x271 (* n n)))
 (let ((?x745 (* (- 6) ?x271)))
 (let ((?x71 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x846 (+ 1 n)))
 (let ((?x176 (* (- 1) (* ?x846 ?x846 ?x74 ?x74 ?x71 ?x71))))
 (let ((?x844 (* (- 3) ?x46)))
 (let ((?x754 (* (- 12) n)))
 (let ((?x845 (+ (- 6) ?x754 ?x844 ?x176 ?x745 ?x851 ?x878 ?x881 ?x884 ?x887 ?x841 ?x848 ?x893 ?x894 ?x895 ?x896)))
 (let ((?x127 (* (- 6) n)))
 (let ((?x133 (+ (- 6) m ?x127)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) ?x271)) 0)))
 (let (($x266 (= (+ ?x261 k ?x263 ?x264) 0)))
 (let (($x221 (= (+ (* 18 c) (* 5 k) ?x223 ?x224 ?x161) 4)))
 (and $x144 $x221 $x266 $x302 (or (not (= (* ?x133 ?x845) 0)) $x362 $x553 $x579 $x739)))))))))))))))))))))))))))))))))))))))))))) :qid k!38))
 ))
 (let (($x427 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x61 (* 3 n)))
 (let ((?x454 (* (- 1) m)))
 (let ((?x775 (* (- 1) k)))
 (let (($x350 (= (+ (* 3 (* (+ 1 n) (+ 1 n))) ?x775 ?x454 ?x61) (- 3))))
 (let (($x815 (not $x350)))
 (let ((?x223 (* (- 9) n)))
 (let ((?x461 (* 5 m)))
 (let ((?x37 (* 18 c)))
 (let ((?x443 (+ ?x37 (* 23 k) (* 9 (* (+ 1 n) (+ c k))) ?x461 ?x223 (* (- 1) (* (+ k m) (+ k m))))))
 (let ((?x263 (* (- 2) n)))
 (let ((?x261 (* 3 c)))
 (let ((?x722 (+ ?x261 (* 4 k) (* (- 1) (* (+ 1 n) (+ k m))) m ?x263)))
 (let (($x144 (= (+ m (* (- 6) n)) 6)))
 (let (($x362 (not $x144)))
 (let ((?x550 (* (- 3) (* (+ 1 n) (+ 1 n) (+ k m) (+ c k)))))
 (let ((?x71 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x846 (+ 1 n)))
 (let ((?x176 (* (- 1) (* ?x846 ?x846 ?x74 ?x74 ?x71 ?x71))))
 (let ((?x127 (* (- 6) n)))
 (let ((?x133 (+ (- 6) m ?x127)))
 (let (($x184 (not (= (* ?x133 (+ ?x176 (* (- 6) (* ?x846 ?x846)) ?x550)) 0))))
 (let (($x855 (= (+ (* 3 (* n n)) ?x775 ?x61) 0)))
 (let ((?x46 (* k k)))
 (let ((?x224 (* (- 1) ?x46)))
 (let ((?x41 (* 5 k)))
 (and $x144 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x223 ?x224) 4) (= (+ ?x261 (* (- 1) (* n k)) k ?x263) 0) $x855 (or $x184 $x362 (not (= ?x722 2)) (not (= ?x443 13)) $x815)))))))))))))))))))))))))))) :qid k!38))
 ))
 (let ((?x778 (lambda ((c Int) (k Int) (m Int) (n Int) )(let (($x739 (not (= (+ k m (* (- 9) n) (* (- 3) (* n n))) 6))))
 (let ((?x52 (* k n)))
 (let ((?x264 (* (- 1) ?x52)))
 (let ((?x263 (* (- 2) n)))
 (let ((?x261 (* 3 c)))
 (let (($x571 (= (+ ?x261 (* 3 k) ?x263 ?x264 (* (- 1) (* m n))) 2)))
 (let (($x579 (not $x571)))
 (let ((?x161 (* 9 (* c n))))
 (let ((?x46 (* k k)))
 (let ((?x224 (* (- 1) ?x46)))
 (let ((?x223 (* (- 9) n)))
 (let ((?x461 (* 5 m)))
 (let ((?x549 (+ (* 27 c) (* 32 k) ?x461 ?x223 ?x224 (* 9 ?x52) ?x161 (* (- 2) (* k m)) (* (- 1) (* m m)))))
 (let (($x553 (not (= ?x549 13))))
 (let (($x144 (= (+ m (* (- 6) n)) 6)))
 (let (($x362 (not $x144)))
 (let ((?x896 (* (- 6) (* k m n))))
 (let ((?x895 (* (- 6) (* c m n))))
 (let ((?x894 (* (- 6) (* k k n))))
 (let ((?x893 (* (- 6) (* c k n))))
 (let ((?x848 (* (- 3) (* c m))))
 (let ((?x841 (* (- 3) (* c k))))
 (let ((?x887 (* (- 3) (* k m n n))))
 (let ((?x884 (* (- 3) (* c m n n))))
 (let ((?x881 (* (- 3) (* k k n n))))
 (let ((?x878 (* (- 3) (* c k n n))))
 (let ((?x511 (* k m)))
 (let ((?x851 (* (- 3) ?x511)))
 (let ((?x271 (* n n)))
 (let ((?x745 (* (- 6) ?x271)))
 (let ((?x71 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x846 (+ 1 n)))
 (let ((?x176 (* (- 1) (* ?x846 ?x846 ?x74 ?x74 ?x71 ?x71))))
 (let ((?x844 (* (- 3) ?x46)))
 (let ((?x754 (* (- 12) n)))
 (let ((?x845 (+ (- 6) ?x754 ?x844 ?x176 ?x745 ?x851 ?x878 ?x881 ?x884 ?x887 ?x841 ?x848 ?x893 ?x894 ?x895 ?x896)))
 (let ((?x127 (* (- 6) n)))
 (let ((?x133 (+ (- 6) m ?x127)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) ?x271)) 0)))
 (let (($x266 (= (+ ?x261 k ?x263 ?x264) 0)))
 (let (($x221 (= (+ (* 18 c) (* 5 k) ?x223 ?x224 ?x161) 4)))
 (let (($x417 (and $x144 $x221 $x266 $x302 (or (not (= (* ?x133 ?x845) 0)) $x362 $x553 $x579 $x739))))
 (let ((?x61 (* 3 n)))
 (let ((?x454 (* (- 1) m)))
 (let ((?x775 (* (- 1) k)))
 (let (($x815 (not (= (+ (* 3 (* ?x846 ?x846)) ?x775 ?x454 ?x61) (- 3)))))
 (let ((?x37 (* 18 c)))
 (let ((?x443 (+ ?x37 (* 23 k) (* 9 (* ?x846 ?x71)) ?x461 ?x223 (* (- 1) (* ?x74 ?x74)))))
 (let (($x522 (= (+ ?x261 (* 4 k) (* (- 1) (* ?x846 ?x74)) m ?x263) 2)))
 (let ((?x183 (* ?x133 (+ ?x176 (* (- 6) (* ?x846 ?x846)) (* (- 3) (* ?x846 ?x846 ?x74 ?x71))))))
 (let (($x184 (not (= ?x183 0))))
 (let (($x855 (= (+ (* 3 ?x271) ?x775 ?x61) 0)))
 (let (($x447 (= (+ ?x37 (* 9 (* n c)) (* 5 k) ?x223 ?x224) 4)))
 (let (($x519 (and $x144 $x447 (= (+ ?x261 (* (- 1) (* n k)) k ?x263) 0) $x855 (or $x184 $x362 (not $x522) (not (= ?x443 13)) $x815))))
 (rewrite (= $x519 $x417))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x833 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x61 (* 3 n)))
 (let ((?x454 (* (- 1) m)))
 (let ((?x775 (* (- 1) k)))
 (let (($x350 (= (+ (* 3 (* (+ 1 n) (+ 1 n))) ?x775 ?x454 ?x61) (- 3))))
 (let (($x815 (not $x350)))
 (let ((?x74 (+ k m)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x130 (* (- 18) c)))
 (let ((?x370 (+ ?x130 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) (* (- 5) m) ?x45 ?x80)))
 (let (($x144 (= (+ m (* (- 6) n)) 6)))
 (let (($x362 (not $x144)))
 (let ((?x56 (* 2 n)))
 (let ((?x846 (+ 1 n)))
 (let ((?x399 (* ?x846 ?x74)))
 (let ((?x515 (* (- 3) c)))
 (let ((?x176 (* (- 1) (* ?x846 ?x846 ?x74 ?x74 (+ c k) (+ c k)))))
 (let ((?x562 (+ ?x176 (* (- 6) (* ?x846 ?x846)) (* (- 3) (* ?x846 ?x846 ?x74 (+ c k))))))
 (let ((?x127 (* (- 6) n)))
 (let ((?x133 (+ (- 6) m ?x127)))
 (let (($x184 (not (= (* ?x133 ?x562) 0))))
 (let (($x807 (or $x184 (not (= (+ ?x515 (* (- 4) k) ?x399 ?x454 ?x56) (- 2))) $x362 (not (= ?x370 (- 13))) $x815)))
 (let (($x855 (= (+ (* 3 (* n n)) ?x775 ?x61) 0)))
 (let (($x505 (= (+ ?x130 (* (- 9) (* n c)) (* (- 5) k) ?x45 (* k k)) (- 4))))
 (and $x144 $x505 (= (+ ?x515 (* n k) ?x775 ?x56) 0) $x855 $x807))))))))))))))))))))))))) :qid k!38))
 ))
 (let ((?x531 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x61 (* 3 n)))
 (let ((?x454 (* (- 1) m)))
 (let ((?x775 (* (- 1) k)))
 (let (($x350 (= (+ (* 3 (* (+ 1 n) (+ 1 n))) ?x775 ?x454 ?x61) (- 3))))
 (let (($x815 (not $x350)))
 (let ((?x223 (* (- 9) n)))
 (let ((?x461 (* 5 m)))
 (let ((?x37 (* 18 c)))
 (let ((?x443 (+ ?x37 (* 23 k) (* 9 (* (+ 1 n) (+ c k))) ?x461 ?x223 (* (- 1) (* (+ k m) (+ k m))))))
 (let ((?x263 (* (- 2) n)))
 (let ((?x261 (* 3 c)))
 (let ((?x722 (+ ?x261 (* 4 k) (* (- 1) (* (+ 1 n) (+ k m))) m ?x263)))
 (let (($x144 (= (+ m (* (- 6) n)) 6)))
 (let (($x362 (not $x144)))
 (let ((?x550 (* (- 3) (* (+ 1 n) (+ 1 n) (+ k m) (+ c k)))))
 (let ((?x71 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x846 (+ 1 n)))
 (let ((?x176 (* (- 1) (* ?x846 ?x846 ?x74 ?x74 ?x71 ?x71))))
 (let ((?x127 (* (- 6) n)))
 (let ((?x133 (+ (- 6) m ?x127)))
 (let (($x184 (not (= (* ?x133 (+ ?x176 (* (- 6) (* ?x846 ?x846)) ?x550)) 0))))
 (let (($x855 (= (+ (* 3 (* n n)) ?x775 ?x61) 0)))
 (let ((?x46 (* k k)))
 (let ((?x224 (* (- 1) ?x46)))
 (let ((?x41 (* 5 k)))
 (let (($x519 (and $x144 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x223 ?x224) 4) (= (+ ?x261 (* (- 1) (* n k)) k ?x263) 0) $x855 (or $x184 $x362 (not (= ?x722 2)) (not (= ?x443 13)) $x815))))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x130 (* (- 18) c)))
 (let ((?x370 (+ ?x130 (* (- 23) k) (* (- 9) (* ?x846 ?x71)) (* (- 5) m) ?x45 ?x80)))
 (let ((?x56 (* 2 n)))
 (let ((?x399 (* ?x846 ?x74)))
 (let ((?x515 (* (- 3) c)))
 (let (($x807 (or $x184 (not (= (+ ?x515 (* (- 4) k) ?x399 ?x454 ?x56) (- 2))) $x362 (not (= ?x370 (- 13))) $x815)))
 (let (($x505 (= (+ ?x130 (* (- 9) (* n c)) (* (- 5) k) ?x45 ?x46) (- 4))))
 (let (($x423 (and $x144 $x505 (= (+ ?x515 (* n k) ?x775 ?x56) 0) $x855 $x807)))
 (rewrite (= $x423 $x519))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x109 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x66 (+ n 1)))
 (let ((?x74 (+ k m)))
 (let ((?x71 (+ c k)))
 (let ((?x102 (- (* (- 1) ?x71 ?x71 ?x74 ?x74 ?x66 ?x66) (* 6 ?x66 ?x66))))
 (let ((?x68 (- (+ (- 6) m 6) (* 6 ?x66))))
 (let (($x90 (= (+ (- (+ (* (- 3) ?x71) (* ?x74 ?x66)) ?x74) (* 2 ?x66)) 0)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x78 (- (- (- 4 (* 18 ?x71)) (* 9 ?x71 ?x66)) (* 5 ?x74))))
 (let (($x107 (or (not (= ?x68 0)) (not (= (+ ?x78 (* 9 ?x66) ?x80) 0)) (not $x90) (not (= (+ (- (* 3 ?x66 ?x66) ?x74) (* 3 ?x66)) 0)) (not (= (* ?x68 (- ?x102 (* 3 ?x71 ?x74 ?x66 ?x66))) 0)))))
 (let (($x58 (= (+ (- (+ (* (- 3) c) (* k n)) k) (* 2 n)) 0)))
 (let ((?x46 (* k k)))
 (let ((?x45 (* 9 n)))
 (let ((?x41 (* 5 k)))
 (let ((?x47 (+ (- (- (- 4 (* 18 c)) (* 9 c n)) ?x41) ?x45 ?x46)))
 (and (= (- (+ (- 6) m) (* 6 n)) 0) (= ?x47 0) $x58 (= (+ (- (* 3 n n) k) (* 3 n)) 0) $x107))))))))))))))) :qid k!38))
 ))
 (let ((?x880 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x61 (* 3 n)))
 (let ((?x454 (* (- 1) m)))
 (let ((?x775 (* (- 1) k)))
 (let (($x350 (= (+ (* 3 (* (+ 1 n) (+ 1 n))) ?x775 ?x454 ?x61) (- 3))))
 (let (($x815 (not $x350)))
 (let ((?x74 (+ k m)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x130 (* (- 18) c)))
 (let ((?x370 (+ ?x130 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) (* (- 5) m) ?x45 ?x80)))
 (let (($x144 (= (+ m (* (- 6) n)) 6)))
 (let (($x362 (not $x144)))
 (let ((?x56 (* 2 n)))
 (let ((?x846 (+ 1 n)))
 (let ((?x399 (* ?x846 ?x74)))
 (let ((?x515 (* (- 3) c)))
 (let ((?x176 (* (- 1) (* ?x846 ?x846 ?x74 ?x74 (+ c k) (+ c k)))))
 (let ((?x562 (+ ?x176 (* (- 6) (* ?x846 ?x846)) (* (- 3) (* ?x846 ?x846 ?x74 (+ c k))))))
 (let ((?x127 (* (- 6) n)))
 (let ((?x133 (+ (- 6) m ?x127)))
 (let (($x184 (not (= (* ?x133 ?x562) 0))))
 (let (($x807 (or $x184 (not (= (+ ?x515 (* (- 4) k) ?x399 ?x454 ?x56) (- 2))) $x362 (not (= ?x370 (- 13))) $x815)))
 (let (($x855 (= (+ (* 3 (* n n)) ?x775 ?x61) 0)))
 (let (($x505 (= (+ ?x130 (* (- 9) (* n c)) (* (- 5) k) ?x45 (* k k)) (- 4))))
 (let (($x423 (and $x144 $x505 (= (+ ?x515 (* n k) ?x775 ?x56) 0) $x855 $x807)))
 (let ((?x66 (+ n 1)))
 (let ((?x71 (+ c k)))
 (let ((?x102 (- (* (- 1) ?x71 ?x71 ?x74 ?x74 ?x66 ?x66) (* 6 ?x66 ?x66))))
 (let ((?x68 (- (+ (- 6) m 6) (* 6 ?x66))))
 (let (($x90 (= (+ (- (+ (* (- 3) ?x71) (* ?x74 ?x66)) ?x74) (* 2 ?x66)) 0)))
 (let ((?x78 (- (- (- 4 (* 18 ?x71)) (* 9 ?x71 ?x66)) (* 5 ?x74))))
 (let (($x107 (or (not (= ?x68 0)) (not (= (+ ?x78 (* 9 ?x66) ?x80) 0)) (not $x90) (not (= (+ (- (* 3 ?x66 ?x66) ?x74) (* 3 ?x66)) 0)) (not (= (* ?x68 (- ?x102 (* 3 ?x71 ?x74 ?x66 ?x66))) 0)))))
 (let ((?x46 (* k k)))
 (let ((?x41 (* 5 k)))
 (let ((?x47 (+ (- (- (- 4 (* 18 c)) (* 9 c n)) ?x41) ?x45 ?x46)))
 (let (($x108 (and (= (- (+ (- 6) m) (* 6 n)) 0) (= ?x47 0) (= (+ (- (+ (* (- 3) c) (* k n)) k) ?x56) 0) (= (+ (- (* 3 n n) k) ?x61) 0) $x107)))
 (rewrite (= $x108 $x423)))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x110 (asserted $x109)))
 (let ((@x341 (mp (mp @x110 (quant-intro (proof-bind ?x880) (= $x109 $x833)) $x833) (rewrite (= $x833 $x833)) $x833)))
 (let ((@x787 (mp (mp @x341 (quant-intro (proof-bind ?x531) (= $x833 $x427)) $x427) (quant-intro (proof-bind ?x778) (= $x427 $x822)) $x822)))
 (let ((@x438 (mp (mp~ @x787 (sk (~ $x822 $x867)) $x867) (rewrite (= $x867 $x876)) $x876)))
 (let ((@x870 (and-elim @x438 $x345)))
 (let ((@x751 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x373 $x892)) @x870 $x892)))
 (let (($x559 (<= ?x856 0)))
 (let ((@x418 (and-elim @x438 $x785)))
 (let ((@x409 (unit-resolution ((_ th-lemma arith assign-bounds 1 -1) (or $x391 (not $x559) (not $x892))) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x785) $x559)) @x418 $x559) @x751 $x391)))
 (let (($x873 (>= ?x890 (- 6))))
 (let (($x909 (>= ?x856 0)))
 (let (($x440 (<= ?x891 6)))
 (let ((@x450 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x373 $x440)) @x870 $x440)))
 (let ((@x560 ((_ th-lemma arith farkas -1 -1 1) (hypothesis (not $x873)) @x450 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x785) $x909)) @x418 $x909) false)))
 (let ((@x475 (lemma @x560 $x873)))
 (let (($x529 (<= ?x755 0)))
 (let ((@x508 (and-elim @x438 $x747)))
 (let ((@x401 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x747) $x529)) @x508 $x529)))
 (let (($x530 (>= ?x755 0)))
 (let ((@x154 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x747) $x530)) @x508 $x530)))
 (let (($x456 (<= ?x234 4)))
 (let ((@x874 (and-elim @x438 $x539)))
 (let ((@x277 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x539) $x456)) @x874 $x456)))
 (let (($x457 (>= ?x234 4)))
 (let ((@x525 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x539) $x457)) @x874 $x457)))
 (let ((@x983 ((_ th-lemma arith) (hypothesis (not $x1017)) @x475 @x409 @x751 @x450 @x751 @x450 @x475 @x409 @x751 @x450 @x751 @x450 @x475 @x409 @x525 @x277 @x154 @x401 @x475 @x409 false)))
 (let ((@x1023 (lemma @x983 $x1017)))
 (let (($x899 (>= n!0 (- 1))))
 (let ((@x359 (hypothesis (not $x899))))
 (let ((@x232 ((_ th-lemma arith) @x359 @x475 @x409 @x751 @x450 @x751 @x450 @x525 @x277 @x475 @x409 @x475 @x409 @x751 @x450 @x154 @x401 @x525 @x277 false)))
 (let ((@x832 (lemma @x232 $x899)))
 (let (($x346 (>= ?x777 0)))
 (let ((@x327 (lemma ((_ th-lemma arith farkas 1) (hypothesis (not $x346)) false) $x346)))
 (let (($x1020 (not (<= k!2 2))))
 (let (($x936 (<= k!2 3)))
 (let (($x927 (not $x936)))
 (let (($x809 (>= (+ (* 7 ?x777) (* 2 k!2) (* 7 c!3)) 13)))
 (let (($x557 (>= k!2 0)))
 (let (($x837 (>= n!0 0)))
 (let (($x485 (not $x557)))
 (let ((@x483 (hypothesis $x485)))
 (let ((@x709 (hypothesis (not $x837))))
 (let ((@x738 (unit-resolution (lemma ((_ th-lemma arith) @x359 @x450 @x359 @x483 @x409 false) (or $x899 $x557)) @x483 $x899)))
 (let ((@x481 (lemma ((_ th-lemma arith farkas -1/3 1 -1/3 -1/3 1 1 1 1) @x483 @x738 @x409 @x450 @x738 @x709 @x738 @x709 false) (or $x837 $x557))))
 (let ((@x386 (lemma ((_ th-lemma arith farkas 1/3 -1 1/3 1/3) @x483 (unit-resolution @x481 @x483 $x837) @x409 @x450 false) $x557)))
 (let (($x916 (<= c!3 1)))
 (let (($x170 (not $x916)))
 (let (($x986 (>= c!3 2)))
 (let (($x761 (>= c!3 (- 1))))
 (let (($x502 (<= k!2 0)))
 (let ((@x231 (hypothesis $x502)))
 (let (($x245 (>= ?x526 0)))
 (let ((@x582 ((_ th-lemma arith gcd-test 2/3 2/3 2/3 2/3 -2/3 -2/3 -1/9 -1/9 -1/9 -1/9 -1/9 -1/9 -1/9) @x386 @x231 @x386 @x231 @x154 @x401 @x386 @x231 (lemma ((_ th-lemma arith farkas 1) (hypothesis (not $x245)) false) $x245) @x386 @x231 @x525 @x277 false)))
 (let ((@x336 (lemma @x582 (not $x502))))
 (let (($x337 (>= ?x555 0)))
 (let ((@x286 (hypothesis (not $x337))))
 (let ((@x287 ((_ th-lemma arith farkas 1 1 -1/3 -1/3 -1/3 1 1 1 1 1 1) @x286 @x336 @x336 @x475 @x751 @x832 @x286 @x336 @x832 @x286 @x336 false)))
 (let ((@x322 ((_ th-lemma arith) (hypothesis (not $x761)) (lemma @x287 $x337) @x336 @x525 @x277 @x751 @x450 @x525 @x277 @x525 @x277 @x475 @x409 @x154 @x401 @x475 @x409 @x751 @x450 @x525 @x277 @x475 @x409 @x751 @x450 false)))
 (let ((@x820 ((_ th-lemma arith) (lemma @x322 $x761) (hypothesis (not $x986)) @x751 @x450 @x475 @x409 @x475 @x409 @x525 @x277 @x154 @x401 @x751 @x450 @x751 @x450 @x475 @x409 @x751 @x450 @x475 @x409 false)))
 (let ((@x988 (lemma @x820 $x986)))
 (let ((@x941 (unit-resolution ((_ th-lemma arith assign-bounds 7 2 7) (or $x809 $x916 $x485 (not $x346))) (unit-resolution ((_ th-lemma arith farkas 1 1) (or (not $x986) $x170)) @x988 $x170) @x327 @x386 $x809)))
 (let ((@x930 (hypothesis $x936)))
 (let ((@x928 ((_ th-lemma arith farkas -1 -2 5/3 5/3 32/21 -3/7 1 1 1 1) @x154 @x327 @x450 @x409 @x930 (hypothesis $x809) ((_ th-lemma arith gomory-cut 1/2 1/2 1/2) @x475 @x751 @x336 (>= (+ ?x777 n!0) 1)) @x409 @x450 @x930 false)))
 (let ((@x987 (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x1020 $x936)) (unit-resolution (lemma @x928 (or $x927 (not $x809))) @x941 $x927) $x1020)))
 (let ((@x182 ((_ th-lemma arith farkas -1 25 57 30 60 25 30 1 1 1 1 1 1 1 1 1 1 1 1 1 1) @x277 @x450 @x988 @x154 @x987 @x409 @x327 @x154 @x450 @x988 @x987 @x409 @x327 @x154 @x450 @x988 @x987 @x409 @x327 @x751 (hypothesis (<= ?x113 18)) false)))
 ((_ th-lemma arith farkas -1/3 3 -1/3 1 1) @x475 @x1023 (lemma @x182 (not (<= ?x113 18))) @x832 @x1023 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 68
 :arith-assert-diseq        15
 :arith-assert-lower        612
 :arith-assert-upper        277
 :arith-bound-prop          4
 :arith-branch-var          21
 :arith-conflicts           34
 :arith-eq-adapter          8
 :arith-fixed-eqs           81
 :arith-gcd-tests           196
 :arith-gomory-cuts         11
 :arith-grobner             29
 :arith-ineq-splits         21
 :arith-max-min             3499
 :arith-nonlinear-bounds    277
 :arith-nonlinear-horner    332
 :arith-num-rows            19
 :arith-offset-eqs          10
 :arith-patches             59
 :arith-patches_succ        18
 :arith-pivots              442
 :arith-pseudo-nonlinear    98
 :arith-row-summations      3512
 :arith-tableau-max-columns 62
 :arith-tableau-max-rows    19
 :conflicts                 37
 :decisions                 153
 :del-clause                78
 :final-checks              122
 :max-memory                3.84
 :memory                    3.24
 :minimized-lits            10
 :mk-bool-var               142
 :mk-clause                 83
 :num-allocs                3071934
 :num-checks                1
 :propagations              124
 :rlimit-count              175983
 :time                      0.04
 :total-time                0.05)
