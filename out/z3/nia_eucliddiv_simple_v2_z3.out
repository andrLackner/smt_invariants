unsat
((set-logic NIA)
(proof
(let (($x50 (exists ((y Int) (q Int) (r Int) )(! (let (($x30 (= (- y y00) 0)))
 (let (($x47 (not $x30)))
 (let (($x48 (or $x47)))
 (let ((?x43 (- r y)))
 (let ((?x33 (* y00 q00)))
 (let ((?x40 (+ q 1)))
 (let ((?x41 (* ?x40 y00)))
 (let ((?x42 (- ?x41 ?x33)))
 (let ((?x44 (+ ?x42 ?x43)))
 (let ((?x45 (- ?x44 r00)))
 (let (($x46 (= ?x45 0)))
 (let (($x38 (= (- (+ (- (* q y00) ?x33) r) r00) 0)))
 (and $x30 $x38 $x46 $x48))))))))))))) :qid k!31))
 ))
 (let (($x164 (= $x50 false)))
 (let (($x157 (exists ((y Int) (q Int) (r Int) )(! false :qid k!31))
 ))
 (let ((@x163 (elim-unused (= $x157 false))))
 (let (($x160 (= $x50 $x157)))
 (let ((?x221 (lambda ((y Int) (q Int) (r Int) )(let (($x30 (= (- y y00) 0)))
 (let (($x47 (not $x30)))
 (let (($x48 (or $x47)))
 (let ((?x43 (- r y)))
 (let ((?x33 (* y00 q00)))
 (let ((?x40 (+ q 1)))
 (let ((?x41 (* ?x40 y00)))
 (let ((?x42 (- ?x41 ?x33)))
 (let ((?x44 (+ ?x42 ?x43)))
 (let ((?x45 (- ?x44 r00)))
 (let (($x46 (= ?x45 0)))
 (let (($x38 (= (- (+ (- (* q y00) ?x33) r) r00) 0)))
 (let (($x49 (and $x30 $x38 $x46 $x48)))
 (let (($x155 (= $x49 false)))
 (let (($x57 (= (+ y (* (- 1) y00)) 0)))
 (let (($x140 (not $x57)))
 (let ((?x73 (* (- 1) r00)))
 (let ((?x99 (* (- 1) y)))
 (let ((?x171 (* (- 1) (* q00 y00))))
 (let (($x212 (= (+ (* y00 (+ 1 q)) ?x171 r ?x99 ?x73) 0)))
 (let (($x198 (= (+ (* y00 q) ?x171 r ?x73) 0)))
 (let (($x214 (and $x57 $x198 $x212 $x140)))
 (let ((@x149 (trans (monotonicity (rewrite (= $x47 $x140)) (= $x48 (or $x140))) (rewrite (= (or $x140) $x140)) (= $x48 $x140))))
 (let ((@x60 (rewrite (= $x30 $x57))))
 (let ((@x217 (monotonicity @x60 (rewrite (= $x38 $x198)) (rewrite (= $x46 $x212)) @x149 (= $x49 $x214))))
 (trans @x217 (rewrite (= $x214 false)) $x155)))))))))))))))))))))))))))
 ))
 (let ((@x51 (asserted $x50)))
 (mp @x51 (trans (quant-intro (proof-bind ?x221) $x160) @x163 $x164) false))))))))))

