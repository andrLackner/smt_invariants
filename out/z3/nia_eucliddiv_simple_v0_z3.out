unsat
((set-logic NIA)
(declare-fun y!2 () Int)
(declare-fun q!1 () Int)
(declare-fun r!0 () Int)
(proof
(let ((?x113 (* (- 1) y!2)))
 (let ((?x116 (+ y00 ?x113)))
 (let (($x79 (<= ?x116 0)))
 (let (($x117 (= ?x116 0)))
 (let ((?x124 (* y00 q!1)))
 (let ((?x74 (* (- 1) r00)))
 (let ((?x33 (* y00 q00)))
 (let ((?x56 (* (- 1) ?x33)))
 (let ((?x177 (+ y00 ?x56 ?x74 r!0 ?x113 ?x124)))
 (let (($x178 (= ?x177 0)))
 (let (($x183 (not $x178)))
 (let (($x161 (not $x117)))
 (let (($x163 (or $x161 $x183)))
 (let ((?x90 (* (- 1) r!0)))
 (let ((?x155 (+ ?x33 r00 ?x90 (* (- 1) ?x124))))
 (let (($x156 (= ?x155 0)))
 (let (($x184 (and $x117 $x156 $x163)))
 (let (($x99 (= (+ y!2 ?x90 (* (- 1) y00) (* (- 1) (* q!1 y00)) ?x33 r00) 0)))
 (let (($x70 (= (+ y!2 (* (- 1) y00)) 0)))
 (let (($x69 (and $x70 (= (+ r!0 (* q!1 y00) ?x56 ?x74) 0) (or (not $x70) (not $x99)))))
 (let (($x65 (exists ((y Int) (q Int) (r Int) )(! (let ((?x33 (* y00 q00)))
 (let ((?x54 (* (- 1) y00)))
 (let (($x139 (= (+ y (* (- 1) r) ?x54 (* (- 1) (* q y00)) ?x33 r00) 0)))
 (let (($x58 (= (+ y ?x54) 0)))
 (let (($x60 (not $x58)))
 (and $x58 (= (+ r (* q y00) (* (- 1) ?x33) (* (- 1) r00)) 0) (or $x60 (not $x139)))))))) :qid k!30))
 ))
 (let (($x141 (exists ((y Int) (q Int) (r Int) )(! (let ((?x74 (* (- 1) r00)))
 (let ((?x123 (* (- 1) (* q00 y00))))
 (let (($x134 (= (+ (* y00 (+ 1 q)) ?x123 r (* (- 1) y) ?x74) 0)))
 (let (($x58 (= (+ y (* (- 1) y00)) 0)))
 (let (($x60 (not $x58)))
 (and $x58 (= (+ (* y00 q) ?x123 r ?x74) 0) (or $x60 (not $x134)))))))) :qid k!30))
 ))
 (let ((?x81 (lambda ((y Int) (q Int) (r Int) )(let ((?x33 (* y00 q00)))
 (let ((?x54 (* (- 1) y00)))
 (let (($x139 (= (+ y (* (- 1) r) ?x54 (* (- 1) (* q y00)) ?x33 r00) 0)))
 (let (($x58 (= (+ y ?x54) 0)))
 (let (($x60 (not $x58)))
 (let (($x145 (and $x58 (= (+ r (* q y00) (* (- 1) ?x33) (* (- 1) r00)) 0) (or $x60 (not $x139)))))
 (let ((?x74 (* (- 1) r00)))
 (let ((?x123 (* (- 1) (* q00 y00))))
 (let (($x134 (= (+ (* y00 (+ 1 q)) ?x123 r (* (- 1) y) ?x74) 0)))
 (let (($x130 (and $x58 (= (+ (* y00 q) ?x123 r ?x74) 0) (or $x60 (not $x134)))))
 (rewrite (= $x130 $x145)))))))))))))
 ))
 (let (($x51 (exists ((y Int) (q Int) (r Int) )(! (let ((?x46 (- (+ (- (* (+ q 1) y00) (* y00 q00)) (- r y)) r00)))
 (let (($x30 (= (- y y00) 0)))
 (and $x30 (= (- (+ (- (* q y00) (* y00 q00)) r) r00) 0) (or (not $x30) (not (= ?x46 0)))))) :qid k!30))
 ))
 (let ((?x84 (lambda ((y Int) (q Int) (r Int) )(let ((?x74 (* (- 1) r00)))
 (let ((?x123 (* (- 1) (* q00 y00))))
 (let (($x134 (= (+ (* y00 (+ 1 q)) ?x123 r (* (- 1) y) ?x74) 0)))
 (let (($x58 (= (+ y (* (- 1) y00)) 0)))
 (let (($x60 (not $x58)))
 (let (($x130 (and $x58 (= (+ (* y00 q) ?x123 r ?x74) 0) (or $x60 (not $x134)))))
 (let ((?x46 (- (+ (- (* (+ q 1) y00) (* y00 q00)) (- r y)) r00)))
 (let (($x30 (= (- y y00) 0)))
 (let (($x50 (and $x30 (= (- (+ (- (* q y00) (* y00 q00)) r) r00) 0) (or (not $x30) (not (= ?x46 0))))))
 (rewrite (= $x50 $x130))))))))))))
 ))
 (let ((@x52 (asserted $x51)))
 (let ((@x131 (mp (mp @x52 (quant-intro (proof-bind ?x84) (= $x51 $x141)) $x141) (rewrite (= $x141 $x141)) $x141)))
 (let ((@x78 (mp~ (mp @x131 (quant-intro (proof-bind ?x81) (= $x141 $x65)) $x65) (sk (~ $x65 $x69)) $x69)))
 (let ((@x166 (mp @x78 (rewrite (= $x69 $x184)) $x184)))
 (let ((@x167 (and-elim @x166 $x117)))
 (let (($x158 (not (<= ?x177 0))))
 (let (($x110 (>= ?x177 0)))
 (let (($x97 (>= ?x116 0)))
 (let (($x102 (<= ?x155 0)))
 (let ((@x133 (and-elim @x166 $x156)))
 (let ((@x150 ((_ th-lemma arith farkas -1 -1 1) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x156) $x102)) @x133 $x102) (hypothesis (not $x110)) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x161 $x97)) @x167 $x97) false)))
 (let ((@x168 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x178 $x158 (not $x110))) (unit-resolution (and-elim @x166 $x163) @x167 $x183) (or $x158 (not $x110)))))
 (let (($x105 (>= ?x155 0)))
 ((_ th-lemma arith farkas -1 -1 1) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x156) $x105)) @x133 $x105) (unit-resolution @x168 (lemma @x150 $x110) $x158) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x161 $x79)) @x167 $x79) false)))))))))))))))))))))))))))))))))))))))))

