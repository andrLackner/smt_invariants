unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x371 (* r!1 r!1)))
 (let ((?x246 (* 2 x!0)))
 (let ((?x245 (* (- 1) r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x96 (+ r00 ?x88 ?x104 ?x245 ?x246 ?x371)))
 (let (($x367 (<= ?x96 0)))
 (let (($x106 (= ?x96 0)))
 (let ((?x133 (* 19 ?x371)))
 (let ((?x183 (* (- 1) (* x!0 x!0))))
 (let ((?x290 (* (- 12) x!0)))
 (let ((?x321 (* (- 18) (* r!1 x!0))))
 (let ((?x288 (* 12 r!1)))
 (let ((?x223 (* 9 (* r!1 r!1 r!1))))
 (let ((?x193 (* (- 1) (* r!1 x!0 x!0))))
 (let ((?x330 (* (- 8) (* r!1 r!1 x!0))))
 (let ((?x65 (* (+ ?x330 ?x193 ?x223 ?x288 ?x321 ?x290 ?x183 ?x133) ?x96)))
 (let (($x257 (= ?x65 0)))
 (let (($x129 (not $x257)))
 (let (($x186 (not $x106)))
 (let (($x73 (or $x186 $x129)))
 (let (($x179 (and $x106 $x73)))
 (let ((?x300 (* (+ ?x288 ?x290 ?x133 ?x321 ?x330 ?x183 ?x193 ?x223) (+ ?x245 ?x246 r00 ?x371 ?x88 ?x104))))
 (let ((?x35 (* 2 x00)))
 (let ((?x119 (* (- 1) r00)))
 (let (($x253 (= (+ r!1 (* (- 2) x!0) ?x119 (* (- 1) ?x371) ?x35 ?x36) 0)))
 (let (($x338 (and $x253 (or (not $x253) (not (= ?x300 0))))))
 (let (($x113 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x67 (* (- 1) r)))
 (let ((?x110 (+ ?x67 ?x32 r00 ?x30 ?x88 ?x104)))
 (let ((?x360 (* (- 1) (* r x x))))
 (let ((?x359 (* (- 1) (* x x))))
 (let ((?x377 (* (- 8) (* r r x))))
 (let ((?x285 (* (- 12) x)))
 (let ((?x283 (* 12 r)))
 (let ((?x85 (+ ?x283 ?x285 (* 19 ?x30) (* (- 18) (* r x)) ?x377 ?x359 ?x360 (* 9 (* r r r)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x120 (* (- 1) ?x30)))
 (let ((?x119 (* (- 1) r00)))
 (let ((?x118 (* (- 2) x)))
 (let (($x122 (= (+ r ?x118 ?x119 ?x120 ?x35 ?x36) 0)))
 (let (($x218 (not $x122)))
 (and $x122 (or $x218 (not (= (* ?x85 ?x110) 0))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x144 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x362 (+ 1 r)))
 (let ((?x192 (* ?x362 ?x362)))
 (let ((?x112 (* (- 3) r)))
 (let ((?x118 (* (- 2) x)))
 (let ((?x81 (+ (* (- 10) (* ?x362 ?x362 (+ x (* (- 1) r)))) ?x118 (* 2 r) (* (- 1) (* ?x362 (+ x (* (- 1) r)) (+ x (* (- 1) r)))))))
 (let (($x131 (not (= (* ?x81 (+ (- 1) ?x112 r00 ?x192 ?x32 ?x88 ?x104)) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x119 (* (- 1) r00)))
 (let (($x263 (not (= (+ (* 3 r) ?x119 (* (- 1) ?x192) ?x118 ?x35 ?x36) (- 1)))))
 (and (= (+ r ?x119 (* (- 1) (* r r)) ?x118 ?x35 ?x36) 0) (or $x263 $x131))))))))))))))) :qid k!27))
 ))
 (let ((?x115 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x67 (* (- 1) r)))
 (let ((?x110 (+ ?x67 ?x32 r00 ?x30 ?x88 ?x104)))
 (let ((?x360 (* (- 1) (* r x x))))
 (let ((?x359 (* (- 1) (* x x))))
 (let ((?x377 (* (- 8) (* r r x))))
 (let ((?x285 (* (- 12) x)))
 (let ((?x283 (* 12 r)))
 (let ((?x85 (+ ?x283 ?x285 (* 19 ?x30) (* (- 18) (* r x)) ?x377 ?x359 ?x360 (* 9 (* r r r)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x120 (* (- 1) ?x30)))
 (let ((?x119 (* (- 1) r00)))
 (let ((?x118 (* (- 2) x)))
 (let (($x122 (= (+ r ?x118 ?x119 ?x120 ?x35 ?x36) 0)))
 (let (($x218 (not $x122)))
 (let (($x105 (and $x122 (or $x218 (not (= (* ?x85 ?x110) 0))))))
 (let ((?x362 (+ 1 r)))
 (let ((?x192 (* ?x362 ?x362)))
 (let ((?x112 (* (- 3) r)))
 (let ((?x81 (+ (* (- 10) (* ?x362 ?x362 (+ x ?x67))) ?x118 (* 2 r) (* (- 1) (* ?x362 (+ x ?x67) (+ x ?x67))))))
 (let (($x131 (not (= (* ?x81 (+ (- 1) ?x112 r00 ?x192 ?x32 ?x88 ?x104)) 0))))
 (let (($x263 (not (= (+ (* 3 r) ?x119 (* (- 1) ?x192) ?x118 ?x35 ?x36) (- 1)))))
 (let (($x162 (and (= (+ r ?x119 ?x120 ?x118 ?x35 ?x36) 0) (or $x263 $x131))))
 (rewrite (= $x162 $x105))))))))))))))))))))))))))))))
 ))
 (let (($x207 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x362 (+ 1 r)))
 (let ((?x192 (* ?x362 ?x362)))
 (let ((?x112 (* (- 3) r)))
 (let ((?x118 (* (- 2) x)))
 (let ((?x81 (+ (* (- 10) (* ?x362 ?x362 (+ x (* (- 1) r)))) ?x118 (* 2 r) (* (- 1) (* ?x362 (+ x (* (- 1) r)) (+ x (* (- 1) r)))))))
 (let (($x131 (not (= (* ?x81 (+ (- 1) ?x112 r00 ?x192 ?x32 ?x88 ?x104)) 0))))
 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x88 ?x104) 0) (or (not (= (+ ?x112 r00 ?x192 ?x32 ?x88 ?x104) 1)) $x131)))))))))))) :qid k!27))
 ))
 (let ((?x249 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x362 (+ 1 r)))
 (let ((?x192 (* ?x362 ?x362)))
 (let ((?x112 (* (- 3) r)))
 (let ((?x118 (* (- 2) x)))
 (let ((?x81 (+ (* (- 10) (* ?x362 ?x362 (+ x (* (- 1) r)))) ?x118 (* 2 r) (* (- 1) (* ?x362 (+ x (* (- 1) r)) (+ x (* (- 1) r)))))))
 (let (($x131 (not (= (* ?x81 (+ (- 1) ?x112 r00 ?x192 ?x32 ?x88 ?x104)) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x119 (* (- 1) r00)))
 (let (($x263 (not (= (+ (* 3 r) ?x119 (* (- 1) ?x192) ?x118 ?x35 ?x36) (- 1)))))
 (let (($x162 (and (= (+ r ?x119 (* (- 1) (* r r)) ?x118 ?x35 ?x36) 0) (or $x263 $x131))))
 (let (($x132 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x88 ?x104) 0) (or (not (= (+ ?x112 r00 ?x192 ?x32 ?x88 ?x104) 1)) $x131))))
 (rewrite (= $x132 $x162))))))))))))))))))
 ))
 (let (($x62 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x45 (* 2 ?x44)))
 (let ((?x56 (- (- (* (- 10) (+ r 1) (+ r 1) ?x44) ?x45) (* (+ r 1) ?x44 ?x44))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) ?x45)))
 (let ((?x48 (- (- ?x46 ?x35) ?x36)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x48 0)) (not (= (* ?x48 ?x56) 0)))))))))))) :qid k!27))
 ))
 (let ((?x139 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x362 (+ 1 r)))
 (let ((?x192 (* ?x362 ?x362)))
 (let ((?x112 (* (- 3) r)))
 (let ((?x118 (* (- 2) x)))
 (let ((?x81 (+ (* (- 10) (* ?x362 ?x362 (+ x (* (- 1) r)))) ?x118 (* 2 r) (* (- 1) (* ?x362 (+ x (* (- 1) r)) (+ x (* (- 1) r)))))))
 (let (($x131 (not (= (* ?x81 (+ (- 1) ?x112 r00 ?x192 ?x32 ?x88 ?x104)) 0))))
 (let (($x132 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x88 ?x104) 0) (or (not (= (+ ?x112 r00 ?x192 ?x32 ?x88 ?x104) 1)) $x131))))
 (let ((?x44 (- x r)))
 (let ((?x45 (* 2 ?x44)))
 (let ((?x56 (- (- (* (- 10) (+ r 1) (+ r 1) ?x44) ?x45) (* (+ r 1) ?x44 ?x44))))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) ?x45)))
 (let ((?x48 (- (- ?x46 ?x35) ?x36)))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x61 (and $x40 (or (not (= ?x48 0)) (not (= (* ?x48 ?x56) 0))))))
 (rewrite (= $x61 $x132))))))))))))))))))))))
 ))
 (let ((@x63 (asserted $x62)))
 (let ((@x289 (mp (mp @x63 (quant-intro (proof-bind ?x139) (= $x62 $x207)) $x207) (rewrite (= $x207 $x207)) $x207)))
 (let ((@x94 (mp (mp @x289 (quant-intro (proof-bind ?x249) (= $x207 $x144)) $x144) (quant-intro (proof-bind ?x115) (= $x144 $x113)) $x113)))
 (let ((@x256 (mp (mp~ @x94 (sk (~ $x113 $x338)) $x338) (rewrite (= $x338 $x179)) $x179)))
 (let ((@x174 (and-elim @x256 $x106)))
 (let ((@x166 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x186 $x367)) @x174 $x367)))
 (let (($x373 (>= ?x96 0)))
 (let ((@x185 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x186 $x373)) @x174 $x373)))
 (let (($x95 (not (>= ?x65 0))))
 (let (($x379 (<= ?x65 0)))
 (let ((@x352 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x257 (not $x379) $x95)) (unit-resolution (and-elim @x256 $x73) @x174 $x129) (or (not $x379) $x95))))
 (let ((@x286 (unit-resolution @x352 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x379)) @x185 @x166 false) $x379) $x95)))
 ((_ th-lemma arith farkas 1 1 1) @x286 @x185 @x166 false))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 23
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.46
 :memory                    3.06
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1036328
 :num-checks                1
 :propagations              4
 :rlimit-count              1509
 :time                      0.01
 :total-time                0.01)
