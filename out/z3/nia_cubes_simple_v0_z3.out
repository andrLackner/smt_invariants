unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x638 (* (- 1) k!2)))
 (let ((?x330 (+ (* 3 n!0) (* 3 (* n!0 n!0)) ?x638)))
 (let (($x619 (<= ?x330 (- 1))))
 (let (($x331 (= ?x330 (- 1))))
 (let ((?x502 (+ m!1 (* (- 6) n!0))))
 (let (($x508 (= ?x502 6)))
 (let (($x514 (not $x508)))
 (let ((?x637 (* n!0 n!0)))
 (let ((?x631 (* (- 3) ?x637)))
 (let ((?x312 (* (- 9) n!0)))
 (let ((?x189 (+ m!1 ?x312 ?x631 k!2)))
 (let (($x397 (= ?x189 7)))
 (let (($x413 (not $x397)))
 (let ((?x498 (* 32 k!2)))
 (let ((?x556 (* (- 1) (* m!1 m!1))))
 (let ((?x512 (* 27 c!3)))
 (let ((?x564 (* 5 m!1)))
 (let ((?x439 (* (- 1) (* k!2 k!2))))
 (let ((?x280 (* 9 (* c!3 n!0))))
 (let ((?x573 (+ (* 9 (* n!0 k!2)) (* (- 2) (* m!1 k!2)) ?x280 ?x439 ?x564 ?x512 ?x312 ?x556 ?x498)))
 (let (($x186 (= ?x573 13)))
 (let (($x391 (not $x186)))
 (let ((?x597 (* m!1 n!0)))
 (let ((?x455 (* 2 n!0)))
 (let ((?x165 (* (- 3) c!3)))
 (let ((?x156 (* n!0 k!2)))
 (let ((?x425 (+ ?x156 ?x165 ?x455 ?x597 (* (- 3) k!2))))
 (let (($x546 (= ?x425 (- 3))))
 (let (($x258 (not $x546)))
 (let (($x179 (or $x258 $x391 $x413 $x514)))
 (let ((?x639 (+ ?x156 ?x165 ?x455 ?x638)))
 (let (($x579 (= ?x639 (- 1))))
 (let ((?x311 (* 5 k!2)))
 (let ((?x594 (* 18 c!3)))
 (let ((?x324 (+ ?x280 ?x439 ?x594 ?x312 ?x311)))
 (let (($x168 (= ?x324 4)))
 (let (($x581 (and $x508 $x168 $x579 $x331 $x179)))
 (let ((?x487 (* k!2 n!0)))
 (let ((?x458 (* (- 1) ?x487)))
 (let ((?x387 (* (- 2) n!0)))
 (let ((?x217 (* 3 c!3)))
 (let ((?x589 (+ ?x512 ?x498 ?x564 ?x312 ?x439 ?x280 (* 9 ?x487) (* (- 2) (* k!2 m!1)) ?x556)))
 (let (($x641 (or (not (= (+ k!2 m!1 ?x312 ?x631) 7)) $x514 (not (= ?x589 13)) (not (= (+ ?x217 (* 3 k!2) ?x387 ?x458 (* (- 1) ?x597)) 3)))))
 (let (($x530 (and $x508 (= (+ ?x594 ?x311 ?x312 ?x439 ?x280) 4) (= (+ ?x217 k!2 ?x387 ?x458) 1) (= (+ k!2 (* (- 3) n!0) ?x631) 1) $x641)))
 (let (($x454 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x241 (* k n)))
 (let ((?x302 (* (- 1) ?x241)))
 (let ((?x301 (* (- 2) n)))
 (let ((?x54 (* 3 c)))
 (let (($x656 (= (+ ?x54 (* 3 k) ?x301 ?x302 (* (- 1) (* m n))) 3)))
 (let (($x663 (not $x656)))
 (let ((?x149 (* 9 (* c n))))
 (let ((?x34 (* k k)))
 (let ((?x235 (* (- 1) ?x34)))
 (let ((?x234 (* (- 9) n)))
 (let ((?x608 (+ (* 27 c) (* 32 k) (* 5 m) ?x234 ?x235 ?x149 (* 9 ?x241) (* (- 2) (* k m)) (* (- 1) (* m m)))))
 (let (($x612 (not (= ?x608 13))))
 (let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x411 (not $x143)))
 (let (($x371 (or (not (= (+ k m ?x234 (* (- 3) (* n n))) 7)) $x411 $x612 $x663)))
 (let (($x348 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x304 (= (+ ?x54 k ?x301 ?x302) 1)))
 (let (($x233 (= (+ (* 18 c) (* 5 k) ?x234 ?x235 ?x149) 4)))
 (and $x143 $x233 $x304 $x348 $x371))))))))))))))))))) :qid k!36))
 ))
 (let (($x119 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x411 (not $x143)))
 (let ((?x453 (* (- 18) c)))
 (let ((?x38 (* 9 n)))
 (let ((?x73 (+ k m)))
 (let ((?x74 (* ?x73 ?x73)))
 (let ((?x333 (+ ?x74 (* (- 9) (* (+ 1 n) (+ c k))) ?x38 (* (- 23) k) (* (- 5) m) ?x453)))
 (let ((?x544 (* (- 1) m)))
 (let ((?x438 (* (- 1) k)))
 (let ((?x61 (* 3 n)))
 (let (($x297 (= (+ (* 3 (* (+ 1 n) (+ 1 n))) ?x61 ?x438 ?x544) (- 4))))
 (let ((?x670 (* (- 3) c)))
 (let ((?x51 (* 2 n)))
 (let (($x267 (= (+ (* (+ 1 n) ?x73) ?x51 (* (- 4) k) ?x544 ?x670) (- 3))))
 (let (($x480 (= (+ (* k k) (* (- 9) (* n c)) ?x38 (* (- 5) k) ?x453) (- 4))))
 (and $x143 $x480 (= (+ (* n k) ?x51 ?x438 ?x670) (- 1)) (= (+ (* 3 (* n n)) ?x61 ?x438) (- 1)) (or (not $x267) (not $x297) (not (= ?x333 (- 13))) $x411))))))))))))))))) :qid k!36))
 ))
 (let ((?x418 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x241 (* k n)))
 (let ((?x302 (* (- 1) ?x241)))
 (let ((?x301 (* (- 2) n)))
 (let ((?x54 (* 3 c)))
 (let (($x656 (= (+ ?x54 (* 3 k) ?x301 ?x302 (* (- 1) (* m n))) 3)))
 (let (($x663 (not $x656)))
 (let ((?x149 (* 9 (* c n))))
 (let ((?x34 (* k k)))
 (let ((?x235 (* (- 1) ?x34)))
 (let ((?x234 (* (- 9) n)))
 (let ((?x608 (+ (* 27 c) (* 32 k) (* 5 m) ?x234 ?x235 ?x149 (* 9 ?x241) (* (- 2) (* k m)) (* (- 1) (* m m)))))
 (let (($x612 (not (= ?x608 13))))
 (let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x411 (not $x143)))
 (let (($x371 (or (not (= (+ k m ?x234 (* (- 3) (* n n))) 7)) $x411 $x612 $x663)))
 (let (($x348 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x304 (= (+ ?x54 k ?x301 ?x302) 1)))
 (let (($x233 (= (+ (* 18 c) (* 5 k) ?x234 ?x235 ?x149) 4)))
 (let (($x254 (and $x143 $x233 $x304 $x348 $x371)))
 (let ((?x453 (* (- 18) c)))
 (let ((?x38 (* 9 n)))
 (let ((?x73 (+ k m)))
 (let ((?x74 (* ?x73 ?x73)))
 (let ((?x333 (+ ?x74 (* (- 9) (* (+ 1 n) (+ c k))) ?x38 (* (- 23) k) (* (- 5) m) ?x453)))
 (let ((?x544 (* (- 1) m)))
 (let ((?x438 (* (- 1) k)))
 (let ((?x61 (* 3 n)))
 (let (($x297 (= (+ (* 3 (* (+ 1 n) (+ 1 n))) ?x61 ?x438 ?x544) (- 4))))
 (let ((?x670 (* (- 3) c)))
 (let ((?x51 (* 2 n)))
 (let (($x267 (= (+ (* (+ 1 n) ?x73) ?x51 (* (- 4) k) ?x544 ?x670) (- 3))))
 (let (($x480 (= (+ ?x34 (* (- 9) (* n c)) ?x38 (* (- 5) k) ?x453) (- 4))))
 (let (($x576 (and $x143 $x480 (= (+ (* n k) ?x51 ?x438 ?x670) (- 1)) (= (+ (* 3 (* n n)) ?x61 ?x438) (- 1)) (or (not $x267) (not $x297) (not (= ?x333 (- 13))) $x411))))
 (rewrite (= $x576 $x254))))))))))))))))))))))))))))))))))))
 ))
 (let (($x105 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ k m)))
 (let ((?x98 (+ (* 3 (+ n 1) (+ n 1)) (* 3 (+ n 1)))))
 (let ((?x92 (- (- (+ (* (+ n 1) ?x73) (* 2 (+ n 1))) ?x73) (* 3 (+ c k)))))
 (let ((?x79 (+ (- (* ?x73 ?x73) (* 9 (+ n 1) (+ c k))) (* 9 (+ n 1)))))
 (let (($x85 (= (+ (- (- ?x79 (* 5 ?x73)) (* 18 (+ c k))) 4) 0)))
 (let (($x72 (not (= (- (- (+ m 6) (* 6 (+ n 1))) 6) 0))))
 (let (($x103 (or $x72 (not $x85) (not (= (+ ?x92 1) 0)) (not (= (+ (- ?x98 ?x73) 1) 0)))))
 (let (($x65 (= (+ (- (+ (* 3 n n) (* 3 n)) k) 1) 0)))
 (let ((?x58 (+ (- (- (+ (* n k) (* 2 n)) k) (* 3 c)) 1)))
 (let ((?x43 (* 18 c)))
 (let ((?x41 (* 5 k)))
 (let ((?x45 (- (- (+ (- (* k k) (* 9 n c)) (* 9 n)) ?x41) ?x43)))
 (and (= (- (- m (* 6 n)) 6) 0) (= (+ ?x45 4) 0) (= ?x58 0) $x65 $x103))))))))))))) :qid k!36))
 ))
 (let ((?x212 (lambda ((c Int) (k Int) (m Int) (n Int) )(let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x411 (not $x143)))
 (let ((?x453 (* (- 18) c)))
 (let ((?x38 (* 9 n)))
 (let ((?x73 (+ k m)))
 (let ((?x74 (* ?x73 ?x73)))
 (let ((?x333 (+ ?x74 (* (- 9) (* (+ 1 n) (+ c k))) ?x38 (* (- 23) k) (* (- 5) m) ?x453)))
 (let ((?x544 (* (- 1) m)))
 (let ((?x438 (* (- 1) k)))
 (let ((?x61 (* 3 n)))
 (let (($x297 (= (+ (* 3 (* (+ 1 n) (+ 1 n))) ?x61 ?x438 ?x544) (- 4))))
 (let ((?x670 (* (- 3) c)))
 (let ((?x51 (* 2 n)))
 (let (($x267 (= (+ (* (+ 1 n) ?x73) ?x51 (* (- 4) k) ?x544 ?x670) (- 3))))
 (let (($x480 (= (+ (* k k) (* (- 9) (* n c)) ?x38 (* (- 5) k) ?x453) (- 4))))
 (let (($x576 (and $x143 $x480 (= (+ (* n k) ?x51 ?x438 ?x670) (- 1)) (= (+ (* 3 (* n n)) ?x61 ?x438) (- 1)) (or (not $x267) (not $x297) (not (= ?x333 (- 13))) $x411))))
 (let ((?x98 (+ (* 3 (+ n 1) (+ n 1)) (* 3 (+ n 1)))))
 (let ((?x92 (- (- (+ (* (+ n 1) ?x73) (* 2 (+ n 1))) ?x73) (* 3 (+ c k)))))
 (let ((?x79 (+ (- ?x74 (* 9 (+ n 1) (+ c k))) (* 9 (+ n 1)))))
 (let (($x85 (= (+ (- (- ?x79 (* 5 ?x73)) (* 18 (+ c k))) 4) 0)))
 (let (($x72 (not (= (- (- (+ m 6) (* 6 (+ n 1))) 6) 0))))
 (let (($x103 (or $x72 (not $x85) (not (= (+ ?x92 1) 0)) (not (= (+ (- ?x98 ?x73) 1) 0)))))
 (let (($x59 (= (+ (- (- (+ (* n k) ?x51) k) (* 3 c)) 1) 0)))
 (let ((?x43 (* 18 c)))
 (let ((?x45 (- (- (+ (- (* k k) (* 9 n c)) ?x38) (* 5 k)) ?x43)))
 (let (($x104 (and (= (- (- m (* 6 n)) 6) 0) (= (+ ?x45 4) 0) $x59 (= (+ (- (+ (* 3 n n) ?x61) k) 1) 0) $x103)))
 (rewrite (= $x104 $x576)))))))))))))))))))))))))))))
 ))
 (let ((@x106 (asserted $x105)))
 (let ((@x630 (mp (mp @x106 (quant-intro (proof-bind ?x212) (= $x105 $x119)) $x119) (rewrite (= $x119 $x119)) $x119)))
 (let ((@x284 (mp~ (mp @x630 (quant-intro (proof-bind ?x418) (= $x119 $x454)) $x454) (sk (~ $x454 $x530)) $x530)))
 (let ((@x531 (mp @x284 (rewrite (= $x530 $x581)) $x581)))
 (let ((@x260 (and-elim @x531 $x331)))
 (let ((@x584 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x331) $x619)) @x260 $x619)))
 (let (($x486 (>= ?x330 (- 1))))
 (let ((@x356 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x331) $x486)) @x260 $x486)))
 (let (($x321 (<= ?x639 (- 1))))
 (let ((@x525 (and-elim @x531 $x579)))
 (let ((@x244 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x579) $x321)) @x525 $x321)))
 (let (($x190 (>= ?x639 (- 1))))
 (let ((@x430 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x579) $x190)) @x525 $x190)))
 (let (($x252 (<= ?x502 6)))
 (let ((@x377 (and-elim @x531 $x508)))
 (let ((@x461 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x514 $x252)) @x377 $x252)))
 (let (($x595 (>= ?x502 6)))
 (let ((@x344 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x514 $x595)) @x377 $x595)))
 (let (($x365 (not (>= ?x425 (- 3)))))
 (let (($x516 (<= ?x573 13)))
 (let (($x456 (<= ?x324 4)))
 (let ((@x396 (and-elim @x531 $x168)))
 (let ((@x328 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x168) $x456)) @x396 $x456)))
 (let (($x166 (>= ?x324 4)))
 (let ((@x519 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x168) $x166)) @x396 $x166)))
 (let ((@x398 ((_ th-lemma arith) (hypothesis (not $x516)) @x356 @x584 @x344 @x461 @x519 @x328 @x344 @x461 @x430 @x244 @x356 @x584 false)))
 (let (($x117 (>= ?x573 13)))
 (let ((@x370 ((_ th-lemma arith) (hypothesis (not $x117)) @x519 @x328 @x430 @x244 @x519 @x328 @x344 @x461 @x356 @x584 @x519 @x328 @x430 @x244 @x344 @x461 @x519 @x328 false)))
 (let ((@x586 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x186 (not $x516) (not $x117))) (lemma @x370 $x117) (or $x186 (not $x516)))))
 (let (($x526 (>= ?x189 7)))
 (let ((@x624 (unit-resolution ((_ th-lemma arith assign-bounds -1 1) (or $x526 (not $x595) (not $x619))) @x584 @x344 $x526)))
 (let (($x402 (<= ?x189 7)))
 (let ((@x409 (unit-resolution ((_ th-lemma arith assign-bounds -1 1) (or $x402 (not $x252) (not $x486))) @x356 @x461 $x402)))
 (let ((@x503 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x397 (not $x402) (not $x526))) @x409 @x624 $x397)))
 (let ((@x520 (unit-resolution (unit-resolution (and-elim @x531 $x179) @x377 (or $x258 $x391 $x413)) @x503 (or $x258 $x391))))
 (let ((@x407 (unit-resolution @x520 (unit-resolution @x586 (lemma @x398 $x516) $x186) $x258)))
 (let (($x185 (<= ?x425 (- 3))))
 (let ((@x405 ((_ th-lemma arith) (hypothesis (not $x185)) @x344 @x461 @x430 @x244 @x356 @x584 false)))
 (let ((@x417 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x546 (not $x185) $x365)) (lemma @x405 $x185) @x407 $x365)))
 ((_ th-lemma arith) @x417 @x344 @x461 @x430 @x244 @x356 @x584 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

