unsat
((set-logic NIA)
(proof
(let (($x154 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x144 (* (- 1) ?x36)))
 (let ((?x67 (* (- 1) r00)))
 (let ((?x69 (* (- 1) y00)))
 (let (($x134 (not (= (+ r ?x69 ?x67 ?x144 (* y00 (+ 1 q))) 0))))
 (let (($x303 (= (+ r ?x67 ?x144 (* y00 q)) 0)))
 (let ((?x331 (* (- 1) y)))
 (let ((?x333 (+ y00 ?x331)))
 (let (($x91 (= ?x333 0)))
 (and $x91 $x303 $x134)))))))))) :qid k!31))
 ))
 (let (($x281 (exists ((q Int) (r Int) (y Int) )(! false :qid k!31))
 ))
 (let ((@x287 (elim-unused (= $x281 false))))
 (let ((?x338 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x144 (* (- 1) ?x36)))
 (let ((?x67 (* (- 1) r00)))
 (let ((?x69 (* (- 1) y00)))
 (let (($x134 (not (= (+ r ?x69 ?x67 ?x144 (* y00 (+ 1 q))) 0))))
 (let (($x303 (= (+ r ?x67 ?x144 (* y00 q)) 0)))
 (let ((?x331 (* (- 1) y)))
 (let ((?x333 (+ y00 ?x331)))
 (let (($x91 (= ?x333 0)))
 (let (($x295 (and $x91 $x303 $x134)))
 (let (($x103 (= (+ r ?x67 (* q y00) (* (- 1) (* y00 q00))) 0)))
 (let (($x111 (not $x103)))
 (let (($x78 (= (+ y ?x69) 0)))
 (let (($x274 (and $x78 $x103 $x111)))
 (let ((@x278 (rewrite (= $x274 false))))
 (let ((@x314 (monotonicity (rewrite (= ?x333 (+ ?x331 y00))) (= $x91 (= (+ ?x331 y00) 0)))))
 (let ((@x319 (trans @x314 (rewrite (= (= (+ ?x331 y00) 0) $x78)) (= $x91 $x78))))
 (let ((@x309 (monotonicity @x319 (rewrite (= $x303 $x103)) (rewrite (= $x134 $x111)) (= $x295 $x274))))
 (trans @x309 @x278 (= $x295 false)))))))))))))))))))))
 ))
 (let ((@x344 (trans (quant-intro (proof-bind ?x338) (= $x154 $x281)) @x287 (= $x154 false))))
 (let (($x348 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x144 (* (- 1) ?x36)))
 (let ((?x67 (* (- 1) r00)))
 (let ((?x69 (* (- 1) y00)))
 (let (($x134 (not (= (+ r ?x69 ?x67 ?x144 (* y00 (+ 1 q))) 0))))
 (let (($x303 (= (+ r ?x67 ?x144 (* y00 q)) 0)))
 (and (= (+ ?x69 y) 0) $x303 $x134))))))) :qid k!31))
 ))
 (let ((?x152 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x144 (* (- 1) ?x36)))
 (let ((?x67 (* (- 1) r00)))
 (let ((?x69 (* (- 1) y00)))
 (let (($x134 (not (= (+ r ?x69 ?x67 ?x144 (* y00 (+ 1 q))) 0))))
 (let (($x303 (= (+ r ?x67 ?x144 (* y00 q)) 0)))
 (let ((?x331 (* (- 1) y)))
 (let ((?x333 (+ y00 ?x331)))
 (let (($x91 (= ?x333 0)))
 (let (($x295 (and $x91 $x303 $x134)))
 (let (($x346 (and (= (+ ?x69 y) 0) $x303 $x134)))
 (rewrite (= $x346 $x295))))))))))))))
 ))
 (let (($x64 (exists ((q Int) (r Int) (y Int) )(! (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x45 (- r y00)))
 (let ((?x48 (+ q 1)))
 (let ((?x57 (* 3 ?x48 ?x48 ?x45)))
 (let ((?x54 (- 9)))
 (let ((?x55 (* ?x54 ?x45 y00)))
 (let ((?x58 (- ?x55 ?x57)))
 (let ((?x59 (* ?x58 ?x42)))
 (let (($x60 (= ?x59 0)))
 (let (($x61 (not $x60)))
 (let (($x52 (not (= (+ (- (- ?x45 r00) (* q00 y00)) (* ?x48 y00)) 0))))
 (let (($x43 (= ?x42 0)))
 (let (($x44 (not $x43)))
 (let (($x62 (or $x44 $x52 $x61)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x62)))))))))))))))))) :qid k!31))
 ))
 (let ((?x350 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x144 (* (- 1) ?x36)))
 (let ((?x67 (* (- 1) r00)))
 (let ((?x69 (* (- 1) y00)))
 (let (($x134 (not (= (+ r ?x69 ?x67 ?x144 (* y00 (+ 1 q))) 0))))
 (let (($x303 (= (+ r ?x67 ?x144 (* y00 q)) 0)))
 (let (($x346 (and (= (+ ?x69 y) 0) $x303 $x134)))
 (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x45 (- r y00)))
 (let ((?x48 (+ q 1)))
 (let ((?x57 (* 3 ?x48 ?x48 ?x45)))
 (let ((?x54 (- 9)))
 (let ((?x55 (* ?x54 ?x45 y00)))
 (let ((?x58 (- ?x55 ?x57)))
 (let ((?x59 (* ?x58 ?x42)))
 (let (($x60 (= ?x59 0)))
 (let (($x61 (not $x60)))
 (let (($x52 (not (= (+ (- (- ?x45 r00) ?x36) (* ?x48 y00)) 0))))
 (let (($x43 (= ?x42 0)))
 (let (($x44 (not $x43)))
 (let (($x62 (or $x44 $x52 $x61)))
 (let (($x41 (= (+ (- (- r r00) ?x36) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x63 (and $x33 $x41 $x62)))
 (rewrite (= $x63 $x346))))))))))))))))))))))))))))
 ))
 (let ((@x65 (asserted $x64)))
 (let ((@x306 (mp (mp @x65 (quant-intro (proof-bind ?x350) (= $x64 $x348)) $x348) (rewrite (= $x348 $x348)) $x348)))
 (mp (mp @x306 (quant-intro (proof-bind ?x152) (= $x348 $x154)) $x154) @x344 false))))))))))))))

(:max-memory   3.36
 :memory       3.05
 :mk-bool-var  6
 :num-allocs   960713
 :num-checks   1
 :rlimit-count 447
 :time         0.01
 :total-time   0.01)
