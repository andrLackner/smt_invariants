unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun q!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x80 (* y00 q00)))
 (let ((?x350 (+ r00 ?x80 (* (- 1) (* y00 q!2)) (* (- 1) r!1))))
 (let (($x331 (>= ?x350 0)))
 (let (($x349 (= ?x350 0)))
 (let ((?x254 (* (- 10) r!1)))
 (let ((?x407 (* 5 (* y00 y00 y00))))
 (let ((?x224 (* (- 10) (* q!2 q!2 r!1))))
 (let ((?x222 (* (- 20) (* q!2 r!1))))
 (let ((?x266 (* 10 y00)))
 (let ((?x276 (+ ?x266 (* 5 (* y00 y00 y00 q!2)) ?x222 ?x224 ?x407 (* 2 (* y00 r!1 r!1)) (* 2 (* y00 q!2 r!1 r!1)) (* 20 (* y00 q!2)) (* (- 7) (* y00 y00 r!1)) (* (- 7) (* y00 y00 q!2 r!1)) (* 10 (* y00 q!2 q!2)) ?x254)))
 (let ((?x306 (* ?x276 (+ (* (- 1) r00) (* (- 1) ?x80) (* y00 q!2) r!1))))
 (let (($x369 (= ?x306 0)))
 (let (($x92 (not $x369)))
 (let (($x366 (not $x349)))
 (let (($x370 (or $x366 $x92)))
 (let (($x416 (and (= (+ y00 (* (- 1) y!0)) 0) $x349 $x370)))
 (let ((?x89 (* (- 1) ?x80)))
 (let ((?x221 (* q!2 y00)))
 (let ((?x72 (* (- 1) r00)))
 (let ((?x144 (+ r!1 ?x72 ?x221 ?x89)))
 (let ((?x245 (+ ?x254 ?x266 (* 20 ?x221) (* 5 (* q!2 y00 y00 y00)) (* (- 7) (* r!1 y00 y00)) (* (- 7) (* q!2 r!1 y00 y00)) ?x222 ?x224 ?x407 (* 10 (* q!2 q!2 y00)) (* 2 (* r!1 r!1 y00)) (* 2 (* q!2 r!1 r!1 y00)))))
 (let (($x150 (= ?x144 0)))
 (let (($x250 (and (= (+ y!0 (* (- 1) y00)) 0) $x150 (or (not $x150) (not (= (* ?x245 ?x144) 0))))))
 (let (($x219 (exists ((q Int) (r Int) (y Int) )(! (let ((?x80 (* y00 q00)))
 (let ((?x89 (* (- 1) ?x80)))
 (let ((?x39 (* q y00)))
 (let ((?x72 (* (- 1) r00)))
 (let ((?x103 (+ r ?x72 ?x39 ?x89)))
 (let ((?x316 (* 2 (* q r r y00))))
 (let ((?x314 (* 2 (* r r y00))))
 (let ((?x283 (* 10 (* q q y00))))
 (let ((?x407 (* 5 (* y00 y00 y00))))
 (let ((?x274 (* (- 10) (* q q r))))
 (let ((?x290 (* (- 20) (* q r))))
 (let ((?x292 (* 20 ?x39)))
 (let ((?x266 (* 10 y00)))
 (let ((?x263 (* (- 10) r)))
 (let ((?x408 (+ ?x263 ?x266 ?x292 (* 5 (* q y00 y00 y00)) (* (- 7) (* r y00 y00)) (* (- 7) (* q r y00 y00)) ?x290 ?x274 ?x407 ?x283 ?x314 ?x316)))
 (let (($x108 (= ?x103 0)))
 (let (($x167 (not $x108)))
 (let (($x83 (= (+ y (* (- 1) y00)) 0)))
 (and $x83 $x108 (or $x167 (not (= (* ?x408 ?x103) 0)))))))))))))))))))))) :qid k!31))
 ))
 (let (($x216 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x121 (* (- 1) ?x36)))
 (let ((?x72 (* (- 1) r00)))
 (let ((?x74 (* (- 1) y00)))
 (let ((?x239 (+ r ?x74 ?x72 ?x121 (* y00 (+ 1 q)))))
 (let ((?x106 (+ (* (- 3) (* y00 y00 (+ 1 q) (+ r ?x74))) (* (- 10) (* (+ 1 q) (+ 1 q) (+ r ?x74))) (* 2 (* y00 (+ 1 q) (+ r ?x74) (+ r ?x74))))))
 (let (($x257 (or (not (= (* ?x106 ?x239) 0)) (not (= ?x239 0)))))
 (let (($x146 (= (+ r ?x72 ?x121 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x146 $x257))))))))) :qid k!31))
 ))
 (let ((?x233 (lambda ((q Int) (r Int) (y Int) )(let ((?x80 (* y00 q00)))
 (let ((?x89 (* (- 1) ?x80)))
 (let ((?x39 (* q y00)))
 (let ((?x72 (* (- 1) r00)))
 (let ((?x103 (+ r ?x72 ?x39 ?x89)))
 (let ((?x316 (* 2 (* q r r y00))))
 (let ((?x314 (* 2 (* r r y00))))
 (let ((?x283 (* 10 (* q q y00))))
 (let ((?x407 (* 5 (* y00 y00 y00))))
 (let ((?x274 (* (- 10) (* q q r))))
 (let ((?x290 (* (- 20) (* q r))))
 (let ((?x292 (* 20 ?x39)))
 (let ((?x266 (* 10 y00)))
 (let ((?x263 (* (- 10) r)))
 (let ((?x408 (+ ?x263 ?x266 ?x292 (* 5 (* q y00 y00 y00)) (* (- 7) (* r y00 y00)) (* (- 7) (* q r y00 y00)) ?x290 ?x274 ?x407 ?x283 ?x314 ?x316)))
 (let (($x108 (= ?x103 0)))
 (let (($x167 (not $x108)))
 (let (($x83 (= (+ y (* (- 1) y00)) 0)))
 (let (($x115 (and $x83 $x108 (or $x167 (not (= (* ?x408 ?x103) 0))))))
 (let ((?x36 (* q00 y00)))
 (let ((?x121 (* (- 1) ?x36)))
 (let ((?x74 (* (- 1) y00)))
 (let ((?x239 (+ r ?x74 ?x72 ?x121 (* y00 (+ 1 q)))))
 (let ((?x106 (+ (* (- 3) (* y00 y00 (+ 1 q) (+ r ?x74))) (* (- 10) (* (+ 1 q) (+ 1 q) (+ r ?x74))) (* 2 (* y00 (+ 1 q) (+ r ?x74) (+ r ?x74))))))
 (let (($x257 (or (not (= (* ?x106 ?x239) 0)) (not (= ?x239 0)))))
 (let (($x146 (= (+ r ?x72 ?x121 (* y00 q)) 0)))
 (let (($x218 (and (= (+ y00 (* (- 1) y)) 0) $x146 $x257)))
 (rewrite (= $x218 $x115))))))))))))))))))))))))))))))
 ))
 (let (($x114 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x121 (* (- 1) ?x36)))
 (let ((?x72 (* (- 1) r00)))
 (let ((?x74 (* (- 1) y00)))
 (let ((?x239 (+ r ?x74 ?x72 ?x121 (* y00 (+ 1 q)))))
 (let ((?x106 (+ (* (- 3) (* y00 y00 (+ 1 q) (+ r ?x74))) (* (- 10) (* (+ 1 q) (+ 1 q) (+ r ?x74))) (* 2 (* y00 (+ 1 q) (+ r ?x74) (+ r ?x74))))))
 (let (($x257 (or (not (= (* ?x106 ?x239) 0)) (not (= ?x239 0)))))
 (let (($x146 (= (+ r ?x72 ?x121 (* y00 q)) 0)))
 (and (= (+ ?x74 y) 0) $x146 $x257))))))))) :qid k!31))
 ))
 (let ((?x217 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x121 (* (- 1) ?x36)))
 (let ((?x72 (* (- 1) r00)))
 (let ((?x74 (* (- 1) y00)))
 (let ((?x239 (+ r ?x74 ?x72 ?x121 (* y00 (+ 1 q)))))
 (let ((?x106 (+ (* (- 3) (* y00 y00 (+ 1 q) (+ r ?x74))) (* (- 10) (* (+ 1 q) (+ 1 q) (+ r ?x74))) (* 2 (* y00 (+ 1 q) (+ r ?x74) (+ r ?x74))))))
 (let (($x257 (or (not (= (* ?x106 ?x239) 0)) (not (= ?x239 0)))))
 (let (($x146 (= (+ r ?x72 ?x121 (* y00 q)) 0)))
 (let (($x218 (and (= (+ y00 (* (- 1) y)) 0) $x146 $x257)))
 (let (($x265 (and (= (+ ?x74 y) 0) $x146 $x257)))
 (rewrite (= $x265 $x218)))))))))))))
 ))
 (let (($x69 (exists ((q Int) (r Int) (y Int) )(! (let ((?x57 (+ (* (- 3) (+ q 1) (- r y00) y00 y00) (* 0 (- r y00) (- r y00)))))
 (let ((?x63 (+ (- ?x57 (* 10 (+ q 1) (+ q 1) (- r y00))) (* 2 (+ q 1) (- r y00) (- r y00) y00))))
 (let ((?x50 (+ (- (- (- r y00) r00) (* q00 y00)) (* (+ q 1) y00))))
 (let (($x67 (or (not (= (+ (* (- 1) y00) y00) 0)) (not (= ?x50 0)) (not (= (* ?x50 ?x63) 0)))))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) $x67))))) :qid k!31))
 ))
 (let ((?x116 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x121 (* (- 1) ?x36)))
 (let ((?x72 (* (- 1) r00)))
 (let ((?x74 (* (- 1) y00)))
 (let ((?x239 (+ r ?x74 ?x72 ?x121 (* y00 (+ 1 q)))))
 (let ((?x106 (+ (* (- 3) (* y00 y00 (+ 1 q) (+ r ?x74))) (* (- 10) (* (+ 1 q) (+ 1 q) (+ r ?x74))) (* 2 (* y00 (+ 1 q) (+ r ?x74) (+ r ?x74))))))
 (let (($x257 (or (not (= (* ?x106 ?x239) 0)) (not (= ?x239 0)))))
 (let (($x146 (= (+ r ?x72 ?x121 (* y00 q)) 0)))
 (let (($x265 (and (= (+ ?x74 y) 0) $x146 $x257)))
 (let ((?x57 (+ (* (- 3) (+ q 1) (- r y00) y00 y00) (* 0 (- r y00) (- r y00)))))
 (let ((?x63 (+ (- ?x57 (* 10 (+ q 1) (+ q 1) (- r y00))) (* 2 (+ q 1) (- r y00) (- r y00) y00))))
 (let ((?x50 (+ (- (- (- r y00) r00) ?x36) (* (+ q 1) y00))))
 (let (($x67 (or (not (= (+ (* (- 1) y00) y00) 0)) (not (= ?x50 0)) (not (= (* ?x50 ?x63) 0)))))
 (let (($x68 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) $x67)))
 (rewrite (= $x68 $x265)))))))))))))))))
 ))
 (let ((@x70 (asserted $x69)))
 (let ((@x134 (mp (mp @x70 (quant-intro (proof-bind ?x116) (= $x69 $x114)) $x114) (rewrite (= $x114 $x114)) $x114)))
 (let ((@x236 (mp (mp @x134 (quant-intro (proof-bind ?x217) (= $x114 $x216)) $x216) (quant-intro (proof-bind ?x233) (= $x216 $x219)) $x219)))
 (let ((@x376 (mp (mp~ @x236 (sk (~ $x219 $x250)) $x250) (rewrite (= $x250 $x416)) $x416)))
 (let ((@x309 (and-elim @x376 $x349)))
 (let ((@x272 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x366 $x331)) @x309 $x331)))
 (let (($x332 (<= ?x350 0)))
 (let ((@x153 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x366 $x332)) @x309 $x332)))
 (let (($x261 (not (<= ?x306 0))))
 (let (($x345 (>= ?x306 0)))
 (let ((@x252 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x369 $x261 (not $x345))) (unit-resolution (and-elim @x376 $x370) @x309 $x92) (or $x261 (not $x345)))))
 (let ((@x307 (unit-resolution @x252 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x345)) @x153 @x272 false) $x345) $x261)))
 ((_ th-lemma arith farkas 1 1 1) @x307 @x153 @x272 false)))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        8
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-fixed-eqs           2
 :arith-grobner             2
 :arith-max-min             70
 :arith-nonlinear-horner    6
 :arith-num-rows            4
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      2
 :arith-tableau-max-columns 30
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                14
 :final-checks              2
 :max-memory                3.57
 :memory                    3.08
 :mk-bool-var               21
 :mk-clause                 18
 :num-allocs                1094556
 :num-checks                1
 :propagations              6
 :rlimit-count              2338
 :time                      0.01
 :total-time                0.02)
