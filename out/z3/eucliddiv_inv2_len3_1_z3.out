unsat
((set-logic NIA)
(declare-fun q!2 () Int)
(declare-fun r!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x76 (* y00 q00)))
 (let ((?x277 (+ r00 ?x76 (* (- 1) r!1) (* (- 1) (* y00 q!2)))))
 (let (($x236 (>= ?x277 0)))
 (let (($x282 (= ?x277 0)))
 (let ((?x238 (* (- 2) (* y00 y00 y00))))
 (let ((?x105 (* 3 (* y00 y00 y00 y00))))
 (let ((?x294 (* (- 3) y00)))
 (let ((?x270 (+ ?x294 (* (- 6) (* y00 y00 y00 r!1)) (* 3 (* y00 y00 r!1 r!1)) ?x105 (* 3 (* y00 y00 r!1 r!1 q!2)) (* (- 2) (* y00 r!1 r!1)) (* (- 3) (* y00 q!2)) ?x238 (* 4 (* y00 y00 r!1)) (* (- 6) (* y00 y00 y00 r!1 q!2)) (* 3 (* y00 y00 y00 y00 q!2)))))
 (let ((?x272 (* ?x270 (+ (* (- 1) r00) (* (- 1) ?x76) r!1 (* y00 q!2)))))
 (let (($x308 (= ?x272 0)))
 (let (($x324 (not $x308)))
 (let (($x296 (not $x282)))
 (let (($x88 (or $x296 $x324)))
 (let (($x158 (and (= (+ y00 (* (- 1) y!0)) 0) $x282 $x88)))
 (let ((?x85 (* (- 1) ?x76)))
 (let ((?x208 (* q!2 y00)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x151 (+ r!1 ?x68 ?x208 ?x85)))
 (let ((?x300 (+ ?x294 (* (- 3) ?x208) ?x105 (* (- 6) (* r!1 y00 y00 y00)) (* 3 (* r!1 r!1 y00 y00)) (* 3 (* q!2 r!1 r!1 y00 y00)) (* (- 2) (* r!1 r!1 y00)) (* 4 (* r!1 y00 y00)) ?x238 (* (- 6) (* q!2 r!1 y00 y00 y00)) (* 3 (* q!2 y00 y00 y00 y00)))))
 (let (($x156 (= ?x151 0)))
 (let (($x119 (and (= (+ y!0 (* (- 1) y00)) 0) $x156 (or (not $x156) (not (= (* ?x300 ?x151) 0))))))
 (let (($x279 (exists ((q Int) (r Int) (y Int) )(! (let ((?x76 (* y00 q00)))
 (let ((?x85 (* (- 1) ?x76)))
 (let ((?x39 (* q y00)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x99 (+ r ?x68 ?x39 ?x85)))
 (let ((?x238 (* (- 2) (* y00 y00 y00))))
 (let ((?x245 (* 4 (* r y00 y00))))
 (let ((?x222 (* (- 2) (* r r y00))))
 (let ((?x171 (* 3 (* q r r y00 y00))))
 (let ((?x169 (* 3 (* r r y00 y00))))
 (let ((?x105 (* 3 (* y00 y00 y00 y00))))
 (let ((?x297 (* (- 3) ?x39)))
 (let ((?x294 (* (- 3) y00)))
 (let ((?x363 (+ ?x294 ?x297 ?x105 (* (- 6) (* r y00 y00 y00)) ?x169 ?x171 ?x222 ?x245 ?x238 (* (- 6) (* q r y00 y00 y00)) (* 3 (* q y00 y00 y00 y00)))))
 (let (($x104 (= ?x99 0)))
 (let (($x163 (not $x104)))
 (let (($x79 (= (+ y (* (- 1) y00)) 0)))
 (and $x79 $x104 (or $x163 (not (= (* ?x363 ?x99) 0))))))))))))))))))))) :qid k!31))
 ))
 (let (($x140 (exists ((q Int) (r Int) (y Int) )(! (let ((?x194 (+ 1 q)))
 (let ((?x200 (* y00 ?x194)))
 (let ((?x36 (* q00 y00)))
 (let ((?x289 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x70 (* (- 1) y00)))
 (let ((?x220 (+ r ?x70 ?x68 ?x289 ?x200)))
 (let ((?x100 (+ (* 3 (* y00 y00 ?x194 (+ r ?x70) (+ r ?x70))) (* (- 2) (* y00 (+ r ?x70) (+ r ?x70))) (* (- 3) ?x200))))
 (let (($x248 (or (not (= ?x220 0)) (not (= (* ?x100 ?x220) 0)))))
 (let (($x125 (= (+ r ?x68 ?x289 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x125 $x248))))))))))) :qid k!31))
 ))
 (let ((?x137 (lambda ((q Int) (r Int) (y Int) )(let ((?x76 (* y00 q00)))
 (let ((?x85 (* (- 1) ?x76)))
 (let ((?x39 (* q y00)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x99 (+ r ?x68 ?x39 ?x85)))
 (let ((?x238 (* (- 2) (* y00 y00 y00))))
 (let ((?x245 (* 4 (* r y00 y00))))
 (let ((?x222 (* (- 2) (* r r y00))))
 (let ((?x171 (* 3 (* q r r y00 y00))))
 (let ((?x169 (* 3 (* r r y00 y00))))
 (let ((?x105 (* 3 (* y00 y00 y00 y00))))
 (let ((?x297 (* (- 3) ?x39)))
 (let ((?x294 (* (- 3) y00)))
 (let ((?x363 (+ ?x294 ?x297 ?x105 (* (- 6) (* r y00 y00 y00)) ?x169 ?x171 ?x222 ?x245 ?x238 (* (- 6) (* q r y00 y00 y00)) (* 3 (* q y00 y00 y00 y00)))))
 (let (($x104 (= ?x99 0)))
 (let (($x163 (not $x104)))
 (let (($x79 (= (+ y (* (- 1) y00)) 0)))
 (let (($x391 (and $x79 $x104 (or $x163 (not (= (* ?x363 ?x99) 0))))))
 (let ((?x194 (+ 1 q)))
 (let ((?x200 (* y00 ?x194)))
 (let ((?x36 (* q00 y00)))
 (let ((?x289 (* (- 1) ?x36)))
 (let ((?x70 (* (- 1) y00)))
 (let ((?x220 (+ r ?x70 ?x68 ?x289 ?x200)))
 (let ((?x100 (+ (* 3 (* y00 y00 ?x194 (+ r ?x70) (+ r ?x70))) (* (- 2) (* y00 (+ r ?x70) (+ r ?x70))) (* (- 3) ?x200))))
 (let (($x248 (or (not (= ?x220 0)) (not (= (* ?x100 ?x220) 0)))))
 (let (($x125 (= (+ r ?x68 ?x289 (* y00 q)) 0)))
 (let (($x142 (and (= (+ y00 (* (- 1) y)) 0) $x125 $x248)))
 (rewrite (= $x142 $x391)))))))))))))))))))))))))))))))
 ))
 (let (($x225 (exists ((q Int) (r Int) (y Int) )(! (let ((?x194 (+ 1 q)))
 (let ((?x200 (* y00 ?x194)))
 (let ((?x36 (* q00 y00)))
 (let ((?x289 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x70 (* (- 1) y00)))
 (let ((?x220 (+ r ?x70 ?x68 ?x289 ?x200)))
 (let ((?x100 (+ (* 3 (* y00 y00 ?x194 (+ r ?x70) (+ r ?x70))) (* (- 2) (* y00 (+ r ?x70) (+ r ?x70))) (* (- 3) ?x200))))
 (let (($x248 (or (not (= ?x220 0)) (not (= (* ?x100 ?x220) 0)))))
 (let (($x125 (= (+ r ?x68 ?x289 (* y00 q)) 0)))
 (and (= (+ ?x70 y) 0) $x125 $x248))))))))))) :qid k!31))
 ))
 (let ((?x141 (lambda ((q Int) (r Int) (y Int) )(let ((?x194 (+ 1 q)))
 (let ((?x200 (* y00 ?x194)))
 (let ((?x36 (* q00 y00)))
 (let ((?x289 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x70 (* (- 1) y00)))
 (let ((?x220 (+ r ?x70 ?x68 ?x289 ?x200)))
 (let ((?x100 (+ (* 3 (* y00 y00 ?x194 (+ r ?x70) (+ r ?x70))) (* (- 2) (* y00 (+ r ?x70) (+ r ?x70))) (* (- 3) ?x200))))
 (let (($x248 (or (not (= ?x220 0)) (not (= (* ?x100 ?x220) 0)))))
 (let (($x125 (= (+ r ?x68 ?x289 (* y00 q)) 0)))
 (let (($x142 (and (= (+ y00 (* (- 1) y)) 0) $x125 $x248)))
 (let (($x253 (and (= (+ ?x70 y) 0) $x125 $x248)))
 (rewrite (= $x253 $x142)))))))))))))))
 ))
 (let (($x65 (exists ((q Int) (r Int) (y Int) )(! (let ((?x50 (+ (- (- (- r y00) r00) (* q00 y00)) (* (+ q 1) y00))))
 (let ((?x58 (- (* 3 (+ q 1) (- r y00) (- r y00) y00 y00) (* 2 (- r y00) (- r y00) y00))))
 (let (($x63 (or (not (= (+ (* (- 1) y00) y00) 0)) (not (= ?x50 0)) (not (= (* (- ?x58 (* 3 (+ q 1) y00)) ?x50) 0)))))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) $x63)))) :qid k!31))
 ))
 (let ((?x233 (lambda ((q Int) (r Int) (y Int) )(let ((?x194 (+ 1 q)))
 (let ((?x200 (* y00 ?x194)))
 (let ((?x36 (* q00 y00)))
 (let ((?x289 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x70 (* (- 1) y00)))
 (let ((?x220 (+ r ?x70 ?x68 ?x289 ?x200)))
 (let ((?x100 (+ (* 3 (* y00 y00 ?x194 (+ r ?x70) (+ r ?x70))) (* (- 2) (* y00 (+ r ?x70) (+ r ?x70))) (* (- 3) ?x200))))
 (let (($x248 (or (not (= ?x220 0)) (not (= (* ?x100 ?x220) 0)))))
 (let (($x125 (= (+ r ?x68 ?x289 (* y00 q)) 0)))
 (let (($x253 (and (= (+ ?x70 y) 0) $x125 $x248)))
 (let ((?x50 (+ (- (- (- r y00) r00) ?x36) (* (+ q 1) y00))))
 (let ((?x58 (- (* 3 (+ q 1) (- r y00) (- r y00) y00 y00) (* 2 (- r y00) (- r y00) y00))))
 (let (($x63 (or (not (= (+ (* (- 1) y00) y00) 0)) (not (= ?x50 0)) (not (= (* (- ?x58 (* 3 (+ q 1) y00)) ?x50) 0)))))
 (let (($x64 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) $x63)))
 (rewrite (= $x64 $x253))))))))))))))))))
 ))
 (let ((@x66 (asserted $x65)))
 (let ((@x260 (mp (mp @x66 (quant-intro (proof-bind ?x233) (= $x65 $x225)) $x225) (rewrite (= $x225 $x225)) $x225)))
 (let ((@x301 (mp (mp @x260 (quant-intro (proof-bind ?x141) (= $x225 $x140)) $x140) (quant-intro (proof-bind ?x137) (= $x140 $x279)) $x279)))
 (let ((@x107 (mp (mp~ @x301 (sk (~ $x279 $x119)) $x119) (rewrite (= $x119 $x158)) $x158)))
 (let ((@x127 (and-elim @x107 $x282)))
 (let ((@x112 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x296 $x236)) @x127 $x236)))
 (let (($x240 (<= ?x277 0)))
 (let ((@x93 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x296 $x240)) @x127 $x240)))
 (let (($x111 (not (<= ?x272 0))))
 (let (($x295 (>= ?x272 0)))
 (let ((@x129 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x308 $x111 (not $x295))) (unit-resolution (and-elim @x107 $x88) @x127 $x324) (or $x111 (not $x295)))))
 (let ((@x306 (unit-resolution @x129 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x295)) @x93 @x112 false) $x295) $x111)))
 ((_ th-lemma arith farkas 1 1 1) @x306 @x93 @x112 false)))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        12
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-fixed-eqs           2
 :arith-max-min             70
 :arith-nonlinear-bounds    4
 :arith-num-rows            4
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      2
 :arith-tableau-max-columns 28
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.55
 :memory                    3.06
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1081385
 :num-checks                1
 :propagations              6
 :rlimit-count              2018
 :time                      0.01
 :total-time                0.02)
