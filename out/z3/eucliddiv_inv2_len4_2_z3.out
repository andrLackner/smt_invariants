unsat
((set-logic NIA)
(declare-fun q!2 () Int)
(declare-fun r!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x78 (* y00 q00)))
 (let ((?x105 (+ r00 ?x78 (* (- 1) r!1) (* (- 1) (* y00 q!2)))))
 (let (($x93 (>= ?x105 0)))
 (let (($x108 (= ?x105 0)))
 (let ((?x473 (* (- 2) (* y00 y00 y00))))
 (let ((?x309 (* (- 9) (* y00 y00 y00 y00))))
 (let ((?x174 (* (- 10) (* y00 y00))))
 (let ((?x579 (+ (* (- 18) (* y00 y00 q!2 r!1 r!1)) (* (- 20) (* y00 y00 q!2)) (* 18 (* y00 y00 y00 r!1)) ?x174 (* (- 10) (* y00 y00 q!2 q!2)) (* (- 9) (* y00 y00 r!1 r!1)) (* (- 9) (* y00 y00 q!2 q!2 r!1 r!1)) (* 36 (* y00 y00 y00 q!2 r!1)) ?x309 (* 18 (* y00 y00 y00 q!2 q!2 r!1)) (* (- 18) (* y00 y00 y00 y00 q!2)) (* (- 9) (* y00 y00 y00 y00 q!2 q!2)) (* (- 2) (* y00 r!1 r!1)) ?x473 (* (- 4) (* y00 q!2 r!1 r!1)) (* (- 2) (* y00 y00 y00 q!2 q!2)) (* (- 4) (* y00 y00 y00 q!2)) (* 4 (* y00 y00 q!2 q!2 r!1)) (* 8 (* y00 y00 q!2 r!1)) (* 4 (* y00 y00 r!1)) (* (- 2) (* y00 q!2 q!2 r!1 r!1)))))
 (let ((?x581 (* ?x579 (+ (* (- 1) r00) (* (- 1) ?x78) r!1 (* y00 q!2)))))
 (let (($x131 (= ?x581 0)))
 (let (($x582 (not $x131)))
 (let (($x167 (not $x108)))
 (let (($x84 (or $x167 $x582)))
 (let (($x200 (and (= (+ y00 (* (- 1) y!0)) 0) $x108 $x84)))
 (let ((?x87 (* (- 1) ?x78)))
 (let ((?x70 (* (- 1) r00)))
 (let ((?x112 (+ r!1 ?x70 (* q!2 y00) ?x87)))
 (let ((?x119 (+ ?x174 (* (- 20) (* q!2 y00 y00)) (* (- 10) (* q!2 q!2 y00 y00)) (* (- 9) (* r!1 r!1 y00 y00)) (* (- 18) (* q!2 r!1 r!1 y00 y00)) (* (- 9) (* q!2 q!2 r!1 r!1 y00 y00)) (* 18 (* r!1 y00 y00 y00)) (* 36 (* q!2 r!1 y00 y00 y00)) (* 18 (* q!2 q!2 r!1 y00 y00 y00)) ?x309 (* (- 18) (* q!2 y00 y00 y00 y00)) (* (- 9) (* q!2 q!2 y00 y00 y00 y00)) (* (- 2) (* r!1 r!1 y00)) (* (- 4) (* q!2 r!1 r!1 y00)) (* (- 2) (* q!2 q!2 r!1 r!1 y00)) (* 4 (* r!1 y00 y00)) (* 8 (* q!2 r!1 y00 y00)) (* 4 (* q!2 q!2 r!1 y00 y00)) ?x473 (* (- 4) (* q!2 y00 y00 y00)) (* (- 2) (* q!2 q!2 y00 y00 y00)))))
 (let (($x253 (= ?x112 0)))
 (let (($x153 (and (= (+ y!0 (* (- 1) y00)) 0) $x253 (or (not $x253) (not (= (* ?x119 ?x112) 0))))))
 (let (($x244 (exists ((q Int) (r Int) (y Int) )(! (let ((?x78 (* y00 q00)))
 (let ((?x87 (* (- 1) ?x78)))
 (let ((?x39 (* q y00)))
 (let ((?x70 (* (- 1) r00)))
 (let ((?x101 (+ r ?x70 ?x39 ?x87)))
 (let ((?x483 (* (- 2) (* q q y00 y00 y00))))
 (let ((?x496 (* (- 4) (* q y00 y00 y00))))
 (let ((?x473 (* (- 2) (* y00 y00 y00))))
 (let ((?x495 (* 4 (* q q r y00 y00))))
 (let ((?x494 (* 8 (* q r y00 y00))))
 (let ((?x492 (* 4 (* r y00 y00))))
 (let ((?x427 (* (- 2) (* q q r r y00))))
 (let ((?x490 (* (- 4) (* q r r y00))))
 (let ((?x419 (* (- 2) (* r r y00))))
 (let ((?x319 (* (- 9) (* q q y00 y00 y00 y00))))
 (let ((?x332 (* (- 18) (* q y00 y00 y00 y00))))
 (let ((?x309 (* (- 9) (* y00 y00 y00 y00))))
 (let ((?x331 (* 18 (* q q r y00 y00 y00))))
 (let ((?x330 (* 36 (* q r y00 y00 y00))))
 (let ((?x328 (* 18 (* r y00 y00 y00))))
 (let ((?x263 (* (- 9) (* q q r r y00 y00))))
 (let ((?x326 (* (- 18) (* q r r y00 y00))))
 (let ((?x255 (* (- 9) (* r r y00 y00))))
 (let ((?x180 (* (- 10) (* q q y00 y00))))
 (let ((?x174 (* (- 10) (* y00 y00))))
 (let ((?x560 (+ ?x174 (* (- 20) (* q y00 y00)) ?x180 ?x255 ?x326 ?x263 ?x328 ?x330 ?x331 ?x309 ?x332 ?x319 ?x419 ?x490 ?x427 ?x492 ?x494 ?x495 ?x473 ?x496 ?x483)))
 (let (($x106 (= ?x101 0)))
 (let (($x165 (not $x106)))
 (let (($x81 (= (+ y (* (- 1) y00)) 0)))
 (and $x81 $x106 (or $x165 (not (= (* ?x560 ?x101) 0))))))))))))))))))))))))))))))))) :qid k!31))
 ))
 (let (($x301 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x236 (* (- 1) ?x36)))
 (let ((?x70 (* (- 1) r00)))
 (let ((?x72 (* (- 1) y00)))
 (let ((?x212 (+ r ?x72 ?x70 ?x236 (* y00 (+ 1 q)))))
 (let ((?x277 (+ r ?x72)))
 (let ((?x243 (+ 1 q)))
 (let ((?x146 (+ (* (- 10) (* y00 y00 ?x243 ?x243)) (* (- 9) (* y00 y00 ?x243 ?x243 ?x277 ?x277)) (* (- 2) (* y00 ?x243 ?x243 ?x277 ?x277)))))
 (let (($x218 (or (not (= (* ?x146 ?x212) 0)) (not (= ?x212 0)))))
 (let (($x272 (= (+ r ?x70 ?x236 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x272 $x218))))))))))) :qid k!31))
 ))
 (let ((?x209 (lambda ((q Int) (r Int) (y Int) )(let ((?x78 (* y00 q00)))
 (let ((?x87 (* (- 1) ?x78)))
 (let ((?x39 (* q y00)))
 (let ((?x70 (* (- 1) r00)))
 (let ((?x101 (+ r ?x70 ?x39 ?x87)))
 (let ((?x483 (* (- 2) (* q q y00 y00 y00))))
 (let ((?x496 (* (- 4) (* q y00 y00 y00))))
 (let ((?x473 (* (- 2) (* y00 y00 y00))))
 (let ((?x495 (* 4 (* q q r y00 y00))))
 (let ((?x494 (* 8 (* q r y00 y00))))
 (let ((?x492 (* 4 (* r y00 y00))))
 (let ((?x427 (* (- 2) (* q q r r y00))))
 (let ((?x490 (* (- 4) (* q r r y00))))
 (let ((?x419 (* (- 2) (* r r y00))))
 (let ((?x319 (* (- 9) (* q q y00 y00 y00 y00))))
 (let ((?x332 (* (- 18) (* q y00 y00 y00 y00))))
 (let ((?x309 (* (- 9) (* y00 y00 y00 y00))))
 (let ((?x331 (* 18 (* q q r y00 y00 y00))))
 (let ((?x330 (* 36 (* q r y00 y00 y00))))
 (let ((?x328 (* 18 (* r y00 y00 y00))))
 (let ((?x263 (* (- 9) (* q q r r y00 y00))))
 (let ((?x326 (* (- 18) (* q r r y00 y00))))
 (let ((?x255 (* (- 9) (* r r y00 y00))))
 (let ((?x180 (* (- 10) (* q q y00 y00))))
 (let ((?x174 (* (- 10) (* y00 y00))))
 (let ((?x560 (+ ?x174 (* (- 20) (* q y00 y00)) ?x180 ?x255 ?x326 ?x263 ?x328 ?x330 ?x331 ?x309 ?x332 ?x319 ?x419 ?x490 ?x427 ?x492 ?x494 ?x495 ?x473 ?x496 ?x483)))
 (let (($x106 (= ?x101 0)))
 (let (($x165 (not $x106)))
 (let (($x81 (= (+ y (* (- 1) y00)) 0)))
 (let (($x266 (and $x81 $x106 (or $x165 (not (= (* ?x560 ?x101) 0))))))
 (let ((?x36 (* q00 y00)))
 (let ((?x236 (* (- 1) ?x36)))
 (let ((?x72 (* (- 1) y00)))
 (let ((?x212 (+ r ?x72 ?x70 ?x236 (* y00 (+ 1 q)))))
 (let ((?x277 (+ r ?x72)))
 (let ((?x243 (+ 1 q)))
 (let ((?x146 (+ (* (- 10) (* y00 y00 ?x243 ?x243)) (* (- 9) (* y00 y00 ?x243 ?x243 ?x277 ?x277)) (* (- 2) (* y00 ?x243 ?x243 ?x277 ?x277)))))
 (let (($x218 (or (not (= (* ?x146 ?x212) 0)) (not (= ?x212 0)))))
 (let (($x272 (= (+ r ?x70 ?x236 (* y00 q)) 0)))
 (let (($x208 (and (= (+ y00 (* (- 1) y)) 0) $x272 $x218)))
 (rewrite (= $x208 $x266)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x258 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x236 (* (- 1) ?x36)))
 (let ((?x70 (* (- 1) r00)))
 (let ((?x72 (* (- 1) y00)))
 (let ((?x212 (+ r ?x72 ?x70 ?x236 (* y00 (+ 1 q)))))
 (let ((?x277 (+ r ?x72)))
 (let ((?x243 (+ 1 q)))
 (let ((?x146 (+ (* (- 10) (* y00 y00 ?x243 ?x243)) (* (- 9) (* y00 y00 ?x243 ?x243 ?x277 ?x277)) (* (- 2) (* y00 ?x243 ?x243 ?x277 ?x277)))))
 (let (($x218 (or (not (= (* ?x146 ?x212) 0)) (not (= ?x212 0)))))
 (let (($x272 (= (+ r ?x70 ?x236 (* y00 q)) 0)))
 (and (= (+ ?x72 y) 0) $x272 $x218))))))))))) :qid k!31))
 ))
 (let ((?x207 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x236 (* (- 1) ?x36)))
 (let ((?x70 (* (- 1) r00)))
 (let ((?x72 (* (- 1) y00)))
 (let ((?x212 (+ r ?x72 ?x70 ?x236 (* y00 (+ 1 q)))))
 (let ((?x277 (+ r ?x72)))
 (let ((?x243 (+ 1 q)))
 (let ((?x146 (+ (* (- 10) (* y00 y00 ?x243 ?x243)) (* (- 9) (* y00 y00 ?x243 ?x243 ?x277 ?x277)) (* (- 2) (* y00 ?x243 ?x243 ?x277 ?x277)))))
 (let (($x218 (or (not (= (* ?x146 ?x212) 0)) (not (= ?x212 0)))))
 (let (($x272 (= (+ r ?x70 ?x236 (* y00 q)) 0)))
 (let (($x208 (and (= (+ y00 (* (- 1) y)) 0) $x272 $x218)))
 (let (($x220 (and (= (+ ?x72 y) 0) $x272 $x218)))
 (rewrite (= $x220 $x208)))))))))))))))
 ))
 (let (($x67 (exists ((q Int) (r Int) (y Int) )(! (let ((?x50 (+ (- (- (- r y00) r00) (* q00 y00)) (* (+ q 1) y00))))
 (let ((?x45 (- r y00)))
 (let ((?x48 (+ q 1)))
 (let ((?x60 (- (* (- 10) ?x48 ?x48 y00 y00) (* 9 ?x48 ?x48 ?x45 ?x45 y00 y00))))
 (let (($x64 (not (= (* (- ?x60 (* 2 ?x48 ?x48 ?x45 ?x45 y00)) ?x50) 0))))
 (let (($x65 (or (not (= (+ (* (- 1) y00) y00) 0)) (not (= ?x50 0)) $x64)))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) $x65))))))) :qid k!31))
 ))
 (let ((?x235 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x236 (* (- 1) ?x36)))
 (let ((?x70 (* (- 1) r00)))
 (let ((?x72 (* (- 1) y00)))
 (let ((?x212 (+ r ?x72 ?x70 ?x236 (* y00 (+ 1 q)))))
 (let ((?x277 (+ r ?x72)))
 (let ((?x243 (+ 1 q)))
 (let ((?x146 (+ (* (- 10) (* y00 y00 ?x243 ?x243)) (* (- 9) (* y00 y00 ?x243 ?x243 ?x277 ?x277)) (* (- 2) (* y00 ?x243 ?x243 ?x277 ?x277)))))
 (let (($x218 (or (not (= (* ?x146 ?x212) 0)) (not (= ?x212 0)))))
 (let (($x272 (= (+ r ?x70 ?x236 (* y00 q)) 0)))
 (let (($x220 (and (= (+ ?x72 y) 0) $x272 $x218)))
 (let ((?x50 (+ (- (- (- r y00) r00) ?x36) (* (+ q 1) y00))))
 (let ((?x45 (- r y00)))
 (let ((?x48 (+ q 1)))
 (let ((?x60 (- (* (- 10) ?x48 ?x48 y00 y00) (* 9 ?x48 ?x48 ?x45 ?x45 y00 y00))))
 (let (($x64 (not (= (* (- ?x60 (* 2 ?x48 ?x48 ?x45 ?x45 y00)) ?x50) 0))))
 (let (($x65 (or (not (= (+ (* (- 1) y00) y00) 0)) (not (= ?x50 0)) $x64)))
 (let (($x66 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) $x65)))
 (rewrite (= $x66 $x220)))))))))))))))))))))
 ))
 (let ((@x68 (asserted $x67)))
 (let ((@x239 (mp (mp @x68 (quant-intro (proof-bind ?x235) (= $x67 $x258)) $x258) (rewrite (= $x258 $x258)) $x258)))
 (let ((@x372 (mp (mp @x239 (quant-intro (proof-bind ?x207) (= $x258 $x301)) $x301) (quant-intro (proof-bind ?x209) (= $x301 $x244)) $x244)))
 (let ((@x231 (mp (mp~ @x372 (sk (~ $x244 $x153)) $x153) (rewrite (= $x153 $x200)) $x200)))
 (let ((@x160 (and-elim @x231 $x108)))
 (let ((@x102 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x167 $x93)) @x160 $x93)))
 (let (($x116 (<= ?x105 0)))
 (let ((@x80 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x167 $x116)) @x160 $x116)))
 (let (($x505 (not (<= ?x581 0))))
 (let (($x171 (>= ?x581 0)))
 (let ((@x114 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x131 $x505 (not $x171))) (unit-resolution (and-elim @x231 $x84) @x160 $x582) (or $x505 (not $x171)))))
 (let ((@x169 (unit-resolution @x114 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x171)) @x80 @x102 false) $x171) $x505)))
 ((_ th-lemma arith farkas 1 1 1) @x169 @x80 @x102 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        20
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-fixed-eqs           2
 :arith-max-min             118
 :arith-nonlinear-bounds    12
 :arith-num-rows            4
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 45
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.60
 :memory                    3.12
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1109630
 :num-checks                1
 :propagations              6
 :rlimit-count              3012
 :time                      0.01
 :total-time                0.02)
