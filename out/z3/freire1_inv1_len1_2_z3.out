unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x357 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x233 (* (- 1) ?x36)))
 (let ((?x106 (* (- 2) x00)))
 (let ((?x123 (+ r00 ?x106 ?x233 (* 2 x!0) (* (- 1) r!1) ?x357)))
 (let (($x393 (<= ?x123 0)))
 (let (($x404 (= ?x123 0)))
 (let ((?x370 (* (- 1) ?x357)))
 (let ((?x346 (* r!1 r!1 r!1 r!1)))
 (let ((?x438 (+ (* r00 r!1) (* (- 2) (* x00 r!1)) (* 2 (* x!0 r!1 r!1)) (* (- 1) (* r00 x!0)) (* 2 (* x00 x!0)) (* r00 r00 x!0) (* (- 2) (* x!0 x!0 r!1)) (* (- 1) (* r00 x!0 r!1)) (* 2 (* x00 x!0 r!1)) (* (- 1) (* x!0 r!1 r!1 r!1)) (* r00 r00 x!0 r!1) ?x346 ?x370 (* (- 2) (* x!0 x!0)) (* 3 (* x!0 r!1)) (* (- 1) (* r00 r00 r!1)) (* r00 r!1 r!1) (* (- 2) (* x00 r!1 r!1)) (* (- 1) (* r00 r00 r!1 r!1)))))
 (let (($x441 (= ?x438 0)))
 (let (($x455 (not $x441)))
 (let (($x219 (not $x404)))
 (let (($x226 (or $x219 $x455)))
 (let (($x458 (and $x404 $x226)))
 (let ((?x313 (+ ?x357 (* (- 3) (* r!1 x!0)) (* (- 1) (* r!1 r00)) (* 2 (* r!1 x00)) (* r!1 r00 r00) (* (- 2) (* r!1 r!1 x!0)) (* (- 1) (* r!1 r!1 r00)) (* (- 1) ?x346) (* 2 (* r!1 r!1 x00)) (* r!1 r!1 r00 r00) (* 2 (* x!0 x!0)) (* x!0 r00) (* (- 2) (* x!0 x00)) (* (- 1) (* x!0 r00 r00)) (* 2 (* r!1 x!0 x!0)) (* r!1 x!0 r00) (* r!1 r!1 r!1 x!0) (* (- 2) (* r!1 x!0 x00)) (* (- 1) (* r!1 x!0 r00 r00)))))
 (let (($x358 (= (+ r!1 (* (- 2) x!0) (* (- 1) r00) ?x370 (* 2 x00) ?x36) 0)))
 (let (($x388 (and $x358 (or (not $x358) (not (= ?x313 0))))))
 (let (($x212 (exists ((r Int) (x Int) )(! (let ((?x30 (* r r)))
 (let ((?x403 (+ ?x30 (* (- 3) (* r x)) (* (- 1) (* r r00)) (* 2 (* r x00)) (* r r00 r00) (* (- 2) (* r r x)) (* (- 1) (* r r r00)) (* (- 1) (* r r r r)) (* 2 (* r r x00)) (* r r r00 r00) (* 2 (* x x)) (* x r00) (* (- 2) (* x x00)) (* (- 1) (* x r00 r00)) (* 2 (* r x x)) (* r x r00) (* r r r x) (* (- 2) (* r x x00)) (* (- 1) (* r x r00 r00)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x116 (* (- 1) ?x30)))
 (let ((?x115 (* (- 1) r00)))
 (let ((?x114 (* (- 2) x)))
 (let (($x118 (= (+ r ?x114 ?x115 ?x116 ?x35 ?x36) 0)))
 (and $x118 (or (not $x118) (not (= ?x403 0)))))))))))) :qid k!27))
 ))
 (let (($x229 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x233 (* (- 1) ?x36)))
 (let ((?x106 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x467 (+ 1 r)))
 (let ((?x237 (* ?x467 ?x467)))
 (let ((?x275 (* (- 3) r)))
 (let ((?x342 (* ?x467 (+ x (* (- 1) r)) (+ (- 1) ?x275 r00 ?x237 ?x32 ?x106 ?x233))))
 (let (($x359 (not (= ?x342 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x114 (* (- 2) x)))
 (let ((?x115 (* (- 1) r00)))
 (let (($x101 (not (= (+ (* 3 r) ?x115 (* (- 1) ?x237) ?x114 ?x35 ?x36) (- 1)))))
 (and (= (+ r ?x115 (* (- 1) (* r r)) ?x114 ?x35 ?x36) 0) (or $x101 $x359))))))))))))))) :qid k!27))
 ))
 (let ((?x429 (lambda ((r Int) (x Int) )(let ((?x30 (* r r)))
 (let ((?x403 (+ ?x30 (* (- 3) (* r x)) (* (- 1) (* r r00)) (* 2 (* r x00)) (* r r00 r00) (* (- 2) (* r r x)) (* (- 1) (* r r r00)) (* (- 1) (* r r r r)) (* 2 (* r r x00)) (* r r r00 r00) (* 2 (* x x)) (* x r00) (* (- 2) (* x x00)) (* (- 1) (* x r00 r00)) (* 2 (* r x x)) (* r x r00) (* r r r x) (* (- 2) (* r x x00)) (* (- 1) (* r x r00 r00)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x116 (* (- 1) ?x30)))
 (let ((?x115 (* (- 1) r00)))
 (let ((?x114 (* (- 2) x)))
 (let (($x118 (= (+ r ?x114 ?x115 ?x116 ?x35 ?x36) 0)))
 (let (($x456 (and $x118 (or (not $x118) (not (= ?x403 0))))))
 (let ((?x233 (* (- 1) ?x36)))
 (let ((?x106 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x467 (+ 1 r)))
 (let ((?x237 (* ?x467 ?x467)))
 (let ((?x275 (* (- 3) r)))
 (let ((?x342 (* ?x467 (+ x (* (- 1) r)) (+ (- 1) ?x275 r00 ?x237 ?x32 ?x106 ?x233))))
 (let (($x359 (not (= ?x342 0))))
 (let (($x101 (not (= (+ (* 3 r) ?x115 (* (- 1) ?x237) ?x114 ?x35 ?x36) (- 1)))))
 (let (($x129 (and (= (+ r ?x115 ?x116 ?x114 ?x35 ?x36) 0) (or $x101 $x359))))
 (rewrite (= $x129 $x456))))))))))))))))))))))
 ))
 (let (($x323 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x233 (* (- 1) ?x36)))
 (let ((?x106 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x467 (+ 1 r)))
 (let ((?x237 (* ?x467 ?x467)))
 (let ((?x275 (* (- 3) r)))
 (let ((?x342 (* ?x467 (+ x (* (- 1) r)) (+ (- 1) ?x275 r00 ?x237 ?x32 ?x106 ?x233))))
 (let (($x359 (not (= ?x342 0))))
 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x106 ?x233) 0) (or (not (= (+ ?x275 r00 ?x237 ?x32 ?x106 ?x233) 1)) $x359))))))))))) :qid k!27))
 ))
 (let ((?x140 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x233 (* (- 1) ?x36)))
 (let ((?x106 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x467 (+ 1 r)))
 (let ((?x237 (* ?x467 ?x467)))
 (let ((?x275 (* (- 3) r)))
 (let ((?x342 (* ?x467 (+ x (* (- 1) r)) (+ (- 1) ?x275 r00 ?x237 ?x32 ?x106 ?x233))))
 (let (($x359 (not (= ?x342 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x114 (* (- 2) x)))
 (let ((?x115 (* (- 1) r00)))
 (let (($x101 (not (= (+ (* 3 r) ?x115 (* (- 1) ?x237) ?x114 ?x35 ?x36) (- 1)))))
 (let (($x129 (and (= (+ r ?x115 (* (- 1) (* r r)) ?x114 ?x35 ?x36) 0) (or $x101 $x359))))
 (let (($x360 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x106 ?x233) 0) (or (not (= (+ ?x275 r00 ?x237 ?x32 ?x106 ?x233) 1)) $x359))))
 (rewrite (= $x360 $x129))))))))))))))))))
 ))
 (let (($x58 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let (($x56 (or (not (= ?x48 0)) (not (= (* ?x48 (- 9) ?x41 ?x44) 0)))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) $x56)))))))) :qid k!27))
 ))
 (let ((?x332 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x233 (* (- 1) ?x36)))
 (let ((?x106 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x467 (+ 1 r)))
 (let ((?x237 (* ?x467 ?x467)))
 (let ((?x275 (* (- 3) r)))
 (let ((?x342 (* ?x467 (+ x (* (- 1) r)) (+ (- 1) ?x275 r00 ?x237 ?x32 ?x106 ?x233))))
 (let (($x359 (not (= ?x342 0))))
 (let (($x360 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x106 ?x233) 0) (or (not (= (+ ?x275 r00 ?x237 ?x32 ?x106 ?x233) 1)) $x359))))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let (($x56 (or (not (= ?x48 0)) (not (= (* ?x48 (- 9) ?x41 ?x44) 0)))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x57 (and $x40 $x56)))
 (rewrite (= $x57 $x360))))))))))))))))))))
 ))
 (let ((@x59 (asserted $x58)))
 (let ((@x100 (mp (mp @x59 (quant-intro (proof-bind ?x332) (= $x58 $x323)) $x323) (rewrite (= $x323 $x323)) $x323)))
 (let ((@x339 (mp (mp @x100 (quant-intro (proof-bind ?x140) (= $x323 $x229)) $x229) (quant-intro (proof-bind ?x429) (= $x229 $x212)) $x212)))
 (let ((@x410 (mp (mp~ @x339 (sk (~ $x212 $x388)) $x388) (rewrite (= $x388 $x458)) $x458)))
 (let ((@x412 (and-elim @x410 $x404)))
 (let ((@x413 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x219 $x393)) @x412 $x393)))
 (let (($x396 (>= ?x123 0)))
 (let ((@x406 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x219 $x396)) @x412 $x396)))
 (let (($x277 (not (>= ?x438 0))))
 (let (($x448 (<= ?x438 0)))
 (let ((@x273 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x441 (not $x448) $x277)) (unit-resolution (and-elim @x410 $x226) @x412 $x455) (or (not $x448) $x277))))
 (let ((@x416 (unit-resolution @x273 (lemma ((_ th-lemma arith) (hypothesis (not $x448)) @x406 @x413 false) $x448) $x277)))
 ((_ th-lemma arith) @x416 @x406 @x413 false))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             182
 :arith-nonlinear-bounds    10
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-pivots              2
 :arith-tableau-max-columns 31
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.60
 :memory                    3.11
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1143224
 :num-checks                1
 :propagations              4
 :rlimit-count              2681
 :time                      0.01
 :total-time                0.01)
