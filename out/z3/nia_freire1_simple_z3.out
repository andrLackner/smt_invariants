unsat
((set-logic NIA)
(proof
(let (($x220 (exists ((x Int) (r Int) )(! (let ((?x103 (* (- 2) x00)))
 (let ((?x33 (* 2 x)))
 (let ((?x29 (* r00 r00)))
 (let ((?x67 (* (- 1) ?x29)))
 (let ((?x213 (+ (* (+ 1 r) (+ 1 r)) ?x67 (* (- 3) r) ?x33 r00 ?x103)))
 (let (($x219 (not (= ?x213 1))))
 (let (($x140 (= (+ (* r r) ?x67 (* (- 1) r) ?x33 r00 ?x103) 0)))
 (let (($x65 (not (<= (+ x (* (- 1) r)) 0))))
 (and $x65 $x140 $x219))))))))) :qid k!26))
 ))
 (let (($x130 (exists ((x Int) (r Int) )(! false :qid k!26))
 ))
 (let ((@x141 (elim-unused (= $x130 false))))
 (let ((?x146 (lambda ((x Int) (r Int) )(let ((?x103 (* (- 2) x00)))
 (let ((?x33 (* 2 x)))
 (let ((?x29 (* r00 r00)))
 (let ((?x67 (* (- 1) ?x29)))
 (let ((?x213 (+ (* (+ 1 r) (+ 1 r)) ?x67 (* (- 3) r) ?x33 r00 ?x103)))
 (let (($x219 (not (= ?x213 1))))
 (let (($x140 (= (+ (* r r) ?x67 (* (- 1) r) ?x33 r00 ?x103) 0)))
 (let (($x65 (not (<= (+ x (* (- 1) r)) 0))))
 (let (($x99 (and $x65 $x140 $x219)))
 (let (($x116 (= (+ ?x33 (* (- 1) r) (* r r) r00 ?x67 ?x103) 0)))
 (let (($x73 (not $x116)))
 (let (($x122 (and $x65 $x116 $x73)))
 (let ((@x127 (rewrite (= $x122 false))))
 (let ((@x168 (monotonicity (rewrite (= $x140 $x116)) (rewrite (= $x219 $x73)) (= $x99 $x122))))
 (trans @x168 @x127 (= $x99 false)))))))))))))))))
 ))
 (let ((@x82 (trans (quant-intro (proof-bind ?x146) (= $x220 $x130)) @x141 (= $x220 false))))
 (let (($x75 (exists ((x Int) (r Int) )(! (let ((?x103 (* (- 2) x00)))
 (let ((?x33 (* 2 x)))
 (let ((?x29 (* r00 r00)))
 (let ((?x67 (* (- 1) ?x29)))
 (let ((?x213 (+ (* (+ 1 r) (+ 1 r)) ?x67 (* (- 3) r) ?x33 r00 ?x103)))
 (let (($x219 (not (= ?x213 1))))
 (let (($x140 (= (+ (* r r) ?x67 (* (- 1) r) ?x33 r00 ?x103) 0)))
 (let (($x56 (not (<= x r))))
 (and $x56 $x140 $x219))))))))) :qid k!26))
 ))
 (let ((?x83 (lambda ((x Int) (r Int) )(let ((?x103 (* (- 2) x00)))
 (let ((?x33 (* 2 x)))
 (let ((?x29 (* r00 r00)))
 (let ((?x67 (* (- 1) ?x29)))
 (let ((?x213 (+ (* (+ 1 r) (+ 1 r)) ?x67 (* (- 3) r) ?x33 r00 ?x103)))
 (let (($x219 (not (= ?x213 1))))
 (let (($x140 (= (+ (* r r) ?x67 (* (- 1) r) ?x33 r00 ?x103) 0)))
 (let (($x65 (not (<= (+ x (* (- 1) r)) 0))))
 (let (($x99 (and $x65 $x140 $x219)))
 (let (($x56 (not (<= x r))))
 (let (($x118 (and $x56 $x140 $x219)))
 (rewrite (= $x118 $x99))))))))))))))
 ))
 (let (($x53 (exists ((x Int) (r Int) )(! (let ((?x36 (* 2 x00)))
 (let ((?x41 (+ r 1)))
 (let ((?x47 (+ (- (- (* ?x41 ?x41) (* r00 r00)) ?x41) (* 2 (- x r)) r00)))
 (let (($x50 (not (= (- ?x47 ?x36) 0))))
 (let (($x51 (or $x50)))
 (let ((?x33 (* 2 x)))
 (let (($x39 (= (- (+ (- (- (* r r) (* r00 r00)) r) ?x33 r00) ?x36) 0)))
 (let (($x26 (> x r)))
 (and $x26 $x39 $x51))))))))) :qid k!26))
 ))
 (let ((?x81 (lambda ((x Int) (r Int) )(let ((?x103 (* (- 2) x00)))
 (let ((?x33 (* 2 x)))
 (let ((?x29 (* r00 r00)))
 (let ((?x67 (* (- 1) ?x29)))
 (let ((?x213 (+ (* (+ 1 r) (+ 1 r)) ?x67 (* (- 3) r) ?x33 r00 ?x103)))
 (let (($x219 (not (= ?x213 1))))
 (let (($x140 (= (+ (* r r) ?x67 (* (- 1) r) ?x33 r00 ?x103) 0)))
 (let (($x56 (not (<= x r))))
 (let (($x118 (and $x56 $x140 $x219)))
 (let ((?x36 (* 2 x00)))
 (let ((?x47 (+ (- (- (* (+ r 1) (+ r 1)) ?x29) (+ r 1)) (* 2 (- x r)) r00)))
 (let (($x50 (not (= (- ?x47 ?x36) 0))))
 (let (($x51 (or $x50)))
 (let (($x39 (= (- (+ (- (- (* r r) ?x29) r) ?x33 r00) ?x36) 0)))
 (let (($x26 (> x r)))
 (let (($x52 (and $x26 $x39 $x51)))
 (rewrite (= $x52 $x118)))))))))))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (let ((@x98 (mp (mp @x54 (quant-intro (proof-bind ?x81) (= $x53 $x75)) $x75) (rewrite (= $x75 $x75)) $x75)))
 (mp (mp @x98 (quant-intro (proof-bind ?x83) (= $x75 $x220)) $x220) @x82 false))))))))))))))

