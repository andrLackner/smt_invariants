unsat
((set-logic NIA)
(proof
(let (($x41 (exists ((x Int) (y Int) )(! (let (($x39 (not (= (- (+ (+ y 1) (- x 1)) (+ y00 x00)) 0))))
 (let (($x32 (= (- (+ y x) (+ y00 x00)) 0)))
 (and $x32 $x39))) :qid k!38))
 ))
 (let (($x90 (= $x41 false)))
 (let (($x83 (exists ((x Int) (y Int) )(! false :qid k!38))
 ))
 (let ((@x89 (elim-unused (= $x83 false))))
 (let (($x86 (= $x41 $x83)))
 (let ((?x105 (lambda ((x Int) (y Int) )(let (($x39 (not (= (- (+ (+ y 1) (- x 1)) (+ y00 x00)) 0))))
 (let (($x32 (= (- (+ y x) (+ y00 x00)) 0)))
 (let (($x40 (and $x32 $x39)))
 (let (($x81 (= $x40 false)))
 (let (($x70 (= (+ y x (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x59 (not $x70)))
 (let (($x120 (and $x70 $x59)))
 (let ((@x48 (monotonicity (rewrite (= $x32 $x70)) (rewrite (= $x39 $x59)) (= $x40 $x120))))
 (trans @x48 (rewrite (= $x120 false)) $x81))))))))))
 ))
 (let ((@x42 (asserted $x41)))
 (mp @x42 (trans (quant-intro (proof-bind ?x105) $x86) @x89 $x90) false))))))))))

