unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun q!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x74 (* y00 q00)))
 (let ((?x375 (+ r00 ?x74 (* (- 1) (* y00 q!2)) (* (- 1) r!1))))
 (let (($x153 (>= ?x375 0)))
 (let (($x376 (= ?x375 0)))
 (let ((?x444 (* (- 2) (* y00 y00 y00))))
 (let ((?x408 (* 2 (* q!2 q!2 r!1 r!1))))
 (let ((?x365 (* 4 (* q!2 r!1 r!1))))
 (let ((?x342 (* 2 (* r!1 r!1))))
 (let ((?x324 (* 2 (* q!2 r!1))))
 (let ((?x339 (* 2 (* y00 y00))))
 (let ((?x337 (* 2 r!1)))
 (let ((?x183 (* (- 2) y00)))
 (let ((?x285 (+ ?x183 (* (- 2) (* y00 q!2)) ?x337 ?x339 ?x324 ?x342 (* (- 4) (* y00 y00 y00 q!2)) ?x365 ?x408 (* 2 (* y00 y00 r!1)) (* 4 (* y00 y00 q!2 r!1)) (* 2 (* y00 y00 q!2 q!2 r!1)) (* (- 4) (* y00 r!1)) ?x444 (* (- 8) (* y00 q!2 r!1)) (* (- 4) (* y00 q!2 q!2 r!1)) (* 2 (* y00 y00 q!2 q!2)) (* 4 (* y00 y00 q!2)) (* (- 2) (* y00 y00 y00 q!2 q!2)))))
 (let ((?x89 (* ?x285 (+ (* (- 1) r00) (* (- 1) ?x74) (* y00 q!2) r!1))))
 (let (($x356 (= ?x89 0)))
 (let (($x91 (not $x356)))
 (let (($x380 (not $x376)))
 (let (($x385 (or $x380 $x91)))
 (let (($x190 (and (= (+ y00 (* (- 1) y!0)) 0) $x376 $x385)))
 (let ((?x83 (* (- 1) ?x74)))
 (let ((?x335 (* q!2 y00)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x320 (+ r!1 ?x66 ?x335 ?x83)))
 (let ((?x311 (+ ?x337 ?x183 (* (- 2) ?x335) ?x324 ?x342 ?x365 ?x408 (* 2 (* r!1 y00 y00)) (* 4 (* q!2 r!1 y00 y00)) (* 2 (* q!2 q!2 r!1 y00 y00)) (* (- 4) (* r!1 y00)) (* (- 8) (* q!2 r!1 y00)) (* (- 4) (* q!2 q!2 r!1 y00)) ?x339 (* 4 (* q!2 y00 y00)) (* 2 (* q!2 q!2 y00 y00)) ?x444 (* (- 4) (* q!2 y00 y00 y00)) (* (- 2) (* q!2 q!2 y00 y00 y00)))))
 (let (($x336 (= ?x320 0)))
 (let (($x115 (and (= (+ y!0 (* (- 1) y00)) 0) $x336 (or (not $x336) (not (= (* ?x311 ?x320) 0))))))
 (let (($x127 (exists ((q Int) (r Int) (y Int) )(! (let ((?x74 (* y00 q00)))
 (let ((?x83 (* (- 1) ?x74)))
 (let ((?x39 (* q y00)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x97 (+ r ?x66 ?x39 ?x83)))
 (let ((?x444 (* (- 2) (* y00 y00 y00))))
 (let ((?x339 (* 2 (* y00 y00))))
 (let ((?x246 (* 2 (* q q r y00 y00))))
 (let ((?x240 (* 2 (* r y00 y00))))
 (let ((?x206 (* 2 (* q q r r))))
 (let ((?x200 (* 2 (* r r))))
 (let ((?x169 (* 2 (* q r))))
 (let ((?x183 (* (- 2) y00)))
 (let ((?x179 (* 2 r)))
 (let ((?x446 (+ ?x179 ?x183 (* (- 2) ?x39) ?x169 ?x200 (* 4 (* q r r)) ?x206 ?x240 (* 4 (* q r y00 y00)) ?x246 (* (- 4) (* r y00)) (* (- 8) (* q r y00)) (* (- 4) (* q q r y00)) ?x339 (* 4 (* q y00 y00)) (* 2 (* q q y00 y00)) ?x444 (* (- 4) (* q y00 y00 y00)) (* (- 2) (* q q y00 y00 y00)))))
 (let (($x102 (= ?x97 0)))
 (let (($x161 (not $x102)))
 (let (($x77 (= (+ y (* (- 1) y00)) 0)))
 (and $x77 $x102 (or $x161 (not (= (* ?x446 ?x97) 0)))))))))))))))))))))) :qid k!31))
 ))
 (let (($x137 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x170 (* (- 1) ?x36)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x68 (* (- 1) y00)))
 (let ((?x87 (+ r ?x68 ?x66 ?x170 (* y00 (+ 1 q)))))
 (let ((?x236 (* 2 (* y00 y00 (+ 1 q) (+ 1 q) (+ r ?x68)))))
 (let ((?x195 (* 2 (* (+ 1 q) (+ 1 q) (+ r ?x68) (+ r ?x68)))))
 (let (($x259 (= (* (+ (* 2 (* (+ 1 q) (+ r ?x68))) ?x195 ?x236) ?x87) 0)))
 (let (($x257 (or (not (= ?x87 0)) (not $x259))))
 (let (($x121 (= (+ r ?x66 ?x170 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x121 $x257))))))))))) :qid k!31))
 ))
 (let ((?x130 (lambda ((q Int) (r Int) (y Int) )(let ((?x74 (* y00 q00)))
 (let ((?x83 (* (- 1) ?x74)))
 (let ((?x39 (* q y00)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x97 (+ r ?x66 ?x39 ?x83)))
 (let ((?x444 (* (- 2) (* y00 y00 y00))))
 (let ((?x339 (* 2 (* y00 y00))))
 (let ((?x246 (* 2 (* q q r y00 y00))))
 (let ((?x240 (* 2 (* r y00 y00))))
 (let ((?x206 (* 2 (* q q r r))))
 (let ((?x200 (* 2 (* r r))))
 (let ((?x169 (* 2 (* q r))))
 (let ((?x183 (* (- 2) y00)))
 (let ((?x179 (* 2 r)))
 (let ((?x446 (+ ?x179 ?x183 (* (- 2) ?x39) ?x169 ?x200 (* 4 (* q r r)) ?x206 ?x240 (* 4 (* q r y00 y00)) ?x246 (* (- 4) (* r y00)) (* (- 8) (* q r y00)) (* (- 4) (* q q r y00)) ?x339 (* 4 (* q y00 y00)) (* 2 (* q q y00 y00)) ?x444 (* (- 4) (* q y00 y00 y00)) (* (- 2) (* q q y00 y00 y00)))))
 (let (($x102 (= ?x97 0)))
 (let (($x161 (not $x102)))
 (let (($x77 (= (+ y (* (- 1) y00)) 0)))
 (let (($x481 (and $x77 $x102 (or $x161 (not (= (* ?x446 ?x97) 0))))))
 (let ((?x36 (* q00 y00)))
 (let ((?x170 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) y00)))
 (let ((?x87 (+ r ?x68 ?x66 ?x170 (* y00 (+ 1 q)))))
 (let ((?x236 (* 2 (* y00 y00 (+ 1 q) (+ 1 q) (+ r ?x68)))))
 (let ((?x195 (* 2 (* (+ 1 q) (+ 1 q) (+ r ?x68) (+ r ?x68)))))
 (let (($x259 (= (* (+ (* 2 (* (+ 1 q) (+ r ?x68))) ?x195 ?x236) ?x87) 0)))
 (let (($x257 (or (not (= ?x87 0)) (not $x259))))
 (let (($x121 (= (+ r ?x66 ?x170 (* y00 q)) 0)))
 (let (($x142 (and (= (+ y00 (* (- 1) y)) 0) $x121 $x257)))
 (rewrite (= $x142 $x481))))))))))))))))))))))))))))))))
 ))
 (let (($x113 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x170 (* (- 1) ?x36)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x68 (* (- 1) y00)))
 (let ((?x87 (+ r ?x68 ?x66 ?x170 (* y00 (+ 1 q)))))
 (let ((?x236 (* 2 (* y00 y00 (+ 1 q) (+ 1 q) (+ r ?x68)))))
 (let ((?x195 (* 2 (* (+ 1 q) (+ 1 q) (+ r ?x68) (+ r ?x68)))))
 (let (($x259 (= (* (+ (* 2 (* (+ 1 q) (+ r ?x68))) ?x195 ?x236) ?x87) 0)))
 (let (($x257 (or (not (= ?x87 0)) (not $x259))))
 (let (($x121 (= (+ r ?x66 ?x170 (* y00 q)) 0)))
 (and (= (+ ?x68 y) 0) $x121 $x257))))))))))) :qid k!31))
 ))
 (let ((?x138 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x170 (* (- 1) ?x36)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x68 (* (- 1) y00)))
 (let ((?x87 (+ r ?x68 ?x66 ?x170 (* y00 (+ 1 q)))))
 (let ((?x236 (* 2 (* y00 y00 (+ 1 q) (+ 1 q) (+ r ?x68)))))
 (let ((?x195 (* 2 (* (+ 1 q) (+ 1 q) (+ r ?x68) (+ r ?x68)))))
 (let (($x259 (= (* (+ (* 2 (* (+ 1 q) (+ r ?x68))) ?x195 ?x236) ?x87) 0)))
 (let (($x257 (or (not (= ?x87 0)) (not $x259))))
 (let (($x121 (= (+ r ?x66 ?x170 (* y00 q)) 0)))
 (let (($x142 (and (= (+ y00 (* (- 1) y)) 0) $x121 $x257)))
 (let (($x103 (and (= (+ ?x68 y) 0) $x121 $x257)))
 (rewrite (= $x103 $x142)))))))))))))))
 ))
 (let (($x63 (exists ((q Int) (r Int) (y Int) )(! (let ((?x50 (+ (- (- (- r y00) r00) (* q00 y00)) (* (+ q 1) y00))))
 (let ((?x45 (- r y00)))
 (let ((?x48 (+ q 1)))
 (let ((?x57 (+ (* 2 ?x48 ?x45) (* 2 ?x48 ?x48 ?x45 ?x45) (* 2 ?x48 ?x48 ?x45 y00 y00))))
 (let (($x61 (or (not (= (+ (* (- 1) y00) y00) 0)) (not (= ?x50 0)) (not (= (* ?x57 ?x50) 0)))))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) $x61)))))) :qid k!31))
 ))
 (let ((?x120 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x170 (* (- 1) ?x36)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x68 (* (- 1) y00)))
 (let ((?x87 (+ r ?x68 ?x66 ?x170 (* y00 (+ 1 q)))))
 (let ((?x236 (* 2 (* y00 y00 (+ 1 q) (+ 1 q) (+ r ?x68)))))
 (let ((?x195 (* 2 (* (+ 1 q) (+ 1 q) (+ r ?x68) (+ r ?x68)))))
 (let (($x259 (= (* (+ (* 2 (* (+ 1 q) (+ r ?x68))) ?x195 ?x236) ?x87) 0)))
 (let (($x257 (or (not (= ?x87 0)) (not $x259))))
 (let (($x121 (= (+ r ?x66 ?x170 (* y00 q)) 0)))
 (let (($x103 (and (= (+ ?x68 y) 0) $x121 $x257)))
 (let ((?x50 (+ (- (- (- r y00) r00) ?x36) (* (+ q 1) y00))))
 (let ((?x45 (- r y00)))
 (let ((?x48 (+ q 1)))
 (let ((?x57 (+ (* 2 ?x48 ?x45) (* 2 ?x48 ?x48 ?x45 ?x45) (* 2 ?x48 ?x48 ?x45 y00 y00))))
 (let (($x61 (or (not (= (+ (* (- 1) y00) y00) 0)) (not (= ?x50 0)) (not (= (* ?x57 ?x50) 0)))))
 (let (($x62 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) $x61)))
 (rewrite (= $x62 $x103))))))))))))))))))))
 ))
 (let ((@x64 (asserted $x63)))
 (let ((@x139 (mp (mp @x64 (quant-intro (proof-bind ?x120) (= $x63 $x113)) $x113) (rewrite (= $x113 $x113)) $x113)))
 (let ((@x315 (mp (mp @x139 (quant-intro (proof-bind ?x138) (= $x113 $x137)) $x137) (quant-intro (proof-bind ?x130) (= $x137 $x127)) $x127)))
 (let ((@x352 (mp (mp~ @x315 (sk (~ $x127 $x115)) $x115) (rewrite (= $x115 $x190)) $x190)))
 (let ((@x162 (and-elim @x352 $x376)))
 (let ((@x371 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x380 $x153)) @x162 $x153)))
 (let (($x149 (<= ?x375 0)))
 (let ((@x188 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x380 $x149)) @x162 $x149)))
 (let (($x88 (not (<= ?x89 0))))
 (let (($x379 (>= ?x89 0)))
 (let ((@x71 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x356 $x88 (not $x379))) (unit-resolution (and-elim @x352 $x385) @x162 $x91) (or $x88 (not $x379)))))
 (let ((@x381 (unit-resolution @x71 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x379)) @x188 @x371 false) $x379) $x88)))
 ((_ th-lemma arith farkas 1 1 1) @x381 @x188 @x371 false))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        16
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-fixed-eqs           2
 :arith-max-min             98
 :arith-nonlinear-bounds    8
 :arith-num-rows            4
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      2
 :arith-tableau-max-columns 35
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.55
 :memory                    3.11
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1057583
 :num-checks                1
 :propagations              6
 :rlimit-count              2514
 :time                      0.01
 :total-time                0.02)
