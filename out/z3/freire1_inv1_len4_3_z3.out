unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x324 (* 2 x!0)))
 (let ((?x130 (* r!1 r!1)))
 (let ((?x443 (* (- 1) r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x105 (* (- 1) ?x36)))
 (let ((?x89 (* (- 2) x00)))
 (let ((?x149 (+ r00 ?x89 ?x105 ?x443 ?x130 ?x324)))
 (let (($x238 (<= ?x149 0)))
 (let (($x165 (= ?x149 0)))
 (let ((?x426 (* 44 (* r!1 r!1 x!0))))
 (let ((?x383 (* (- 11) (* r!1 r!1 r!1 r!1))))
 (let ((?x394 (* (- 22) (* r!1 r!1 r!1))))
 (let ((?x339 (* (- 11) (* r!1 r!1 x!0 x!0))))
 (let ((?x337 (* (- 22) (* r!1 x!0 x!0))))
 (let ((?x275 (* (- 11) (* x!0 x!0))))
 (let ((?x331 (* (- 1) x!0)))
 (let ((?x431 (* 22 (* r!1 r!1 r!1 x!0))))
 (let ((?x332 (* (- 10) ?x130)))
 (let ((?x333 (* 21 (* r!1 x!0))))
 (let ((?x197 (* (+ (- 9) r!1 ?x333 ?x332 ?x431 ?x331 ?x275 ?x337 ?x339 ?x394 ?x383 ?x426) ?x149)))
 (let (($x179 (= ?x197 0)))
 (let (($x199 (not $x179)))
 (let (($x150 (not $x165)))
 (let (($x195 (or $x150 $x199)))
 (let (($x272 (and $x165 $x195)))
 (let ((?x184 (* (+ (- 9) r!1 ?x331 ?x332 ?x333 ?x275 ?x337 ?x339 ?x394 ?x383 ?x426 ?x431) (+ ?x443 ?x324 r00 ?x130 ?x89 ?x105))))
 (let ((?x35 (* 2 x00)))
 (let ((?x120 (* (- 1) r00)))
 (let (($x330 (= (+ r!1 (* (- 2) x!0) ?x120 (* (- 1) ?x130) ?x35 ?x36) 0)))
 (let (($x386 (and $x330 (or (not $x330) (not (= ?x184 0))))))
 (let (($x221 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x105 (* (- 1) ?x36)))
 (let ((?x89 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x68 (* (- 1) r)))
 (let ((?x439 (+ (- 9) r (* (- 1) x) (* (- 10) ?x30) (* 21 (* r x)) (* (- 11) (* x x)) (* (- 22) (* r x x)) (* (- 11) (* r r x x)) (* (- 22) (* r r r)) (* (- 11) (* r r r r)) (* 44 (* r r x)) (* 22 (* r r r x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x121 (* (- 1) ?x30)))
 (let ((?x120 (* (- 1) r00)))
 (let ((?x119 (* (- 2) x)))
 (let (($x123 (= (+ r ?x119 ?x120 ?x121 ?x35 ?x36) 0)))
 (let (($x217 (or (not $x123) (not (= (* ?x439 (+ ?x68 ?x32 r00 ?x30 ?x89 ?x105)) 0)))))
 (and $x123 $x217)))))))))))))) :qid k!27))
 ))
 (let (($x241 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x105 (* (- 1) ?x36)))
 (let ((?x89 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x349 (+ 1 r)))
 (let ((?x303 (* ?x349 ?x349)))
 (let ((?x262 (* (- 3) r)))
 (let ((?x391 (* (- 11) (* ?x349 ?x349 (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x409 (* (+ (- 9) (* (- 1) (* ?x349 (+ x (* (- 1) r)))) ?x391) (+ (- 1) ?x262 r00 ?x303 ?x32 ?x89 ?x105))))
 (let (($x410 (not (= ?x409 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x119 (* (- 2) x)))
 (let ((?x120 (* (- 1) r00)))
 (let (($x245 (not (= (+ (* 3 r) ?x120 (* (- 1) ?x303) ?x119 ?x35 ?x36) (- 1)))))
 (and (= (+ r ?x120 (* (- 1) (* r r)) ?x119 ?x35 ?x36) 0) (or $x245 $x410)))))))))))))))) :qid k!27))
 ))
 (let ((?x181 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x105 (* (- 1) ?x36)))
 (let ((?x89 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x68 (* (- 1) r)))
 (let ((?x439 (+ (- 9) r (* (- 1) x) (* (- 10) ?x30) (* 21 (* r x)) (* (- 11) (* x x)) (* (- 22) (* r x x)) (* (- 11) (* r r x x)) (* (- 22) (* r r r)) (* (- 11) (* r r r r)) (* 44 (* r r x)) (* 22 (* r r r x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x121 (* (- 1) ?x30)))
 (let ((?x120 (* (- 1) r00)))
 (let ((?x119 (* (- 2) x)))
 (let (($x123 (= (+ r ?x119 ?x120 ?x121 ?x35 ?x36) 0)))
 (let (($x217 (or (not $x123) (not (= (* ?x439 (+ ?x68 ?x32 r00 ?x30 ?x89 ?x105)) 0)))))
 (let (($x468 (and $x123 $x217)))
 (let ((?x349 (+ 1 r)))
 (let ((?x303 (* ?x349 ?x349)))
 (let ((?x262 (* (- 3) r)))
 (let ((?x400 (+ (- 9) (* (- 1) (* ?x349 (+ x ?x68))) (* (- 11) (* ?x349 ?x349 (+ x ?x68) (+ x ?x68))))))
 (let (($x410 (not (= (* ?x400 (+ (- 1) ?x262 r00 ?x303 ?x32 ?x89 ?x105)) 0))))
 (let (($x245 (not (= (+ (* 3 r) ?x120 (* (- 1) ?x303) ?x119 ?x35 ?x36) (- 1)))))
 (let (($x236 (and (= (+ r ?x120 ?x121 ?x119 ?x35 ?x36) 0) (or $x245 $x410))))
 (rewrite (= $x236 $x468))))))))))))))))))))))))
 ))
 (let (($x347 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x105 (* (- 1) ?x36)))
 (let ((?x89 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x349 (+ 1 r)))
 (let ((?x303 (* ?x349 ?x349)))
 (let ((?x262 (* (- 3) r)))
 (let ((?x391 (* (- 11) (* ?x349 ?x349 (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x409 (* (+ (- 9) (* (- 1) (* ?x349 (+ x (* (- 1) r)))) ?x391) (+ (- 1) ?x262 r00 ?x303 ?x32 ?x89 ?x105))))
 (let (($x410 (not (= ?x409 0))))
 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x89 ?x105) 0) (or (not (= (+ ?x262 r00 ?x303 ?x32 ?x89 ?x105) 1)) $x410)))))))))))) :qid k!27))
 ))
 (let ((?x234 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x105 (* (- 1) ?x36)))
 (let ((?x89 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x349 (+ 1 r)))
 (let ((?x303 (* ?x349 ?x349)))
 (let ((?x262 (* (- 3) r)))
 (let ((?x391 (* (- 11) (* ?x349 ?x349 (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x409 (* (+ (- 9) (* (- 1) (* ?x349 (+ x (* (- 1) r)))) ?x391) (+ (- 1) ?x262 r00 ?x303 ?x32 ?x89 ?x105))))
 (let (($x410 (not (= ?x409 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x119 (* (- 2) x)))
 (let ((?x120 (* (- 1) r00)))
 (let (($x245 (not (= (+ (* 3 r) ?x120 (* (- 1) ?x303) ?x119 ?x35 ?x36) (- 1)))))
 (let (($x236 (and (= (+ r ?x120 (* (- 1) (* r r)) ?x119 ?x35 ?x36) 0) (or $x245 $x410))))
 (let (($x413 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x89 ?x105) 0) (or (not (= (+ ?x262 r00 ?x303 ?x32 ?x89 ?x105) 1)) $x410))))
 (rewrite (= $x413 $x236)))))))))))))))))))
 ))
 (let (($x63 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let ((?x48 (- (- ?x46 ?x35) ?x36)))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x58 (* (- (- (- 9) (* ?x41 ?x44)) (* 11 ?x41 ?x41 ?x44 ?x44)) ?x48)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x48 0)) (not (= ?x58 0)))))))))))) :qid k!27))
 ))
 (let ((?x350 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x105 (* (- 1) ?x36)))
 (let ((?x89 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x349 (+ 1 r)))
 (let ((?x303 (* ?x349 ?x349)))
 (let ((?x262 (* (- 3) r)))
 (let ((?x391 (* (- 11) (* ?x349 ?x349 (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x409 (* (+ (- 9) (* (- 1) (* ?x349 (+ x (* (- 1) r)))) ?x391) (+ (- 1) ?x262 r00 ?x303 ?x32 ?x89 ?x105))))
 (let (($x410 (not (= ?x409 0))))
 (let (($x413 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x89 ?x105) 0) (or (not (= (+ ?x262 r00 ?x303 ?x32 ?x89 ?x105) 1)) $x410))))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let ((?x48 (- (- ?x46 ?x35) ?x36)))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x58 (* (- (- (- 9) (* ?x41 ?x44)) (* 11 ?x41 ?x41 ?x44 ?x44)) ?x48)))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x62 (and $x40 (or (not (= ?x48 0)) (not (= ?x58 0))))))
 (rewrite (= $x62 $x413))))))))))))))))))))))
 ))
 (let ((@x64 (asserted $x63)))
 (let ((@x283 (mp (mp @x64 (quant-intro (proof-bind ?x350) (= $x63 $x347)) $x347) (rewrite (= $x347 $x347)) $x347)))
 (let ((@x74 (mp (mp @x283 (quant-intro (proof-bind ?x234) (= $x347 $x241)) $x241) (quant-intro (proof-bind ?x181) (= $x241 $x221)) $x221)))
 (let ((@x170 (mp (mp~ @x74 (sk (~ $x221 $x386)) $x386) (rewrite (= $x386 $x272)) $x272)))
 (let ((@x270 (and-elim @x170 $x165)))
 (let ((@x264 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x150 $x238)) @x270 $x238)))
 (let (($x239 (>= ?x149 0)))
 (let ((@x167 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x150 $x239)) @x270 $x239)))
 (let (($x345 (not (>= ?x197 0))))
 (let (($x240 (<= ?x197 0)))
 (let ((@x315 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x179 (not $x240) $x345)) (unit-resolution (and-elim @x170 $x195) @x270 $x199) (or (not $x240) $x345))))
 (let ((@x309 (unit-resolution @x315 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x240)) @x167 @x264 false) $x240) $x345)))
 ((_ th-lemma arith farkas 1 1 1) @x309 @x167 @x264 false))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 27
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.50
 :memory                    3.10
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1061201
 :num-checks                1
 :propagations              4
 :rlimit-count              1671
 :time                      0.01
 :total-time                0.01)
