unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x190 (* 2 x!0)))
 (let ((?x255 (* r!1 r!1)))
 (let ((?x189 (* (- 1) r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x108 (* (- 1) ?x36)))
 (let ((?x92 (* (- 2) x00)))
 (let ((?x188 (+ r00 ?x92 ?x108 ?x189 ?x255 ?x190)))
 (let (($x300 (<= ?x188 0)))
 (let (($x180 (= ?x188 0)))
 (let ((?x146 (* (- 14) x!0)))
 (let ((?x228 (* 20 ?x255)))
 (let ((?x186 (* 8 (* r!1 r!1 r!1))))
 (let ((?x102 (* 4 r!1)))
 (let ((?x170 (* (- 8) (* r!1 r!1 x!0))))
 (let ((?x182 (* (- 20) (* r!1 x!0))))
 (let ((?x289 (* (+ (- 10) ?x182 ?x170 ?x102 ?x186 ?x228 ?x146) ?x188)))
 (let (($x166 (= ?x289 0)))
 (let (($x290 (not $x166)))
 (let (($x143 (not $x180)))
 (let (($x168 (or $x143 $x290)))
 (let (($x358 (and $x180 $x168)))
 (let ((?x191 (* (+ (- 10) ?x102 ?x146 ?x228 ?x182 ?x170 ?x186) (+ ?x189 ?x190 r00 ?x255 ?x92 ?x108))))
 (let ((?x35 (* 2 x00)))
 (let ((?x123 (* (- 1) r00)))
 (let (($x283 (= (+ r!1 (* (- 2) x!0) ?x123 (* (- 1) ?x255) ?x35 ?x36) 0)))
 (let (($x200 (and $x283 (or (not $x283) (not (= ?x191 0))))))
 (let (($x224 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x108 (* (- 1) ?x36)))
 (let ((?x92 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x71 (* (- 1) r)))
 (let ((?x443 (+ (- 10) (* 4 r) (* (- 14) x) (* 20 ?x30) (* (- 20) (* r x)) (* (- 8) (* r r x)) (* 8 (* r r r)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x124 (* (- 1) ?x30)))
 (let ((?x123 (* (- 1) r00)))
 (let ((?x122 (* (- 2) x)))
 (let (($x126 (= (+ r ?x122 ?x123 ?x124 ?x35 ?x36) 0)))
 (let (($x220 (or (not $x126) (not (= (* ?x443 (+ ?x71 ?x32 r00 ?x30 ?x92 ?x108)) 0)))))
 (and $x126 $x220)))))))))))))) :qid k!27))
 ))
 (let (($x196 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x108 (* (- 1) ?x36)))
 (let ((?x92 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x236 (+ 1 r)))
 (let ((?x199 (* ?x236 ?x236)))
 (let ((?x154 (* (- 3) r)))
 (let ((?x122 (* (- 2) x)))
 (let ((?x393 (+ (- 10) (* (- 8) r) (* (- 4) (* ?x236 (+ x (* (- 1) r)))) (* (- 8) (* ?x236 ?x236 (+ x (* (- 1) r)))) ?x122)))
 (let (($x428 (not (= (* ?x393 (+ (- 1) ?x154 r00 ?x199 ?x32 ?x92 ?x108)) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x123 (* (- 1) r00)))
 (let (($x77 (not (= (+ (* 3 r) ?x123 (* (- 1) ?x199) ?x122 ?x35 ?x36) (- 1)))))
 (and (= (+ r ?x123 (* (- 1) (* r r)) ?x122 ?x35 ?x36) 0) (or $x77 $x428))))))))))))))) :qid k!27))
 ))
 (let ((?x257 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x108 (* (- 1) ?x36)))
 (let ((?x92 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x71 (* (- 1) r)))
 (let ((?x443 (+ (- 10) (* 4 r) (* (- 14) x) (* 20 ?x30) (* (- 20) (* r x)) (* (- 8) (* r r x)) (* 8 (* r r r)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x124 (* (- 1) ?x30)))
 (let ((?x123 (* (- 1) r00)))
 (let ((?x122 (* (- 2) x)))
 (let (($x126 (= (+ r ?x122 ?x123 ?x124 ?x35 ?x36) 0)))
 (let (($x220 (or (not $x126) (not (= (* ?x443 (+ ?x71 ?x32 r00 ?x30 ?x92 ?x108)) 0)))))
 (let (($x473 (and $x126 $x220)))
 (let ((?x236 (+ 1 r)))
 (let ((?x199 (* ?x236 ?x236)))
 (let ((?x154 (* (- 3) r)))
 (let ((?x393 (+ (- 10) (* (- 8) r) (* (- 4) (* ?x236 (+ x ?x71))) (* (- 8) (* ?x236 ?x236 (+ x ?x71))) ?x122)))
 (let (($x428 (not (= (* ?x393 (+ (- 1) ?x154 r00 ?x199 ?x32 ?x92 ?x108)) 0))))
 (let (($x77 (not (= (+ (* 3 r) ?x123 (* (- 1) ?x199) ?x122 ?x35 ?x36) (- 1)))))
 (let (($x330 (and (= (+ r ?x123 ?x124 ?x122 ?x35 ?x36) 0) (or $x77 $x428))))
 (rewrite (= $x330 $x473))))))))))))))))))))))))
 ))
 (let (($x82 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x108 (* (- 1) ?x36)))
 (let ((?x92 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x236 (+ 1 r)))
 (let ((?x199 (* ?x236 ?x236)))
 (let ((?x154 (* (- 3) r)))
 (let ((?x122 (* (- 2) x)))
 (let ((?x393 (+ (- 10) (* (- 8) r) (* (- 4) (* ?x236 (+ x (* (- 1) r)))) (* (- 8) (* ?x236 ?x236 (+ x (* (- 1) r)))) ?x122)))
 (let (($x428 (not (= (* ?x393 (+ (- 1) ?x154 r00 ?x199 ?x32 ?x92 ?x108)) 0))))
 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x92 ?x108) 0) (or (not (= (+ ?x154 r00 ?x199 ?x32 ?x92 ?x108) 1)) $x428)))))))))))) :qid k!27))
 ))
 (let ((?x356 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x108 (* (- 1) ?x36)))
 (let ((?x92 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x236 (+ 1 r)))
 (let ((?x199 (* ?x236 ?x236)))
 (let ((?x154 (* (- 3) r)))
 (let ((?x122 (* (- 2) x)))
 (let ((?x393 (+ (- 10) (* (- 8) r) (* (- 4) (* ?x236 (+ x (* (- 1) r)))) (* (- 8) (* ?x236 ?x236 (+ x (* (- 1) r)))) ?x122)))
 (let (($x428 (not (= (* ?x393 (+ (- 1) ?x154 r00 ?x199 ?x32 ?x92 ?x108)) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x123 (* (- 1) r00)))
 (let (($x77 (not (= (+ (* 3 r) ?x123 (* (- 1) ?x199) ?x122 ?x35 ?x36) (- 1)))))
 (let (($x330 (and (= (+ r ?x123 (* (- 1) (* r r)) ?x122 ?x35 ?x36) 0) (or $x77 $x428))))
 (let (($x430 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x92 ?x108) 0) (or (not (= (+ ?x154 r00 ?x199 ?x32 ?x92 ?x108) 1)) $x428))))
 (rewrite (= $x430 $x330))))))))))))))))))
 ))
 (let (($x66 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x44 (- x r)))
 (let ((?x45 (* 2 ?x44)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) ?x45)))
 (let ((?x48 (- (- ?x46 ?x35) ?x36)))
 (let ((?x59 (- (- (* (- 10) (+ r 1)) (* 4 (+ r 1) ?x44)) (* 8 (+ r 1) (+ r 1) ?x44))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x48 0)) (not (= (* (- ?x59 ?x45) ?x48) 0)))))))))))) :qid k!27))
 ))
 (let ((?x209 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x108 (* (- 1) ?x36)))
 (let ((?x92 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x236 (+ 1 r)))
 (let ((?x199 (* ?x236 ?x236)))
 (let ((?x154 (* (- 3) r)))
 (let ((?x122 (* (- 2) x)))
 (let ((?x393 (+ (- 10) (* (- 8) r) (* (- 4) (* ?x236 (+ x (* (- 1) r)))) (* (- 8) (* ?x236 ?x236 (+ x (* (- 1) r)))) ?x122)))
 (let (($x428 (not (= (* ?x393 (+ (- 1) ?x154 r00 ?x199 ?x32 ?x92 ?x108)) 0))))
 (let (($x430 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x92 ?x108) 0) (or (not (= (+ ?x154 r00 ?x199 ?x32 ?x92 ?x108) 1)) $x428))))
 (let ((?x35 (* 2 x00)))
 (let ((?x44 (- x r)))
 (let ((?x45 (* 2 ?x44)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) ?x45)))
 (let ((?x48 (- (- ?x46 ?x35) ?x36)))
 (let ((?x59 (- (- (* (- 10) (+ r 1)) (* 4 (+ r 1) ?x44)) (* 8 (+ r 1) (+ r 1) ?x44))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x65 (and $x40 (or (not (= ?x48 0)) (not (= (* (- ?x59 ?x45) ?x48) 0))))))
 (rewrite (= $x65 $x430))))))))))))))))))))))
 ))
 (let ((@x67 (asserted $x66)))
 (let ((@x141 (mp (mp @x67 (quant-intro (proof-bind ?x209) (= $x66 $x82)) $x82) (rewrite (= $x82 $x82)) $x82)))
 (let ((@x264 (mp (mp @x141 (quant-intro (proof-bind ?x356) (= $x82 $x196)) $x196) (quant-intro (proof-bind ?x257) (= $x196 $x224)) $x224)))
 (let ((@x165 (mp (mp~ @x264 (sk (~ $x224 $x200)) $x200) (rewrite (= $x200 $x358)) $x358)))
 (let ((@x321 (and-elim @x165 $x180)))
 (let ((@x373 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x143 $x300)) @x321 $x300)))
 (let (($x301 (>= ?x188 0)))
 (let ((@x142 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x143 $x301)) @x321 $x301)))
 (let (($x116 (not (>= ?x289 0))))
 (let (($x303 (<= ?x289 0)))
 (let ((@x297 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x166 (not $x303) $x116)) (unit-resolution (and-elim @x165 $x168) @x321 $x290) (or (not $x303) $x116))))
 (let ((@x294 (unit-resolution @x297 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x303)) @x142 @x373 false) $x303) $x116)))
 ((_ th-lemma arith farkas 1 1 1) @x294 @x142 @x373 false))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 22
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.47
 :memory                    3.06
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1037830
 :num-checks                1
 :propagations              4
 :rlimit-count              1441
 :time                      0.01
 :total-time                0.02)
