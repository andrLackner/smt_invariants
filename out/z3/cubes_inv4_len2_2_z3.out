unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let (($x942 (<= m!1 13)))
 (let ((?x191 (* (- 2) n!0)))
 (let ((?x208 (* k!2 n!0)))
 (let ((?x184 (* (- 1) ?x208)))
 (let ((?x179 (* 3 c!3)))
 (let ((?x391 (+ ?x179 ?x184 k!2 ?x191)))
 (let (($x424 (<= ?x391 0)))
 (let (($x484 (= ?x391 0)))
 (let ((?x215 (* (- 1) m!1)))
 (let ((?x121 (+ (* 6 n!0) ?x215)))
 (let (($x324 (= ?x121 (- 6))))
 (let (($x534 (not $x324)))
 (let ((?x214 (* 9 n!0)))
 (let ((?x226 (* (- 1) k!2)))
 (let ((?x244 (* n!0 n!0)))
 (let ((?x138 (* 3 ?x244)))
 (let ((?x202 (* 10 (* k!2 k!2 m!1))))
 (let ((?x345 (* 10 (* k!2 m!1 m!1))))
 (let ((?x449 (* 10 (* c!3 m!1 m!1))))
 (let ((?x416 (* 60 (* k!2 k!2 n!0))))
 (let ((?x414 (* 10 (* c!3 k!2 m!1))))
 (let ((?x386 (* k!2 k!2)))
 (let ((?x503 (* 60 ?x386)))
 (let ((?x245 (* 64 (* c!3 m!1))))
 (let ((?x633 (* 24 k!2)))
 (let ((?x477 (* 60 (* c!3 k!2 n!0))))
 (let ((?x195 (* k!2 m!1)))
 (let ((?x382 (* 64 ?x195)))
 (let ((?x378 (* 60 (* c!3 k!2))))
 (let ((?x319 (* 24 c!3)))
 (let ((?x429 (+ ?x319 ?x378 (* 10 (* k!2 n!0 m!1 m!1)) (* 60 (* c!3 n!0 m!1)) ?x382 ?x477 (* 60 (* k!2 n!0 m!1)) (* 10 (* c!3 k!2 n!0 m!1)) (* 10 (* k!2 k!2 n!0 m!1)) (* 10 (* c!3 n!0 m!1 m!1)) ?x633 ?x245 ?x503 ?x414 ?x416 ?x449 ?x345 ?x202)))
 (let ((?x212 (* 3 k!2)))
 (let ((?x465 (+ ?x179 (* (- 1) (* n!0 m!1)) ?x184 ?x212 ?x191)))
 (let ((?x524 (* c!3 n!0)))
 (let ((?x526 (* 9 ?x524)))
 (let ((?x384 (* 5 m!1)))
 (let ((?x293 (* (- 1) ?x386)))
 (let ((?x346 (* (- 9) n!0)))
 (let ((?x349 (* 32 k!2)))
 (let ((?x482 (* (- 1) (* m!1 m!1))))
 (let ((?x422 (* 9 ?x208)))
 (let ((?x305 (* (- 2) ?x195)))
 (let ((?x156 (* 27 c!3)))
 (let (($x436 (or (not (= (+ ?x156 ?x305 ?x422 ?x482 ?x349 ?x346 ?x293 ?x384 ?x526) 13)) (not (= ?x465 2)) (not (= (+ ?x138 ?x226 ?x214 ?x215) (- 6))) (not (= (* ?x429 (+ 6 ?x138 ?x226 ?x214 ?x215)) 0)) $x534)))
 (let ((?x249 (+ ?x138 ?x226 (* 3 n!0))))
 (let (($x250 (= ?x249 0)))
 (let ((?x516 (+ (* 18 c!3) (* 5 k!2) ?x346 ?x293 ?x526)))
 (let (($x555 (= ?x516 4)))
 (let (($x507 (and $x324 $x555 $x484 $x250 $x436)))
 (let ((?x227 (+ ?x319 ?x633 ?x503 ?x414 ?x416 ?x202 ?x477 ?x378 ?x449 (* 60 (* k!2 m!1 n!0)) ?x345 ?x382 (* 10 (* c!3 k!2 m!1 n!0)) (* 10 (* k!2 k!2 m!1 n!0)) (* 10 (* c!3 m!1 m!1 n!0)) (* 10 (* k!2 m!1 m!1 n!0)) ?x245 (* 60 (* c!3 m!1 n!0)))))
 (let (($x278 (or (not (= (* ?x227 (+ 6 ?x226 ?x215 ?x214 ?x138)) 0)) (not (= (+ m!1 (* (- 6) n!0)) 6)) (not (= (+ k!2 m!1 ?x346 (* (- 3) ?x244)) 6)) (not (= (+ ?x156 ?x349 ?x384 ?x346 ?x293 ?x422 ?x526 ?x305 ?x482) 13)) (not (= (+ ?x179 ?x212 ?x191 ?x184 (* (- 1) (* m!1 n!0))) 2)))))
 (let (($x458 (= (+ m!1 (* (- 6) n!0)) 6)))
 (let (($x286 (and $x458 $x555 (= (+ ?x179 k!2 ?x191 ?x184) 0) (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x244)) 0) $x278)))
 (let (($x498 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x52 (* k n)))
 (let ((?x263 (* (- 1) ?x52)))
 (let ((?x262 (* (- 2) n)))
 (let ((?x260 (* 3 c)))
 (let (($x545 (= (+ ?x260 (* 3 k) ?x262 ?x263 (* (- 1) (* m n))) 2)))
 (let (($x553 (not $x545)))
 (let ((?x160 (* 9 (* c n))))
 (let ((?x46 (* k k)))
 (let ((?x223 (* (- 1) ?x46)))
 (let ((?x222 (* (- 9) n)))
 (let ((?x435 (* 5 m)))
 (let ((?x523 (+ (* 27 c) (* 32 k) ?x435 ?x222 ?x223 (* 9 ?x52) ?x160 (* (- 2) (* k m)) (* (- 1) (* m m)))))
 (let (($x527 (not (= ?x523 13))))
 (let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x361 (not $x143)))
 (let ((?x270 (* n n)))
 (let ((?x271 (* 3 ?x270)))
 (let ((?x45 (* 9 n)))
 (let ((?x476 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let ((?x611 (* 10 (* k m m n))))
 (let ((?x609 (* 10 (* c m m n))))
 (let ((?x607 (* 10 (* k k m n))))
 (let ((?x605 (* 10 (* c k m n))))
 (let ((?x426 (+ (* 24 c) (* 24 k) (* 60 ?x46) (* 10 (* c k m)) (* 60 (* k k n)) (* 10 (* k k m)) (* 60 (* c k n)) (* 60 (* c k)) (* 10 (* c m m)) (* 60 (* k m n)) (* 10 (* k m m)) (* 64 (* k m)) ?x605 ?x607 ?x609 ?x611 (* 64 (* c m)) (* 60 (* c m n)))))
 (let (($x127 (or (not (= (* ?x426 (+ 6 ?x238 ?x476 ?x45 ?x271)) 0)) $x361 (not (= (+ k m ?x222 (* (- 3) ?x270)) 6)) $x527 $x553)))
 (let (($x301 (= (+ k (* (- 3) n) (* (- 3) ?x270)) 0)))
 (let (($x265 (= (+ ?x260 k ?x262 ?x263) 0)))
 (let (($x220 (= (+ (* 18 c) (* 5 k) ?x222 ?x223 ?x160) 4)))
 (and $x143 $x220 $x265 $x301 $x127)))))))))))))))))))))))))))))) :qid k!38))
 ))
 (let (($x283 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x361 (not $x143)))
 (let ((?x222 (* (- 9) n)))
 (let ((?x435 (* 5 m)))
 (let ((?x37 (* 18 c)))
 (let ((?x551 (+ ?x37 (* 23 k) (* 9 (* (+ 1 n) (+ c k))) ?x435 ?x222 (* (- 1) (* (+ k m) (+ k m))))))
 (let ((?x61 (* 3 n)))
 (let ((?x476 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let ((?x509 (* 3 (* (+ 1 n) (+ 1 n)))))
 (let (($x285 (not (= (+ ?x509 ?x238 ?x476 ?x61) (- 3)))))
 (let ((?x287 (* 10 (* (+ 1 n) (+ 6 m) (+ k m) (+ c k)))))
 (let ((?x302 (* (+ ?x287 (* 4 (* (+ 6 m) (+ c k)))) (+ 3 ?x509 ?x238 ?x476 ?x61))))
 (let (($x237 (not (= ?x302 0))))
 (let ((?x262 (* (- 2) n)))
 (let ((?x260 (* 3 c)))
 (let ((?x562 (+ ?x260 (* 4 k) (* (- 1) (* (+ 1 n) (+ k m))) m ?x262)))
 (let (($x514 (= (+ (* 3 (* n n)) ?x238 ?x61) 0)))
 (let ((?x46 (* k k)))
 (let ((?x223 (* (- 1) ?x46)))
 (let ((?x41 (* 5 k)))
 (and $x143 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x222 ?x223) 4) (= (+ ?x260 (* (- 1) (* n k)) k ?x262) 0) $x514 (or (not (= ?x562 2)) $x237 $x285 (not (= ?x551 13)) $x361))))))))))))))))))))))) :qid k!38))
 ))
 (let ((?x552 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x52 (* k n)))
 (let ((?x263 (* (- 1) ?x52)))
 (let ((?x262 (* (- 2) n)))
 (let ((?x260 (* 3 c)))
 (let (($x545 (= (+ ?x260 (* 3 k) ?x262 ?x263 (* (- 1) (* m n))) 2)))
 (let (($x553 (not $x545)))
 (let ((?x160 (* 9 (* c n))))
 (let ((?x46 (* k k)))
 (let ((?x223 (* (- 1) ?x46)))
 (let ((?x222 (* (- 9) n)))
 (let ((?x435 (* 5 m)))
 (let ((?x523 (+ (* 27 c) (* 32 k) ?x435 ?x222 ?x223 (* 9 ?x52) ?x160 (* (- 2) (* k m)) (* (- 1) (* m m)))))
 (let (($x527 (not (= ?x523 13))))
 (let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x361 (not $x143)))
 (let ((?x270 (* n n)))
 (let ((?x271 (* 3 ?x270)))
 (let ((?x45 (* 9 n)))
 (let ((?x476 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let ((?x611 (* 10 (* k m m n))))
 (let ((?x609 (* 10 (* c m m n))))
 (let ((?x607 (* 10 (* k k m n))))
 (let ((?x605 (* 10 (* c k m n))))
 (let ((?x426 (+ (* 24 c) (* 24 k) (* 60 ?x46) (* 10 (* c k m)) (* 60 (* k k n)) (* 10 (* k k m)) (* 60 (* c k n)) (* 60 (* c k)) (* 10 (* c m m)) (* 60 (* k m n)) (* 10 (* k m m)) (* 64 (* k m)) ?x605 ?x607 ?x609 ?x611 (* 64 (* c m)) (* 60 (* c m n)))))
 (let (($x127 (or (not (= (* ?x426 (+ 6 ?x238 ?x476 ?x45 ?x271)) 0)) $x361 (not (= (+ k m ?x222 (* (- 3) ?x270)) 6)) $x527 $x553)))
 (let (($x301 (= (+ k (* (- 3) n) (* (- 3) ?x270)) 0)))
 (let (($x265 (= (+ ?x260 k ?x262 ?x263) 0)))
 (let (($x220 (= (+ (* 18 c) (* 5 k) ?x222 ?x223 ?x160) 4)))
 (let (($x116 (and $x143 $x220 $x265 $x301 $x127)))
 (let ((?x37 (* 18 c)))
 (let ((?x551 (+ ?x37 (* 23 k) (* 9 (* (+ 1 n) (+ c k))) ?x435 ?x222 (* (- 1) (* (+ k m) (+ k m))))))
 (let ((?x61 (* 3 n)))
 (let ((?x509 (* 3 (* (+ 1 n) (+ 1 n)))))
 (let (($x285 (not (= (+ ?x509 ?x238 ?x476 ?x61) (- 3)))))
 (let ((?x287 (* 10 (* (+ 1 n) (+ 6 m) (+ k m) (+ c k)))))
 (let ((?x302 (* (+ ?x287 (* 4 (* (+ 6 m) (+ c k)))) (+ 3 ?x509 ?x238 ?x476 ?x61))))
 (let (($x237 (not (= ?x302 0))))
 (let ((?x562 (+ ?x260 (* 4 k) (* (- 1) (* (+ 1 n) (+ k m))) m ?x262)))
 (let (($x514 (= (+ ?x271 ?x238 ?x61) 0)))
 (let (($x173 (= (+ ?x37 (* 9 (* n c)) (* 5 k) ?x222 ?x223) 4)))
 (let (($x351 (and $x143 $x173 (= (+ ?x260 (* (- 1) (* n k)) k ?x262) 0) $x514 (or (not (= ?x562 2)) $x237 $x285 (not (= ?x551 13)) $x361))))
 (rewrite (= $x351 $x116)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x393 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x361 (not $x143)))
 (let ((?x74 (+ k m)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x459 (* (- 18) c)))
 (let ((?x183 (+ ?x459 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) (* (- 5) m) ?x45 ?x80)))
 (let ((?x61 (* 3 n)))
 (let ((?x476 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let ((?x509 (* 3 (* (+ 1 n) (+ 1 n)))))
 (let (($x285 (not (= (+ ?x509 ?x238 ?x476 ?x61) (- 3)))))
 (let ((?x56 (* 2 n)))
 (let ((?x439 (+ 1 n)))
 (let ((?x480 (* ?x439 ?x74)))
 (let ((?x318 (* (- 3) c)))
 (let ((?x235 (+ (* 10 (* ?x439 (+ 6 m) ?x74 (+ c k))) (* 4 (* (+ 6 m) (+ c k))))))
 (let (($x237 (not (= (* ?x235 (+ 3 ?x509 ?x238 ?x476 ?x61)) 0))))
 (let (($x295 (or $x237 (not (= (+ ?x318 (* (- 4) k) ?x480 ?x476 ?x56) (- 2))) $x285 (not (= ?x183 (- 13))) $x361)))
 (let (($x514 (= (+ (* 3 (* n n)) ?x238 ?x61) 0)))
 (let (($x367 (= (+ ?x459 (* (- 9) (* n c)) (* (- 5) k) ?x45 (* k k)) (- 4))))
 (and $x143 $x367 (= (+ ?x318 (* n k) ?x238 ?x56) 0) $x514 $x295)))))))))))))))))))))) :qid k!38))
 ))
 (let ((?x627 (lambda ((c Int) (k Int) (m Int) (n Int) )(let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x361 (not $x143)))
 (let ((?x222 (* (- 9) n)))
 (let ((?x435 (* 5 m)))
 (let ((?x37 (* 18 c)))
 (let ((?x551 (+ ?x37 (* 23 k) (* 9 (* (+ 1 n) (+ c k))) ?x435 ?x222 (* (- 1) (* (+ k m) (+ k m))))))
 (let ((?x61 (* 3 n)))
 (let ((?x476 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let ((?x509 (* 3 (* (+ 1 n) (+ 1 n)))))
 (let (($x285 (not (= (+ ?x509 ?x238 ?x476 ?x61) (- 3)))))
 (let ((?x287 (* 10 (* (+ 1 n) (+ 6 m) (+ k m) (+ c k)))))
 (let ((?x302 (* (+ ?x287 (* 4 (* (+ 6 m) (+ c k)))) (+ 3 ?x509 ?x238 ?x476 ?x61))))
 (let (($x237 (not (= ?x302 0))))
 (let ((?x262 (* (- 2) n)))
 (let ((?x260 (* 3 c)))
 (let ((?x562 (+ ?x260 (* 4 k) (* (- 1) (* (+ 1 n) (+ k m))) m ?x262)))
 (let (($x514 (= (+ (* 3 (* n n)) ?x238 ?x61) 0)))
 (let ((?x46 (* k k)))
 (let ((?x223 (* (- 1) ?x46)))
 (let ((?x41 (* 5 k)))
 (let (($x351 (and $x143 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x222 ?x223) 4) (= (+ ?x260 (* (- 1) (* n k)) k ?x262) 0) $x514 (or (not (= ?x562 2)) $x237 $x285 (not (= ?x551 13)) $x361))))
 (let ((?x74 (+ k m)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x459 (* (- 18) c)))
 (let ((?x183 (+ ?x459 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) (* (- 5) m) ?x45 ?x80)))
 (let ((?x56 (* 2 n)))
 (let ((?x439 (+ 1 n)))
 (let ((?x480 (* ?x439 ?x74)))
 (let ((?x318 (* (- 3) c)))
 (let (($x295 (or $x237 (not (= (+ ?x318 (* (- 4) k) ?x480 ?x476 ?x56) (- 2))) $x285 (not (= ?x183 (- 13))) $x361)))
 (let (($x367 (= (+ ?x459 (* (- 9) (* n c)) (* (- 5) k) ?x45 ?x46) (- 4))))
 (let (($x289 (and $x143 $x367 (= (+ ?x318 (* n k) ?x238 ?x56) 0) $x514 $x295)))
 (rewrite (= $x289 $x351)))))))))))))))))))))))))))))))))))))
 ))
 (let (($x108 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x66 (+ n 1)))
 (let ((?x99 (+ m 6)))
 (let ((?x74 (+ k m)))
 (let ((?x71 (+ c k)))
 (let ((?x95 (+ (- (* 3 ?x66 ?x66) ?x74) (* 3 ?x66))))
 (let (($x104 (= (* ?x95 (+ (* 10 ?x71 ?x74 ?x99 ?x66) (* 4 ?x71 ?x99))) 0)))
 (let (($x90 (= (+ (- (+ (* (- 3) ?x71) (* ?x74 ?x66)) ?x74) (* 2 ?x66)) 0)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x78 (- (- (- 4 (* 18 ?x71)) (* 9 ?x71 ?x66)) (* 5 ?x74))))
 (let (($x106 (or (not (= (- (+ (- 6) m 6) (* 6 ?x66)) 0)) (not (= (+ ?x78 (* 9 ?x66) ?x80) 0)) (not $x90) (not (= ?x95 0)) (not $x104))))
 (let (($x58 (= (+ (- (+ (* (- 3) c) (* k n)) k) (* 2 n)) 0)))
 (let ((?x46 (* k k)))
 (let ((?x45 (* 9 n)))
 (let ((?x41 (* 5 k)))
 (let ((?x47 (+ (- (- (- 4 (* 18 c)) (* 9 c n)) ?x41) ?x45 ?x46)))
 (and (= (- (+ (- 6) m) (* 6 n)) 0) (= ?x47 0) $x58 (= (+ (- (* 3 n n) k) (* 3 n)) 0) $x106)))))))))))))))) :qid k!38))
 ))
 (let ((?x396 (lambda ((c Int) (k Int) (m Int) (n Int) )(let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x361 (not $x143)))
 (let ((?x74 (+ k m)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x459 (* (- 18) c)))
 (let ((?x183 (+ ?x459 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) (* (- 5) m) ?x45 ?x80)))
 (let ((?x61 (* 3 n)))
 (let ((?x476 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let ((?x509 (* 3 (* (+ 1 n) (+ 1 n)))))
 (let (($x285 (not (= (+ ?x509 ?x238 ?x476 ?x61) (- 3)))))
 (let ((?x56 (* 2 n)))
 (let ((?x439 (+ 1 n)))
 (let ((?x480 (* ?x439 ?x74)))
 (let ((?x318 (* (- 3) c)))
 (let ((?x235 (+ (* 10 (* ?x439 (+ 6 m) ?x74 (+ c k))) (* 4 (* (+ 6 m) (+ c k))))))
 (let (($x237 (not (= (* ?x235 (+ 3 ?x509 ?x238 ?x476 ?x61)) 0))))
 (let (($x295 (or $x237 (not (= (+ ?x318 (* (- 4) k) ?x480 ?x476 ?x56) (- 2))) $x285 (not (= ?x183 (- 13))) $x361)))
 (let (($x514 (= (+ (* 3 (* n n)) ?x238 ?x61) 0)))
 (let (($x367 (= (+ ?x459 (* (- 9) (* n c)) (* (- 5) k) ?x45 (* k k)) (- 4))))
 (let (($x289 (and $x143 $x367 (= (+ ?x318 (* n k) ?x238 ?x56) 0) $x514 $x295)))
 (let ((?x102 (+ (* 10 (+ c k) ?x74 (+ m 6) (+ n 1)) (* 4 (+ c k) (+ m 6)))))
 (let ((?x95 (+ (- (* 3 (+ n 1) (+ n 1)) ?x74) (* 3 (+ n 1)))))
 (let ((?x89 (+ (- (+ (* (- 3) (+ c k)) (* ?x74 (+ n 1))) ?x74) (* 2 (+ n 1)))))
 (let ((?x77 (- (- 4 (* 18 (+ c k))) (* 9 (+ c k) (+ n 1)))))
 (let (($x82 (= (+ (- ?x77 (* 5 ?x74)) (* 9 (+ n 1)) ?x80) 0)))
 (let (($x70 (not (= (- (+ (- 6) m 6) (* 6 (+ n 1))) 0))))
 (let (($x106 (or $x70 (not $x82) (not (= ?x89 0)) (not (= ?x95 0)) (not (= (* ?x95 ?x102) 0)))))
 (let ((?x46 (* k k)))
 (let ((?x41 (* 5 k)))
 (let ((?x47 (+ (- (- (- 4 (* 18 c)) (* 9 c n)) ?x41) ?x45 ?x46)))
 (let (($x107 (and (= (- (+ (- 6) m) (* 6 n)) 0) (= ?x47 0) (= (+ (- (+ (* (- 3) c) (* k n)) k) ?x56) 0) (= (+ (- (* 3 n n) k) ?x61) 0) $x106)))
 (rewrite (= $x107 $x289))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x109 (asserted $x108)))
 (let ((@x474 (mp (mp @x109 (quant-intro (proof-bind ?x396) (= $x108 $x393)) $x393) (rewrite (= $x393 $x393)) $x393)))
 (let ((@x479 (mp (mp @x474 (quant-intro (proof-bind ?x627) (= $x393 $x283)) $x283) (quant-intro (proof-bind ?x552) (= $x283 $x498)) $x498)))
 (let ((@x309 (mp (mp~ @x479 (sk (~ $x498 $x286)) $x286) (rewrite (= $x286 $x507)) $x507)))
 (let ((@x155 (and-elim @x309 $x484)))
 (let ((@x401 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x484) $x424)) @x155 $x424)))
 (let (($x340 (>= ?x391 0)))
 (let ((@x406 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x484) $x340)) @x155 $x340)))
 (let (($x371 (<= ?x516 4)))
 (let ((@x269 (and-elim @x309 $x555)))
 (let ((@x190 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x555) $x371)) @x269 $x371)))
 (let (($x491 (>= ?x516 4)))
 (let ((@x387 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x555) $x491)) @x269 $x491)))
 (let ((?x185 (+ ?x138 ?x226 ?x214 ?x215)))
 (let (($x229 (<= ?x185 (- 6))))
 (let (($x403 (<= ?x121 (- 6))))
 (let ((@x151 (and-elim @x309 $x324)))
 (let ((@x117 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x534 $x403)) @x151 $x403)))
 (let (($x538 (<= ?x249 0)))
 (let ((@x481 (and-elim @x309 $x250)))
 (let ((@x570 (unit-resolution ((_ th-lemma arith assign-bounds 1 1) (or $x229 (not $x538) (not $x403))) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x250) $x538)) @x481 $x538) @x117 $x229)))
 (let (($x370 (>= ?x185 (- 6))))
 (let (($x188 (>= ?x249 0)))
 (let (($x463 (>= ?x121 (- 6))))
 (let ((@x242 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x534 $x463)) @x151 $x463)))
 (let ((@x251 ((_ th-lemma arith farkas -1 1 1) (hypothesis (not $x370)) @x242 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x250) $x188)) @x481 $x188) false)))
 (let ((@x254 (lemma @x251 $x370)))
 (let ((@x739 ((_ th-lemma arith) @x242 (hypothesis (not $x942)) @x242 @x117 @x254 @x570 @x387 @x190 @x406 @x401 false)))
 (let (($x207 (<= m!1 12)))
 (let (($x815 (not $x207)))
 (let (($x423 (<= n!0 0)))
 (let (($x722 (not $x423)))
 (let (($x492 (>= n!0 0)))
 (let (($x230 (>= ?x465 2)))
 (let (($x437 (not $x230)))
 (let (($x164 (<= ?x465 2)))
 (let ((@x612 ((_ th-lemma arith) (hypothesis (not $x164)) @x242 @x117 @x254 @x570 @x406 @x401 @x242 @x117 false)))
 (let ((@x990 ((_ th-lemma arith) @x242 @x117 @x254 @x570 @x242 @x117 (hypothesis $x230) (lemma @x612 $x164) @x406 @x401 false)))
 (let (($x380 (<= k!2 0)))
 (let (($x153 (not $x380)))
 (let (($x304 (not $x492)))
 (let ((@x494 (hypothesis $x304)))
 (let (($x529 (>= k!2 0)))
 (let ((@x468 (hypothesis (not $x529))))
 (let ((@x497 (unit-resolution (lemma ((_ th-lemma arith) @x494 @x494 @x242 @x468 @x570 false) (or $x492 $x529)) @x468 $x492)))
 (let ((@x542 (lemma ((_ th-lemma arith farkas -3 1 -1 1) @x497 @x570 @x242 @x468 false) $x529)))
 (let ((@x113 (hypothesis $x380)))
 (let ((@x348 ((_ th-lemma arith gcd-test -1/9 -1/9 -1/9 -1/9 1/18 1/18 1/2 1/2 1/2 1/2 1/2 1/2) @x542 @x113 @x387 @x190 @x542 @x113 @x542 @x113 @x542 @x494 @x406 @x401 false)))
 (let ((@x350 (unit-resolution (lemma @x348 (or $x153 $x492)) @x494 $x153)))
 (let ((@x543 ((_ th-lemma arith gomory-cut 1/2 1/2 1) @x350 @x254 @x242 (>= (+ ?x244 (* 7 n!0) ?x215) (- 5)))))
 (let ((@x139 ((_ th-lemma arith) @x570 @x350 @x494 @x401 @x543 (hypothesis $x437) @x406 @x117 @x543 @x242 @x117 @x242 @x117 @x242 @x117 @x254 @x570 @x242 @x117 @x254 @x570 @x406 @x401 @x242 @x117 @x387 @x190 @x254 @x570 false)))
 (let ((@x231 (hypothesis $x423)))
 (let ((@x200 (hypothesis $x492)))
 (let (($x727 (>= (+ (* 12 c!3) (* 4 k!2) (* (- 5) n!0) (* 4 ?x524)) 4)))
 (let ((@x462 ((_ th-lemma arith farkas 1 1 1 3/4 -1/4 1 1) @x200 @x231 @x401 @x231 ((_ th-lemma arith gomory-cut 3/5 3/5 3/5 3/4 1/5 1/5) @x542 @x200 @x406 @x200 @x542 @x387 $x727) @x200 @x231 false)))
 (let ((@x1028 (unit-resolution (lemma @x462 (or $x722 $x304)) (unit-resolution (lemma @x139 (or $x492 $x230)) (lemma @x990 $x437) $x492) $x722)))
 (let ((@x813 (hypothesis $x207)))
 (let ((@x614 (hypothesis $x722)))
 (let ((@x814 ((_ th-lemma arith farkas 1 4/9 5/3 5/3 5/3 -5/9 1 1 1 -1/9 -1/9 -1/9 -1/9 1 1 1 1) @x117 @x813 @x614 @x117 @x813 @x254 @x614 @x117 @x813 @x242 @x614 @x570 @x387 @x401 @x614 @x117 @x813 false)))
 ((_ th-lemma arith gcd-test -3/2 -3/2 1 1 -1/2 -1/2) @x242 @x117 @x254 @x570 (unit-resolution (lemma @x814 (or $x815 $x423)) @x1028 $x815) (lemma @x739 $x942) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 58
 :arith-assert-diseq        25
 :arith-assert-lower        453
 :arith-assert-upper        220
 :arith-bound-prop          2
 :arith-branch-var          12
 :arith-conflicts           23
 :arith-eq-adapter          9
 :arith-fixed-eqs           86
 :arith-gcd-tests           72
 :arith-gomory-cuts         9
 :arith-grobner             20
 :arith-ineq-splits         12
 :arith-max-min             2277
 :arith-nonlinear-bounds    236
 :arith-nonlinear-horner    184
 :arith-num-rows            21
 :arith-patches             31
 :arith-patches_succ        7
 :arith-pivots              332
 :arith-pseudo-nonlinear    95
 :arith-row-summations      1239
 :arith-tableau-max-columns 69
 :arith-tableau-max-rows    21
 :conflicts                 26
 :decisions                 91
 :del-clause                30
 :final-checks              77
 :max-memory                3.81
 :memory                    3.21
 :minimized-lits            7
 :mk-bool-var               97
 :mk-clause                 61
 :num-allocs                2106540
 :num-checks                1
 :propagations              85
 :rlimit-count              87955
 :time                      0.04
 :total-time                0.05)
