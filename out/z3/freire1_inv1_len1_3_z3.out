unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x176 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x270 (* (- 2) x00)))
 (let ((?x453 (+ r00 ?x270 ?x101 (* 2 x!0) (* (- 1) r!1) ?x176)))
 (let (($x416 (<= ?x453 0)))
 (let (($x454 (= ?x453 0)))
 (let ((?x102 (* r!1 r!1 r!1 r!1)))
 (let ((?x189 (+ ?x102 (* r00 r!1 r!1) (* (- 2) (* x00 r!1 r!1)) (* (- 1) (* r00 r00 r!1 r!1)) (* (- 2) (* r00 x!0 r!1)) (* (- 2) (* x!0 r!1 r!1 r!1)) (* (- 5) (* x!0 x!0 r!1)) (* 4 (* x00 x!0 r!1)) (* 2 (* r00 r00 x!0 r!1)) (* r00 x!0 x!0) (* x!0 x!0 r!1 r!1) (* (- 1) (* r00 r00 x!0 x!0)) (* (- 1) (* r!1 r!1 r!1)) (* 2 (* x!0 x!0 x!0)) (* (- 2) (* x00 x!0 x!0)) (* 4 (* x!0 r!1 r!1)))))
 (let (($x333 (= ?x189 0)))
 (let (($x168 (not $x333)))
 (let (($x300 (not $x454)))
 (let (($x491 (or $x300 $x168)))
 (let (($x255 (and $x454 $x491)))
 (let ((?x209 (* r!1 r!1 r!1)))
 (let ((?x429 (+ ?x209 (* (- 4) (* r!1 r!1 x!0)) (* (- 1) (* r!1 r!1 r00)) (* (- 1) ?x102) (* 2 (* r!1 r!1 x00)) (* r!1 r!1 r00 r00) (* 5 (* r!1 x!0 x!0)) (* 2 (* r!1 x!0 r00)) (* 2 (* r!1 r!1 r!1 x!0)) (* (- 4) (* r!1 x!0 x00)) (* (- 2) (* r!1 x!0 r00 r00)) (* (- 2) (* x!0 x!0 x!0)) (* (- 1) (* x!0 x!0 r00)) (* (- 1) (* r!1 r!1 x!0 x!0)) (* 2 (* x!0 x!0 x00)) (* x!0 x!0 r00 r00))))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 1) r00)))
 (let (($x141 (= (+ r!1 (* (- 2) x!0) ?x115 (* (- 1) ?x176) ?x35 ?x36) 0)))
 (let (($x434 (and $x141 (or (not $x141) (not (= ?x429 0))))))
 (let (($x212 (exists ((r Int) (x Int) )(! (let ((?x451 (+ (* r r r) (* (- 4) (* r r x)) (* (- 1) (* r r r00)) (* (- 1) (* r r r r)) (* 2 (* r r x00)) (* r r r00 r00) (* 5 (* r x x)) (* 2 (* r x r00)) (* 2 (* r r r x)) (* (- 4) (* r x x00)) (* (- 2) (* r x r00 r00)) (* (- 2) (* x x x)) (* (- 1) (* x x r00)) (* (- 1) (* r r x x)) (* 2 (* x x x00)) (* x x r00 r00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x116 (* (- 1) ?x30)))
 (let ((?x115 (* (- 1) r00)))
 (let ((?x114 (* (- 2) x)))
 (let (($x118 (= (+ r ?x114 ?x115 ?x116 ?x35 ?x36) 0)))
 (and $x118 (or (not $x118) (not (= ?x451 0)))))))))))) :qid k!27))
 ))
 (let (($x130 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x114 (* (- 2) x)))
 (let ((?x115 (* (- 1) r00)))
 (let ((?x415 (+ (* 3 r) ?x115 (* (- 1) (* (+ 1 r) (+ 1 r))) ?x114 ?x35 ?x36)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x270 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x355 (+ 1 r)))
 (let ((?x477 (* ?x355 ?x355)))
 (let ((?x444 (* (- 3) r)))
 (let ((?x137 (* (- 1) r)))
 (let ((?x412 (+ x ?x137)))
 (let (($x156 (not (= (* ?x412 ?x412 (+ (- 1) ?x444 r00 ?x477 ?x32 ?x270 ?x101)) 0))))
 (and (= (+ r ?x115 (* (- 1) (* r r)) ?x114 ?x35 ?x36) 0) (or $x156 (not (= ?x415 (- 1))))))))))))))))))) :qid k!27))
 ))
 (let ((?x322 (lambda ((r Int) (x Int) )(let ((?x451 (+ (* r r r) (* (- 4) (* r r x)) (* (- 1) (* r r r00)) (* (- 1) (* r r r r)) (* 2 (* r r x00)) (* r r r00 r00) (* 5 (* r x x)) (* 2 (* r x r00)) (* 2 (* r r r x)) (* (- 4) (* r x x00)) (* (- 2) (* r x r00 r00)) (* (- 2) (* x x x)) (* (- 1) (* x x r00)) (* (- 1) (* r r x x)) (* 2 (* x x x00)) (* x x r00 r00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x116 (* (- 1) ?x30)))
 (let ((?x115 (* (- 1) r00)))
 (let ((?x114 (* (- 2) x)))
 (let (($x118 (= (+ r ?x114 ?x115 ?x116 ?x35 ?x36) 0)))
 (let (($x498 (and $x118 (or (not $x118) (not (= ?x451 0))))))
 (let ((?x415 (+ (* 3 r) ?x115 (* (- 1) (* (+ 1 r) (+ 1 r))) ?x114 ?x35 ?x36)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x270 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x355 (+ 1 r)))
 (let ((?x477 (* ?x355 ?x355)))
 (let ((?x444 (* (- 3) r)))
 (let ((?x137 (* (- 1) r)))
 (let ((?x412 (+ x ?x137)))
 (let (($x156 (not (= (* ?x412 ?x412 (+ (- 1) ?x444 r00 ?x477 ?x32 ?x270 ?x101)) 0))))
 (let (($x311 (and (= (+ r ?x115 ?x116 ?x114 ?x35 ?x36) 0) (or $x156 (not (= ?x415 (- 1)))))))
 (rewrite (= $x311 $x498)))))))))))))))))))))))
 ))
 (let (($x62 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x270 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x355 (+ 1 r)))
 (let ((?x477 (* ?x355 ?x355)))
 (let ((?x444 (* (- 3) r)))
 (let ((?x137 (* (- 1) r)))
 (let ((?x412 (+ x ?x137)))
 (let (($x156 (not (= (* ?x412 ?x412 (+ (- 1) ?x444 r00 ?x477 ?x32 ?x270 ?x101)) 0))))
 (and (= (+ ?x137 r00 (* r r) ?x32 ?x270 ?x101) 0) (or (not (= (+ ?x444 r00 ?x477 ?x32 ?x270 ?x101) 1)) $x156)))))))))))) :qid k!27))
 ))
 (let ((?x133 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x114 (* (- 2) x)))
 (let ((?x115 (* (- 1) r00)))
 (let ((?x415 (+ (* 3 r) ?x115 (* (- 1) (* (+ 1 r) (+ 1 r))) ?x114 ?x35 ?x36)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x270 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x355 (+ 1 r)))
 (let ((?x477 (* ?x355 ?x355)))
 (let ((?x444 (* (- 3) r)))
 (let ((?x137 (* (- 1) r)))
 (let ((?x412 (+ x ?x137)))
 (let (($x156 (not (= (* ?x412 ?x412 (+ (- 1) ?x444 r00 ?x477 ?x32 ?x270 ?x101)) 0))))
 (let (($x311 (and (= (+ r ?x115 (* (- 1) (* r r)) ?x114 ?x35 ?x36) 0) (or $x156 (not (= ?x415 (- 1)))))))
 (let (($x157 (and (= (+ ?x137 r00 (* r r) ?x32 ?x270 ?x101) 0) (or (not (= (+ ?x444 r00 ?x477 ?x32 ?x270 ?x101) 1)) $x156))))
 (rewrite (= $x157 $x311)))))))))))))))))))
 ))
 (let (($x58 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 ?x44))))
 (let ((?x48 (- (- ?x46 ?x35) ?x36)))
 (let (($x56 (or (not (= ?x48 0)) (not (= (* ?x48 (- 8) ?x44 ?x44) 0)))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) $x56)))))))) :qid k!27))
 ))
 (let ((?x126 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x270 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x355 (+ 1 r)))
 (let ((?x477 (* ?x355 ?x355)))
 (let ((?x444 (* (- 3) r)))
 (let ((?x137 (* (- 1) r)))
 (let ((?x412 (+ x ?x137)))
 (let (($x156 (not (= (* ?x412 ?x412 (+ (- 1) ?x444 r00 ?x477 ?x32 ?x270 ?x101)) 0))))
 (let (($x157 (and (= (+ ?x137 r00 (* r r) ?x32 ?x270 ?x101) 0) (or (not (= (+ ?x444 r00 ?x477 ?x32 ?x270 ?x101) 1)) $x156))))
 (let ((?x44 (- x r)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 ?x44))))
 (let ((?x48 (- (- ?x46 ?x35) ?x36)))
 (let (($x56 (or (not (= ?x48 0)) (not (= (* ?x48 (- 8) ?x44 ?x44) 0)))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x57 (and $x40 $x56)))
 (rewrite (= $x57 $x157)))))))))))))))))))))
 ))
 (let ((@x59 (asserted $x58)))
 (let ((@x314 (mp (mp @x59 (quant-intro (proof-bind ?x126) (= $x58 $x62)) $x62) (rewrite (= $x62 $x62)) $x62)))
 (let ((@x266 (mp (mp @x314 (quant-intro (proof-bind ?x133) (= $x62 $x130)) $x130) (quant-intro (proof-bind ?x322) (= $x130 $x212)) $x212)))
 (let ((@x136 (mp (mp~ @x266 (sk (~ $x212 $x434)) $x434) (rewrite (= $x434 $x255)) $x255)))
 (let ((@x147 (and-elim @x136 $x454)))
 (let ((@x158 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x300 $x416)) @x147 $x416)))
 (let (($x437 (>= ?x453 0)))
 (let ((@x287 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x300 $x437)) @x147 $x437)))
 (let (($x195 (not (>= ?x189 0))))
 (let (($x417 (<= ?x189 0)))
 (let ((@x183 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x333 (not $x417) $x195)) (unit-resolution (and-elim @x136 $x491) @x147 $x168) (or (not $x417) $x195))))
 (let ((@x296 (unit-resolution @x183 (lemma ((_ th-lemma arith) (hypothesis (not $x417)) @x287 @x158 false) $x417) $x195)))
 ((_ th-lemma arith) @x296 @x287 @x158 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        15
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             164
 :arith-nonlinear-bounds    12
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-pivots              2
 :arith-tableau-max-columns 30
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.59
 :memory                    3.09
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1125845
 :num-checks                1
 :propagations              4
 :rlimit-count              2546
 :time                      0.01
 :total-time                0.01)
