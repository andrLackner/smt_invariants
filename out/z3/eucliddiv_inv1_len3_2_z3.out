unsat
((set-logic NIA)
(proof
(let (($x286 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x90 (* (- 1) ?x36)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x68 (* (- 1) y00)))
 (let (($x133 (not (= (+ r ?x68 ?x66 ?x90 (* y00 (+ 1 q))) 0))))
 (let (($x284 (= (+ r ?x66 ?x90 (* y00 q)) 0)))
 (let ((?x312 (* (- 1) y)))
 (let ((?x314 (+ y00 ?x312)))
 (let (($x276 (= ?x314 0)))
 (and $x276 $x284 $x133)))))))))) :qid k!31))
 ))
 (let (($x262 (exists ((q Int) (r Int) (y Int) )(! false :qid k!31))
 ))
 (let ((@x268 (elim-unused (= $x262 false))))
 (let ((?x290 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x90 (* (- 1) ?x36)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x68 (* (- 1) y00)))
 (let (($x133 (not (= (+ r ?x68 ?x66 ?x90 (* y00 (+ 1 q))) 0))))
 (let (($x284 (= (+ r ?x66 ?x90 (* y00 q)) 0)))
 (let ((?x312 (* (- 1) y)))
 (let ((?x314 (+ y00 ?x312)))
 (let (($x276 (= ?x314 0)))
 (let (($x296 (and $x276 $x284 $x133)))
 (let (($x102 (= (+ r ?x66 (* q y00) (* (- 1) (* y00 q00))) 0)))
 (let (($x110 (not $x102)))
 (let (($x77 (= (+ y ?x68) 0)))
 (let (($x255 (and $x77 $x102 $x110)))
 (let ((@x259 (rewrite (= $x255 false))))
 (let ((@x307 (monotonicity (rewrite (= ?x314 (+ ?x312 y00))) (= $x276 (= (+ ?x312 y00) 0)))))
 (let ((@x313 (trans @x307 (rewrite (= (= (+ ?x312 y00) 0) $x77)) (= $x276 $x77))))
 (let ((@x76 (monotonicity @x313 (rewrite (= $x284 $x102)) (rewrite (= $x133 $x110)) (= $x296 $x255))))
 (trans @x76 @x259 (= $x296 false)))))))))))))))))))))
 ))
 (let ((@x271 (trans (quant-intro (proof-bind ?x290) (= $x286 $x262)) @x268 (= $x286 false))))
 (let (($x323 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x90 (* (- 1) ?x36)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x68 (* (- 1) y00)))
 (let (($x133 (not (= (+ r ?x68 ?x66 ?x90 (* y00 (+ 1 q))) 0))))
 (let (($x284 (= (+ r ?x66 ?x90 (* y00 q)) 0)))
 (and (= (+ ?x68 y) 0) $x284 $x133))))))) :qid k!31))
 ))
 (let ((?x277 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x90 (* (- 1) ?x36)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x68 (* (- 1) y00)))
 (let (($x133 (not (= (+ r ?x68 ?x66 ?x90 (* y00 (+ 1 q))) 0))))
 (let (($x284 (= (+ r ?x66 ?x90 (* y00 q)) 0)))
 (let ((?x312 (* (- 1) y)))
 (let ((?x314 (+ y00 ?x312)))
 (let (($x276 (= ?x314 0)))
 (let (($x296 (and $x276 $x284 $x133)))
 (let (($x321 (and (= (+ ?x68 y) 0) $x284 $x133)))
 (rewrite (= $x321 $x296))))))))))))))
 ))
 (let (($x63 (exists ((q Int) (r Int) (y Int) )(! (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x45 (- r y00)))
 (let ((?x48 (+ q 1)))
 (let ((?x56 (* 2 ?x48 ?x48 ?x45 y00 y00)))
 (let ((?x55 (* 2 ?x48 ?x48 ?x45 ?x45)))
 (let ((?x54 (* 2 ?x48 ?x45)))
 (let ((?x57 (+ ?x54 ?x55 ?x56)))
 (let ((?x58 (* ?x57 ?x42)))
 (let (($x59 (= ?x58 0)))
 (let (($x60 (not $x59)))
 (let (($x52 (not (= (+ (- (- ?x45 r00) (* q00 y00)) (* ?x48 y00)) 0))))
 (let (($x43 (= ?x42 0)))
 (let (($x44 (not $x43)))
 (let (($x61 (or $x44 $x52 $x60)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x61)))))))))))))))))) :qid k!31))
 ))
 (let ((?x325 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x90 (* (- 1) ?x36)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x68 (* (- 1) y00)))
 (let (($x133 (not (= (+ r ?x68 ?x66 ?x90 (* y00 (+ 1 q))) 0))))
 (let (($x284 (= (+ r ?x66 ?x90 (* y00 q)) 0)))
 (let (($x321 (and (= (+ ?x68 y) 0) $x284 $x133)))
 (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x45 (- r y00)))
 (let ((?x48 (+ q 1)))
 (let ((?x56 (* 2 ?x48 ?x48 ?x45 y00 y00)))
 (let ((?x55 (* 2 ?x48 ?x48 ?x45 ?x45)))
 (let ((?x54 (* 2 ?x48 ?x45)))
 (let ((?x57 (+ ?x54 ?x55 ?x56)))
 (let ((?x58 (* ?x57 ?x42)))
 (let (($x59 (= ?x58 0)))
 (let (($x60 (not $x59)))
 (let (($x52 (not (= (+ (- (- ?x45 r00) ?x36) (* ?x48 y00)) 0))))
 (let (($x43 (= ?x42 0)))
 (let (($x44 (not $x43)))
 (let (($x61 (or $x44 $x52 $x60)))
 (let (($x41 (= (+ (- (- r r00) ?x36) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x62 (and $x33 $x41 $x61)))
 (rewrite (= $x62 $x321))))))))))))))))))))))))))))
 ))
 (let ((@x64 (asserted $x63)))
 (let ((@x287 (mp (mp @x64 (quant-intro (proof-bind ?x325) (= $x63 $x323)) $x323) (rewrite (= $x323 $x323)) $x323)))
 (mp (mp @x287 (quant-intro (proof-bind ?x277) (= $x323 $x286)) $x286) @x271 false))))))))))))))

(:max-memory   3.35
 :memory       3.04
 :mk-bool-var  6
 :num-allocs   958025
 :num-checks   1
 :rlimit-count 439
 :time         0.01
 :total-time   0.02)
