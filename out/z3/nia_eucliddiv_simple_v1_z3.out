unsat
((set-logic NIA)
(declare-fun y!2 () Int)
(declare-fun q!1 () Int)
(declare-fun r!0 () Int)
(proof
(let ((?x159 (* (- 1) y!2)))
 (let ((?x160 (+ y00 ?x159)))
 (let (($x169 (<= ?x160 0)))
 (let (($x162 (= ?x160 0)))
 (let ((?x168 (* y00 q!1)))
 (let ((?x73 (* (- 1) r00)))
 (let ((?x33 (* y00 q00)))
 (let ((?x55 (* (- 1) ?x33)))
 (let ((?x202 (+ y00 ?x55 ?x73 ?x159 r!0 ?x168)))
 (let (($x203 (= ?x202 0)))
 (let (($x208 (not $x203)))
 (let ((?x80 (* (- 1) r!0)))
 (let ((?x183 (+ ?x33 r00 ?x80 (* (- 1) ?x168))))
 (let (($x184 (= ?x183 0)))
 (let (($x189 (and $x162 $x184 $x208)))
 (let (($x110 (= (+ y!2 ?x80 (* (- 1) y00) (* (- 1) (* q!1 y00)) ?x33 r00) 0)))
 (let (($x142 (and (= (+ y!2 (* (- 1) y00)) 0) (= (+ r!0 (* q!1 y00) ?x55 ?x73) 0) (not $x110))))
 (let (($x90 (exists ((y Int) (q Int) (r Int) )(! (let ((?x33 (* y00 q00)))
 (let ((?x53 (* (- 1) y00)))
 (let (($x135 (= (+ y (* (- 1) r) ?x53 (* (- 1) (* q y00)) ?x33 r00) 0)))
 (let (($x140 (not $x135)))
 (let (($x84 (= (+ r (* q y00) (* (- 1) ?x33) (* (- 1) r00)) 0)))
 (let (($x57 (= (+ y ?x53) 0)))
 (and $x57 $x84 $x140))))))) :qid k!31))
 ))
 (let (($x115 (exists ((y Int) (q Int) (r Int) )(! (let ((?x73 (* (- 1) r00)))
 (let ((?x119 (* (- 1) (* q00 y00))))
 (let (($x152 (= (+ (* y00 (+ 1 q)) ?x119 r (* (- 1) y) ?x73) 0)))
 (let (($x105 (not $x152)))
 (let (($x117 (= (+ (* y00 q) ?x119 r ?x73) 0)))
 (let (($x57 (= (+ y (* (- 1) y00)) 0)))
 (and $x57 $x117 $x105))))))) :qid k!31))
 ))
 (let ((?x98 (lambda ((y Int) (q Int) (r Int) )(let ((?x33 (* y00 q00)))
 (let ((?x53 (* (- 1) y00)))
 (let (($x135 (= (+ y (* (- 1) r) ?x53 (* (- 1) (* q y00)) ?x33 r00) 0)))
 (let (($x140 (not $x135)))
 (let (($x84 (= (+ r (* q y00) (* (- 1) ?x33) (* (- 1) r00)) 0)))
 (let (($x57 (= (+ y ?x53) 0)))
 (let (($x75 (and $x57 $x84 $x140)))
 (let ((?x73 (* (- 1) r00)))
 (let ((?x119 (* (- 1) (* q00 y00))))
 (let (($x152 (= (+ (* y00 (+ 1 q)) ?x119 r (* (- 1) y) ?x73) 0)))
 (let (($x105 (not $x152)))
 (let (($x117 (= (+ (* y00 q) ?x119 r ?x73) 0)))
 (let (($x96 (and $x57 $x117 $x105)))
 (rewrite (= $x96 $x75))))))))))))))))
 ))
 (let (($x50 (exists ((y Int) (q Int) (r Int) )(! (let ((?x45 (- (+ (- (* (+ q 1) y00) (* y00 q00)) (- r y)) r00)))
 (let (($x47 (not (= ?x45 0))))
 (let (($x48 (or $x47)))
 (let (($x30 (= (- y y00) 0)))
 (let (($x38 (= (- (+ (- (* q y00) (* y00 q00)) r) r00) 0)))
 (and $x30 $x38 $x30 $x48)))))) :qid k!31))
 ))
 (let ((?x116 (lambda ((y Int) (q Int) (r Int) )(let ((?x73 (* (- 1) r00)))
 (let ((?x119 (* (- 1) (* q00 y00))))
 (let (($x152 (= (+ (* y00 (+ 1 q)) ?x119 r (* (- 1) y) ?x73) 0)))
 (let (($x105 (not $x152)))
 (let (($x117 (= (+ (* y00 q) ?x119 r ?x73) 0)))
 (let (($x57 (= (+ y (* (- 1) y00)) 0)))
 (let (($x96 (and $x57 $x117 $x105)))
 (let ((?x45 (- (+ (- (* (+ q 1) y00) (* y00 q00)) (- r y)) r00)))
 (let (($x47 (not (= ?x45 0))))
 (let (($x48 (or $x47)))
 (let (($x30 (= (- y y00) 0)))
 (let (($x38 (= (- (+ (- (* q y00) (* y00 q00)) r) r00) 0)))
 (let (($x49 (and $x30 $x38 $x30 $x48)))
 (let ((@x83 (trans (monotonicity (rewrite (= $x47 $x105)) (= $x48 (or $x105))) (rewrite (= (or $x105) $x105)) (= $x48 $x105))))
 (let ((@x60 (rewrite (= $x30 $x57))))
 (let ((@x95 (monotonicity @x60 (rewrite (= $x38 $x117)) @x60 @x83 (= $x49 (and $x57 $x117 $x57 $x105)))))
 (trans @x95 (rewrite (= (and $x57 $x117 $x57 $x105) $x96)) (= $x49 $x96)))))))))))))))))))
 ))
 (let ((@x51 (asserted $x50)))
 (let ((@x149 (mp (mp @x51 (quant-intro (proof-bind ?x116) (= $x50 $x115)) $x115) (rewrite (= $x115 $x115)) $x115)))
 (let ((@x146 (mp~ (mp @x149 (quant-intro (proof-bind ?x98) (= $x115 $x90)) $x90) (sk (~ $x90 $x142)) $x142)))
 (let ((@x209 (mp @x146 (rewrite (= $x142 $x189)) $x189)))
 (let ((@x211 (and-elim @x209 $x162)))
 (let (($x166 (not (<= ?x202 0))))
 (let (($x176 (>= ?x202 0)))
 (let (($x170 (>= ?x160 0)))
 (let (($x173 (<= ?x183 0)))
 (let ((@x171 (and-elim @x209 $x184)))
 (let ((@x156 ((_ th-lemma arith farkas -1 -1 1) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x184) $x173)) @x171 $x173) (hypothesis (not $x176)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x162) $x170)) @x211 $x170) false)))
 (let ((@x194 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x203 $x166 (not $x176))) (and-elim @x209 $x208) (or $x166 (not $x176)))))
 (let (($x174 (>= ?x183 0)))
 ((_ th-lemma arith farkas -1 -1 1) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x184) $x174)) @x171 $x174) (unit-resolution @x194 (lemma @x156 $x176) $x166) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x162) $x169)) @x211 $x169) false))))))))))))))))))))))))))))))))))))))

