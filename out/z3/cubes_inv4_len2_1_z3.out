unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x303 (* (- 3) n!0)))
 (let ((?x294 (* n!0 n!0)))
 (let ((?x280 (* (- 3) ?x294)))
 (let ((?x380 (+ k!2 ?x280 ?x303)))
 (let (($x505 (<= ?x380 0)))
 (let (($x434 (= ?x380 0)))
 (let ((?x535 (* 9 n!0)))
 (let ((?x346 (* 3 ?x294)))
 (let ((?x128 (* (- 1) k!2)))
 (let ((?x533 (* (- 1) m!1)))
 (let ((?x466 (* m!1 m!1)))
 (let ((?x440 (* 7 ?x466)))
 (let ((?x534 (* 216 (* c!3 c!3))))
 (let ((?x251 (* 42 k!2)))
 (let ((?x247 (* k!2 k!2)))
 (let ((?x248 (* 216 ?x247)))
 (let ((?x250 (* 42 m!1)))
 (let ((?x230 (+ ?x250 (* 7 (* m!1 k!2)) ?x248 ?x251 (* 12 (* m!1 m!1 k!2 c!3)) (* 432 (* k!2 c!3)) ?x534 (* 6 (* m!1 m!1 k!2 k!2)) (* 6 (* m!1 m!1 c!3 c!3)) (* 72 (* m!1 k!2 k!2)) (* 144 (* m!1 k!2 c!3)) ?x440 (* 72 (* m!1 c!3 c!3)))))
 (let (($x537 (= (+ m!1 (* (- 6) n!0)) 6)))
 (let (($x499 (not $x537)))
 (let ((?x511 (* c!3 n!0)))
 (let ((?x516 (* 9 ?x511)))
 (let ((?x162 (* (- 1) ?x466)))
 (let ((?x363 (* (- 9) n!0)))
 (let ((?x513 (* 27 c!3)))
 (let ((?x331 (* k!2 n!0)))
 (let ((?x257 (* 9 ?x331)))
 (let ((?x531 (* 32 k!2)))
 (let ((?x540 (* (- 1) ?x247)))
 (let ((?x532 (* 5 m!1)))
 (let ((?x408 (+ ?x532 (* (- 2) (* m!1 k!2)) ?x540 ?x531 ?x257 ?x513 ?x363 ?x162 ?x516)))
 (let ((?x549 (* 2 n!0)))
 (let ((?x190 (* m!1 n!0)))
 (let (($x178 (or (not (= (+ ?x190 (* (- 3) k!2) ?x331 (* (- 3) c!3) ?x549) (- 2))) (not (= ?x408 13)) $x499 (not (= (* ?x230 (+ 6 ?x533 ?x128 ?x346 ?x535)) 0)) (not (= (+ m!1 k!2 ?x280 ?x363) 6)))))
 (let ((?x244 (* (- 2) n!0)))
 (let ((?x436 (* 3 c!3)))
 (let ((?x111 (* (- 1) ?x331)))
 (let ((?x326 (+ k!2 ?x111 ?x436 ?x244)))
 (let (($x433 (= ?x326 0)))
 (let ((?x488 (+ ?x247 (* (- 5) k!2) (* (- 18) c!3) ?x535 (* (- 9) ?x511))))
 (let (($x501 (= ?x488 (- 4))))
 (let (($x268 (and $x537 $x501 $x433 $x434 $x178)))
 (let ((?x171 (+ ?x513 ?x531 ?x532 ?x363 ?x540 ?x257 ?x516 (* (- 2) (* k!2 m!1)) ?x162)))
 (let ((?x543 (+ ?x251 ?x250 ?x248 (* 432 (* c!3 k!2)) ?x534 (* 72 (* c!3 c!3 m!1)) (* 72 (* k!2 k!2 m!1)) (* 7 (* k!2 m!1)) ?x440 (* 144 (* c!3 k!2 m!1)) (* 6 (* c!3 c!3 m!1 m!1)) (* 12 (* c!3 k!2 m!1 m!1)) (* 6 (* k!2 k!2 m!1 m!1)))))
 (let (($x525 (or (not (= (* ?x543 (+ 6 ?x128 ?x533 ?x535 ?x346)) 0)) $x499 (not (= (+ k!2 m!1 ?x363 ?x280) 6)) (not (= ?x171 13)) (not (= (+ ?x436 (* 3 k!2) ?x244 ?x111 (* (- 1) ?x190)) 2)))))
 (let (($x529 (and $x537 (= (+ (* 18 c!3) (* 5 k!2) ?x363 ?x540 ?x516) 4) (= (+ ?x436 k!2 ?x244 ?x111) 0) (= (+ k!2 ?x303 ?x280) 0) $x525)))
 (let (($x538 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x52 (* k n)))
 (let ((?x263 (* (- 1) ?x52)))
 (let ((?x262 (* (- 2) n)))
 (let ((?x260 (* 3 c)))
 (let (($x545 (= (+ ?x260 (* 3 k) ?x262 ?x263 (* (- 1) (* m n))) 2)))
 (let (($x553 (not $x545)))
 (let ((?x160 (* 9 (* c n))))
 (let ((?x46 (* k k)))
 (let ((?x223 (* (- 1) ?x46)))
 (let ((?x222 (* (- 9) n)))
 (let ((?x435 (* 5 m)))
 (let ((?x523 (+ (* 27 c) (* 32 k) ?x435 ?x222 ?x223 (* 9 ?x52) ?x160 (* (- 2) (* k m)) (* (- 1) (* m m)))))
 (let (($x527 (not (= ?x523 13))))
 (let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x361 (not $x143)))
 (let ((?x270 (* n n)))
 (let ((?x271 (* 3 ?x270)))
 (let ((?x45 (* 9 n)))
 (let ((?x476 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let ((?x630 (* 6 (* k k m m))))
 (let ((?x624 (* 6 (* c c m m))))
 (let ((?x486 (* m m)))
 (let ((?x585 (* 7 ?x486)))
 (let ((?x485 (* k m)))
 (let ((?x584 (* 7 ?x485)))
 (let ((?x276 (+ (* 42 k) (* 42 m) (* 216 ?x46) (* 432 (* c k)) (* 216 (* c c)) (* 72 (* c c m)) (* 72 (* k k m)) ?x584 ?x585 (* 144 (* c k m)) ?x624 (* 12 (* c k m m)) ?x630)))
 (let (($x425 (or (not (= (* ?x276 (+ 6 ?x238 ?x476 ?x45 ?x271)) 0)) $x361 (not (= (+ k m ?x222 (* (- 3) ?x270)) 6)) $x527 $x553)))
 (let (($x301 (= (+ k (* (- 3) n) (* (- 3) ?x270)) 0)))
 (let (($x265 (= (+ ?x260 k ?x262 ?x263) 0)))
 (let (($x220 (= (+ (* 18 c) (* 5 k) ?x222 ?x223 ?x160) 4)))
 (and $x143 $x220 $x265 $x301 $x425)))))))))))))))))))))))))))))))) :qid k!38))
 ))
 (let (($x159 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x222 (* (- 9) n)))
 (let ((?x435 (* 5 m)))
 (let ((?x37 (* 18 c)))
 (let ((?x551 (+ ?x37 (* 23 k) (* 9 (* (+ 1 n) (+ c k))) ?x435 ?x222 (* (- 1) (* (+ k m) (+ k m))))))
 (let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x361 (not $x143)))
 (let ((?x262 (* (- 2) n)))
 (let ((?x260 (* 3 c)))
 (let ((?x381 (+ ?x260 (* 4 k) (* (- 1) (* (+ 1 n) (+ k m))) m ?x262)))
 (let ((?x61 (* 3 n)))
 (let ((?x476 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let ((?x509 (* 3 (* (+ 1 n) (+ 1 n)))))
 (let (($x285 (not (= (+ ?x509 ?x238 ?x476 ?x61) (- 3)))))
 (let ((?x297 (* 6 (* (+ 6 m) (+ 6 m) (+ c k) (+ c k)))))
 (let ((?x302 (* (+ (* 7 (* (+ 6 m) (+ k m))) ?x297) (+ 3 ?x509 ?x238 ?x476 ?x61))))
 (let (($x237 (not (= ?x302 0))))
 (let (($x514 (= (+ (* 3 (* n n)) ?x238 ?x61) 0)))
 (let ((?x46 (* k k)))
 (let ((?x223 (* (- 1) ?x46)))
 (let ((?x41 (* 5 k)))
 (and $x143 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x222 ?x223) 4) (= (+ ?x260 (* (- 1) (* n k)) k ?x262) 0) $x514 (or $x237 $x285 (not (= ?x381 2)) $x361 (not (= ?x551 13))))))))))))))))))))))))) :qid k!38))
 ))
 (let ((?x443 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x52 (* k n)))
 (let ((?x263 (* (- 1) ?x52)))
 (let ((?x262 (* (- 2) n)))
 (let ((?x260 (* 3 c)))
 (let (($x545 (= (+ ?x260 (* 3 k) ?x262 ?x263 (* (- 1) (* m n))) 2)))
 (let (($x553 (not $x545)))
 (let ((?x160 (* 9 (* c n))))
 (let ((?x46 (* k k)))
 (let ((?x223 (* (- 1) ?x46)))
 (let ((?x222 (* (- 9) n)))
 (let ((?x435 (* 5 m)))
 (let ((?x523 (+ (* 27 c) (* 32 k) ?x435 ?x222 ?x223 (* 9 ?x52) ?x160 (* (- 2) (* k m)) (* (- 1) (* m m)))))
 (let (($x527 (not (= ?x523 13))))
 (let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x361 (not $x143)))
 (let ((?x270 (* n n)))
 (let ((?x271 (* 3 ?x270)))
 (let ((?x45 (* 9 n)))
 (let ((?x476 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let ((?x630 (* 6 (* k k m m))))
 (let ((?x624 (* 6 (* c c m m))))
 (let ((?x486 (* m m)))
 (let ((?x585 (* 7 ?x486)))
 (let ((?x485 (* k m)))
 (let ((?x584 (* 7 ?x485)))
 (let ((?x276 (+ (* 42 k) (* 42 m) (* 216 ?x46) (* 432 (* c k)) (* 216 (* c c)) (* 72 (* c c m)) (* 72 (* k k m)) ?x584 ?x585 (* 144 (* c k m)) ?x624 (* 12 (* c k m m)) ?x630)))
 (let (($x425 (or (not (= (* ?x276 (+ 6 ?x238 ?x476 ?x45 ?x271)) 0)) $x361 (not (= (+ k m ?x222 (* (- 3) ?x270)) 6)) $x527 $x553)))
 (let (($x301 (= (+ k (* (- 3) n) (* (- 3) ?x270)) 0)))
 (let (($x265 (= (+ ?x260 k ?x262 ?x263) 0)))
 (let (($x220 (= (+ (* 18 c) (* 5 k) ?x222 ?x223 ?x160) 4)))
 (let (($x154 (and $x143 $x220 $x265 $x301 $x425)))
 (let ((?x37 (* 18 c)))
 (let ((?x551 (+ ?x37 (* 23 k) (* 9 (* (+ 1 n) (+ c k))) ?x435 ?x222 (* (- 1) (* (+ k m) (+ k m))))))
 (let ((?x381 (+ ?x260 (* 4 k) (* (- 1) (* (+ 1 n) (+ k m))) m ?x262)))
 (let ((?x61 (* 3 n)))
 (let ((?x509 (* 3 (* (+ 1 n) (+ 1 n)))))
 (let (($x285 (not (= (+ ?x509 ?x238 ?x476 ?x61) (- 3)))))
 (let ((?x297 (* 6 (* (+ 6 m) (+ 6 m) (+ c k) (+ c k)))))
 (let ((?x302 (* (+ (* 7 (* (+ 6 m) (+ k m))) ?x297) (+ 3 ?x509 ?x238 ?x476 ?x61))))
 (let (($x237 (not (= ?x302 0))))
 (let (($x514 (= (+ ?x271 ?x238 ?x61) 0)))
 (let (($x173 (= (+ ?x37 (* 9 (* n c)) (* 5 k) ?x222 ?x223) 4)))
 (let (($x334 (and $x143 $x173 (= (+ ?x260 (* (- 1) (* n k)) k ?x262) 0) $x514 (or $x237 $x285 (not (= ?x381 2)) $x361 (not (= ?x551 13))))))
 (rewrite (= $x334 $x154)))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x393 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x361 (not $x143)))
 (let ((?x74 (+ k m)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x459 (* (- 18) c)))
 (let ((?x183 (+ ?x459 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) (* (- 5) m) ?x45 ?x80)))
 (let ((?x61 (* 3 n)))
 (let ((?x476 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let ((?x509 (* 3 (* (+ 1 n) (+ 1 n)))))
 (let (($x285 (not (= (+ ?x509 ?x238 ?x476 ?x61) (- 3)))))
 (let ((?x56 (* 2 n)))
 (let ((?x439 (+ 1 n)))
 (let ((?x480 (* ?x439 ?x74)))
 (let ((?x318 (* (- 3) c)))
 (let ((?x297 (* 6 (* (+ 6 m) (+ 6 m) (+ c k) (+ c k)))))
 (let ((?x302 (* (+ (* 7 (* (+ 6 m) ?x74)) ?x297) (+ 3 ?x509 ?x238 ?x476 ?x61))))
 (let (($x237 (not (= ?x302 0))))
 (let (($x295 (or $x237 (not (= (+ ?x318 (* (- 4) k) ?x480 ?x476 ?x56) (- 2))) $x285 (not (= ?x183 (- 13))) $x361)))
 (let (($x514 (= (+ (* 3 (* n n)) ?x238 ?x61) 0)))
 (let (($x367 (= (+ ?x459 (* (- 9) (* n c)) (* (- 5) k) ?x45 (* k k)) (- 4))))
 (and $x143 $x367 (= (+ ?x318 (* n k) ?x238 ?x56) 0) $x514 $x295))))))))))))))))))))))) :qid k!38))
 ))
 (let ((?x351 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x222 (* (- 9) n)))
 (let ((?x435 (* 5 m)))
 (let ((?x37 (* 18 c)))
 (let ((?x551 (+ ?x37 (* 23 k) (* 9 (* (+ 1 n) (+ c k))) ?x435 ?x222 (* (- 1) (* (+ k m) (+ k m))))))
 (let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x361 (not $x143)))
 (let ((?x262 (* (- 2) n)))
 (let ((?x260 (* 3 c)))
 (let ((?x381 (+ ?x260 (* 4 k) (* (- 1) (* (+ 1 n) (+ k m))) m ?x262)))
 (let ((?x61 (* 3 n)))
 (let ((?x476 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let ((?x509 (* 3 (* (+ 1 n) (+ 1 n)))))
 (let (($x285 (not (= (+ ?x509 ?x238 ?x476 ?x61) (- 3)))))
 (let ((?x297 (* 6 (* (+ 6 m) (+ 6 m) (+ c k) (+ c k)))))
 (let ((?x302 (* (+ (* 7 (* (+ 6 m) (+ k m))) ?x297) (+ 3 ?x509 ?x238 ?x476 ?x61))))
 (let (($x237 (not (= ?x302 0))))
 (let (($x514 (= (+ (* 3 (* n n)) ?x238 ?x61) 0)))
 (let ((?x46 (* k k)))
 (let ((?x223 (* (- 1) ?x46)))
 (let ((?x41 (* 5 k)))
 (let (($x334 (and $x143 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x222 ?x223) 4) (= (+ ?x260 (* (- 1) (* n k)) k ?x262) 0) $x514 (or $x237 $x285 (not (= ?x381 2)) $x361 (not (= ?x551 13))))))
 (let ((?x74 (+ k m)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x459 (* (- 18) c)))
 (let ((?x183 (+ ?x459 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) (* (- 5) m) ?x45 ?x80)))
 (let ((?x56 (* 2 n)))
 (let ((?x439 (+ 1 n)))
 (let ((?x480 (* ?x439 ?x74)))
 (let ((?x318 (* (- 3) c)))
 (let (($x295 (or $x237 (not (= (+ ?x318 (* (- 4) k) ?x480 ?x476 ?x56) (- 2))) $x285 (not (= ?x183 (- 13))) $x361)))
 (let (($x367 (= (+ ?x459 (* (- 9) (* n c)) (* (- 5) k) ?x45 ?x46) (- 4))))
 (let (($x289 (and $x143 $x367 (= (+ ?x318 (* n k) ?x238 ?x56) 0) $x514 $x295)))
 (rewrite (= $x289 $x334)))))))))))))))))))))))))))))))))))))
 ))
 (let (($x108 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x99 (+ m 6)))
 (let ((?x71 (+ c k)))
 (let ((?x95 (+ (- (* 3 (+ n 1) (+ n 1)) (+ k m)) (* 3 (+ n 1)))))
 (let ((?x103 (* ?x95 (+ (* 7 (+ k m) ?x99) (* 6 ?x71 ?x71 ?x99 ?x99)))))
 (let ((?x74 (+ k m)))
 (let ((?x89 (+ (- (+ (* (- 3) ?x71) (* ?x74 (+ n 1))) ?x74) (* 2 (+ n 1)))))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x78 (- (- (- 4 (* 18 ?x71)) (* 9 ?x71 (+ n 1))) (* 5 ?x74))))
 (let (($x70 (not (= (- (+ (- 6) m 6) (* 6 (+ n 1))) 0))))
 (let (($x106 (or $x70 (not (= (+ ?x78 (* 9 (+ n 1)) ?x80) 0)) (not (= ?x89 0)) (not (= ?x95 0)) (not (= ?x103 0)))))
 (let (($x58 (= (+ (- (+ (* (- 3) c) (* k n)) k) (* 2 n)) 0)))
 (let ((?x46 (* k k)))
 (let ((?x45 (* 9 n)))
 (let ((?x41 (* 5 k)))
 (let ((?x47 (+ (- (- (- 4 (* 18 c)) (* 9 c n)) ?x41) ?x45 ?x46)))
 (and (= (- (+ (- 6) m) (* 6 n)) 0) (= ?x47 0) $x58 (= (+ (- (* 3 n n) k) (* 3 n)) 0) $x106)))))))))))))))) :qid k!38))
 ))
 (let ((?x396 (lambda ((c Int) (k Int) (m Int) (n Int) )(let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x361 (not $x143)))
 (let ((?x74 (+ k m)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x459 (* (- 18) c)))
 (let ((?x183 (+ ?x459 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) (* (- 5) m) ?x45 ?x80)))
 (let ((?x61 (* 3 n)))
 (let ((?x476 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let ((?x509 (* 3 (* (+ 1 n) (+ 1 n)))))
 (let (($x285 (not (= (+ ?x509 ?x238 ?x476 ?x61) (- 3)))))
 (let ((?x56 (* 2 n)))
 (let ((?x439 (+ 1 n)))
 (let ((?x480 (* ?x439 ?x74)))
 (let ((?x318 (* (- 3) c)))
 (let ((?x297 (* 6 (* (+ 6 m) (+ 6 m) (+ c k) (+ c k)))))
 (let ((?x302 (* (+ (* 7 (* (+ 6 m) ?x74)) ?x297) (+ 3 ?x509 ?x238 ?x476 ?x61))))
 (let (($x237 (not (= ?x302 0))))
 (let (($x295 (or $x237 (not (= (+ ?x318 (* (- 4) k) ?x480 ?x476 ?x56) (- 2))) $x285 (not (= ?x183 (- 13))) $x361)))
 (let (($x514 (= (+ (* 3 (* n n)) ?x238 ?x61) 0)))
 (let (($x367 (= (+ ?x459 (* (- 9) (* n c)) (* (- 5) k) ?x45 (* k k)) (- 4))))
 (let (($x289 (and $x143 $x367 (= (+ ?x318 (* n k) ?x238 ?x56) 0) $x514 $x295)))
 (let ((?x99 (+ m 6)))
 (let ((?x71 (+ c k)))
 (let ((?x95 (+ (- (* 3 (+ n 1) (+ n 1)) ?x74) (* 3 (+ n 1)))))
 (let (($x104 (= (* ?x95 (+ (* 7 ?x74 ?x99) (* 6 ?x71 ?x71 ?x99 ?x99))) 0)))
 (let ((?x89 (+ (- (+ (* (- 3) ?x71) (* ?x74 (+ n 1))) ?x74) (* 2 (+ n 1)))))
 (let ((?x78 (- (- (- 4 (* 18 ?x71)) (* 9 ?x71 (+ n 1))) (* 5 ?x74))))
 (let (($x70 (not (= (- (+ (- 6) m 6) (* 6 (+ n 1))) 0))))
 (let (($x106 (or $x70 (not (= (+ ?x78 (* 9 (+ n 1)) ?x80) 0)) (not (= ?x89 0)) (not (= ?x95 0)) (not $x104))))
 (let ((?x46 (* k k)))
 (let ((?x41 (* 5 k)))
 (let ((?x47 (+ (- (- (- 4 (* 18 c)) (* 9 c n)) ?x41) ?x45 ?x46)))
 (let (($x107 (and (= (- (+ (- 6) m) (* 6 n)) 0) (= ?x47 0) (= (+ (- (+ (* (- 3) c) (* k n)) k) ?x56) 0) (= (+ (- (* 3 n n) k) ?x61) 0) $x106)))
 (rewrite (= $x107 $x289))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x109 (asserted $x108)))
 (let ((@x474 (mp (mp @x109 (quant-intro (proof-bind ?x396) (= $x108 $x393)) $x393) (rewrite (= $x393 $x393)) $x393)))
 (let ((@x236 (mp (mp @x474 (quant-intro (proof-bind ?x351) (= $x393 $x159)) $x159) (quant-intro (proof-bind ?x443) (= $x159 $x538)) $x538)))
 (let ((@x455 (mp (mp~ @x236 (sk (~ $x538 $x529)) $x529) (rewrite (= $x529 $x268)) $x268)))
 (let ((@x176 (and-elim @x455 $x434)))
 (let ((@x307 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x434) $x505)) @x176 $x505)))
 (let (($x503 (>= ?x380 0)))
 (let ((@x258 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x434) $x503)) @x176 $x503)))
 (let (($x135 (<= ?x326 0)))
 (let ((@x398 (and-elim @x455 $x433)))
 (let ((@x765 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x433) $x135)) @x398 $x135)))
 (let (($x594 (>= ?x326 0)))
 (let ((@x755 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x433) $x594)) @x398 $x594)))
 (let (($x407 (<= ?x488 (- 4))))
 (let ((@x591 (and-elim @x455 $x501)))
 (let ((@x768 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x501) $x407)) @x591 $x407)))
 (let (($x121 (>= ?x488 (- 4))))
 (let ((@x759 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x501) $x121)) @x591 $x121)))
 (let (($x822 (<= n!0 1)))
 (let ((@x1267 ((_ th-lemma arith) (hypothesis (not $x822)) @x258 @x307 @x759 @x768 @x258 @x307 @x258 @x307 @x759 @x768 @x258 @x307 @x759 @x768 @x759 @x768 @x759 @x768 @x258 @x307 @x755 @x765 @x258 @x307 false)))
 (let (($x288 (>= n!0 0)))
 (let (($x963 (>= k!2 0)))
 (let ((@x542 (hypothesis (not $x288))))
 (let ((@x989 (hypothesis (not $x963))))
 (let ((@x448 (lemma ((_ th-lemma arith) @x989 @x542 @x258 @x989 @x258 @x989 @x542 @x258 false) (or $x963 $x288))))
 (let ((@x1099 (unit-resolution @x448 @x542 $x963)))
 (let (($x386 (>= (+ ?x247 ?x128 (* (- 4) c!3) ?x549 (* (- 2) ?x511)) 0)))
 (let (($x1103 (not $x386)))
 (let ((@x1100 ((_ th-lemma arith gomory-cut 1 -1/2 -1 -1 1/2) @x258 @x542 @x1099 @x542 @x755 (>= (+ k!2 (* (- 2) ?x294) ?x111 c!3 ?x303) 1))))
 (let ((@x1102 ((_ th-lemma arith) (hypothesis $x386) @x1100 @x258 @x307 @x759 @x768 @x258 @x307 @x759 @x768 @x258 @x307 @x755 @x765 @x759 @x768 @x258 @x307 @x755 @x765 @x759 @x768 @x258 @x307 false)))
 (let (($x259 (>= ?x247 0)))
 (let ((@x1107 ((_ th-lemma arith farkas 2 7 -9 1) @x759 (lemma ((_ th-lemma arith farkas 1) (hypothesis (not $x259)) false) $x259) (unit-resolution (lemma @x1102 (or $x1103 $x288)) @x542 $x1103) @x1099 false)))
 ((_ th-lemma arith) (lemma @x1107 $x288) (lemma @x1267 $x822) @x759 @x768 @x258 @x307 @x759 @x768 @x258 @x307 @x258 @x307 @x759 @x768 @x258 @x307 @x759 @x768 @x759 @x768 @x755 @x765 @x258 @x307 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 55
 :arith-assert-diseq        16
 :arith-assert-lower        271
 :arith-assert-upper        213
 :arith-bound-prop          7
 :arith-branch-var          19
 :arith-conflicts           26
 :arith-eq-adapter          10
 :arith-fixed-eqs           68
 :arith-gcd-tests           157
 :arith-gomory-cuts         12
 :arith-grobner             21
 :arith-ineq-splits         19
 :arith-max-min             1733
 :arith-nonlinear-bounds    135
 :arith-nonlinear-horner    184
 :arith-num-rows            15
 :arith-offset-eqs          2
 :arith-patches             43
 :arith-patches_succ        5
 :arith-pivots              346
 :arith-pseudo-nonlinear    59
 :arith-row-summations      1703
 :arith-tableau-max-columns 62
 :arith-tableau-max-rows    15
 :conflicts                 30
 :decisions                 119
 :del-clause                80
 :final-checks              93
 :max-memory                3.91
 :memory                    3.30
 :minimized-lits            2
 :mk-bool-var               138
 :mk-clause                 96
 :num-allocs                2254479
 :num-checks                1
 :propagations              133
 :rlimit-count              104621
 :time                      0.03
 :total-time                0.04)
