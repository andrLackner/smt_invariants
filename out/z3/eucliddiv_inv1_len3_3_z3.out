unsat
((set-logic NIA)
(proof
(let (($x281 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x93 (* (- 1) ?x36)))
 (let ((?x69 (* (- 1) r00)))
 (let ((?x71 (* (- 1) y00)))
 (let (($x136 (not (= (+ r ?x71 ?x69 ?x93 (* y00 (+ 1 q))) 0))))
 (let (($x279 (= (+ r ?x69 ?x93 (* y00 q)) 0)))
 (let ((?x307 (* (- 1) y)))
 (let ((?x309 (+ y00 ?x307)))
 (let (($x271 (= ?x309 0)))
 (and $x271 $x279 $x136)))))))))) :qid k!31))
 ))
 (let (($x256 (exists ((q Int) (r Int) (y Int) )(! false :qid k!31))
 ))
 (let ((@x262 (elim-unused (= $x256 false))))
 (let ((?x324 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x93 (* (- 1) ?x36)))
 (let ((?x69 (* (- 1) r00)))
 (let ((?x71 (* (- 1) y00)))
 (let (($x136 (not (= (+ r ?x71 ?x69 ?x93 (* y00 (+ 1 q))) 0))))
 (let (($x279 (= (+ r ?x69 ?x93 (* y00 q)) 0)))
 (let ((?x307 (* (- 1) y)))
 (let ((?x309 (+ y00 ?x307)))
 (let (($x271 (= ?x309 0)))
 (let (($x288 (and $x271 $x279 $x136)))
 (let (($x105 (= (+ r ?x69 (* q y00) (* (- 1) (* y00 q00))) 0)))
 (let (($x113 (not $x105)))
 (let (($x80 (= (+ y ?x71) 0)))
 (let (($x249 (and $x80 $x105 $x113)))
 (let ((@x253 (rewrite (= $x249 false))))
 (let ((@x299 (monotonicity (rewrite (= ?x309 (+ ?x307 y00))) (= $x271 (= (+ ?x307 y00) 0)))))
 (let ((@x304 (trans @x299 (rewrite (= (= (+ ?x307 y00) 0) $x80)) (= $x271 $x80))))
 (let ((@x332 (monotonicity @x304 (rewrite (= $x279 $x105)) (rewrite (= $x136 $x113)) (= $x288 $x249))))
 (trans @x332 @x253 (= $x288 false)))))))))))))))))))))
 ))
 (let ((@x328 (trans (quant-intro (proof-bind ?x324) (= $x281 $x256)) @x262 (= $x281 false))))
 (let (($x339 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x93 (* (- 1) ?x36)))
 (let ((?x69 (* (- 1) r00)))
 (let ((?x71 (* (- 1) y00)))
 (let (($x136 (not (= (+ r ?x71 ?x69 ?x93 (* y00 (+ 1 q))) 0))))
 (let (($x279 (= (+ r ?x69 ?x93 (* y00 q)) 0)))
 (and (= (+ ?x71 y) 0) $x279 $x136))))))) :qid k!31))
 ))
 (let ((?x272 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x93 (* (- 1) ?x36)))
 (let ((?x69 (* (- 1) r00)))
 (let ((?x71 (* (- 1) y00)))
 (let (($x136 (not (= (+ r ?x71 ?x69 ?x93 (* y00 (+ 1 q))) 0))))
 (let (($x279 (= (+ r ?x69 ?x93 (* y00 q)) 0)))
 (let ((?x307 (* (- 1) y)))
 (let ((?x309 (+ y00 ?x307)))
 (let (($x271 (= ?x309 0)))
 (let (($x288 (and $x271 $x279 $x136)))
 (let (($x337 (and (= (+ ?x71 y) 0) $x279 $x136)))
 (rewrite (= $x337 $x288))))))))))))))
 ))
 (let (($x66 (exists ((q Int) (r Int) (y Int) )(! (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x48 (+ q 1)))
 (let ((?x59 (* 7 ?x48 y00)))
 (let ((?x56 (* 6 ?x48 ?x48 y00 y00)))
 (let ((?x45 (- r y00)))
 (let ((?x54 (* 2 ?x48 ?x45 ?x45)))
 (let ((?x57 (+ ?x54 ?x56)))
 (let ((?x60 (- ?x57 ?x59)))
 (let ((?x61 (* ?x60 ?x42)))
 (let (($x62 (= ?x61 0)))
 (let (($x63 (not $x62)))
 (let (($x52 (not (= (+ (- (- ?x45 r00) (* q00 y00)) (* ?x48 y00)) 0))))
 (let (($x43 (= ?x42 0)))
 (let (($x44 (not $x43)))
 (let (($x64 (or $x44 $x52 $x63)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x64))))))))))))))))))) :qid k!31))
 ))
 (let ((?x341 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x93 (* (- 1) ?x36)))
 (let ((?x69 (* (- 1) r00)))
 (let ((?x71 (* (- 1) y00)))
 (let (($x136 (not (= (+ r ?x71 ?x69 ?x93 (* y00 (+ 1 q))) 0))))
 (let (($x279 (= (+ r ?x69 ?x93 (* y00 q)) 0)))
 (let (($x337 (and (= (+ ?x71 y) 0) $x279 $x136)))
 (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x48 (+ q 1)))
 (let ((?x59 (* 7 ?x48 y00)))
 (let ((?x56 (* 6 ?x48 ?x48 y00 y00)))
 (let ((?x45 (- r y00)))
 (let ((?x54 (* 2 ?x48 ?x45 ?x45)))
 (let ((?x57 (+ ?x54 ?x56)))
 (let ((?x60 (- ?x57 ?x59)))
 (let ((?x61 (* ?x60 ?x42)))
 (let (($x62 (= ?x61 0)))
 (let (($x63 (not $x62)))
 (let (($x52 (not (= (+ (- (- ?x45 r00) ?x36) (* ?x48 y00)) 0))))
 (let (($x43 (= ?x42 0)))
 (let (($x44 (not $x43)))
 (let (($x64 (or $x44 $x52 $x63)))
 (let (($x41 (= (+ (- (- r r00) ?x36) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x65 (and $x33 $x41 $x64)))
 (rewrite (= $x65 $x337)))))))))))))))))))))))))))))
 ))
 (let ((@x67 (asserted $x66)))
 (let ((@x282 (mp (mp @x67 (quant-intro (proof-bind ?x341) (= $x66 $x339)) $x339) (rewrite (= $x339 $x339)) $x339)))
 (mp (mp @x282 (quant-intro (proof-bind ?x272) (= $x339 $x281)) $x281) @x328 false))))))))))))))

(:max-memory   3.35
 :memory       3.04
 :mk-bool-var  6
 :num-allocs   958830
 :num-checks   1
 :rlimit-count 439
 :time         0.01
 :total-time   0.02)
