unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(proof
(let ((?x328 (+ m!1 (* (- 6) n!0))))
 (let (($x395 (<= ?x328 6)))
 (let (($x497 (= ?x328 6)))
 (let ((?x521 (* n!0 c!3)))
 (let ((?x669 (* (- 9) ?x521)))
 (let ((?x506 (* 9 n!0)))
 (let ((?x467 (* m!1 m!1)))
 (let ((?x375 (* k!2 k!2)))
 (let ((?x129 (+ ?x375 (* (- 9) (* n!0 k!2)) (* (- 5) m!1) ?x467 ?x506 (* 2 (* m!1 k!2)) ?x669 (* (- 32) k!2) (* (- 27) c!3))))
 (let (($x531 (not (= (+ m!1 (* (- 9) n!0) (* (- 3) (* n!0 n!0)) k!2) 6))))
 (let (($x445 (not $x497)))
 (let ((?x190 (* (- 3) c!3)))
 (let ((?x473 (* (- 3) k!2)))
 (let ((?x508 (* 2 n!0)))
 (let ((?x422 (* m!1 n!0)))
 (let ((?x404 (* n!0 k!2)))
 (let ((?x336 (+ m!1 k!2)))
 (let ((?x446 (+ 1 n!0)))
 (let (($x432 (not (= (* ?x446 ?x336 ?x336 (+ 2 ?x404 ?x422 ?x508 ?x473 ?x190)) 0))))
 (let (($x583 (or (not (= (+ ?x404 ?x422 ?x508 ?x473 ?x190) (- 2))) $x432 $x445 $x531 (not (= ?x129 (- 13))))))
 (let ((?x507 (* (- 1) k!2)))
 (let ((?x384 (* 3 n!0)))
 (let ((?x317 (+ ?x384 (* 3 (* n!0 n!0)) ?x507)))
 (let (($x304 (= ?x317 0)))
 (let ((?x401 (+ ?x404 ?x508 ?x507 ?x190)))
 (let (($x396 (= ?x401 0)))
 (let ((?x419 (* (- 18) c!3)))
 (let ((?x424 (* (- 5) k!2)))
 (let ((?x641 (+ ?x375 ?x506 ?x669 ?x424 ?x419)))
 (let (($x418 (= ?x641 (- 4))))
 (let (($x580 (and $x497 $x418 $x396 $x304 $x583)))
 (let ((?x326 (* k!2 n!0)))
 (let ((?x327 (* (- 1) ?x326)))
 (let ((?x565 (* (- 2) n!0)))
 (let ((?x499 (* 3 c!3)))
 (let ((?x184 (* 9 (* c!3 n!0))))
 (let ((?x434 (* (- 1) ?x375)))
 (let ((?x498 (* (- 9) n!0)))
 (let ((?x529 (+ (* 27 c!3) (* 32 k!2) (* 5 m!1) ?x498 ?x434 (* 9 ?x326) ?x184 (* (- 2) (* k!2 m!1)) (* (- 1) ?x467))))
 (let ((?x340 (+ k!2 m!1)))
 (let (($x354 (not (= (* ?x446 ?x340 ?x340 (+ 2 ?x190 ?x473 ?x508 ?x326 ?x422)) 0))))
 (let (($x382 (or (not (= (+ k!2 m!1 ?x498 (* (- 3) (* n!0 n!0))) 6)) $x445 $x354 (not (= ?x529 13)) (not (= (+ ?x499 (* 3 k!2) ?x565 ?x327 (* (- 1) ?x422)) 2)))))
 (let (($x383 (and $x497 (= (+ (* 18 c!3) (* 5 k!2) ?x498 ?x434 ?x184) 4) (= (+ ?x499 k!2 ?x565 ?x327) 0) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 0) $x382)))
 (let (($x484 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x52 (* k n)))
 (let ((?x258 (* (- 1) ?x52)))
 (let ((?x257 (* (- 2) n)))
 (let ((?x255 (* 3 c)))
 (let (($x540 (= (+ ?x255 (* 3 k) ?x257 ?x258 (* (- 1) (* m n))) 2)))
 (let (($x548 (not $x540)))
 (let ((?x155 (* 9 (* c n))))
 (let ((?x46 (* k k)))
 (let ((?x218 (* (- 1) ?x46)))
 (let ((?x217 (* (- 9) n)))
 (let ((?x430 (* 5 m)))
 (let ((?x518 (+ (* 27 c) (* 32 k) ?x430 ?x217 ?x218 (* 9 ?x52) ?x155 (* (- 2) (* k m)) (* (- 1) (* m m)))))
 (let (($x522 (not (= ?x518 13))))
 (let ((?x367 (* m n)))
 (let ((?x56 (* 2 n)))
 (let ((?x306 (* (- 3) k)))
 (let ((?x226 (* (- 3) c)))
 (let ((?x74 (+ k m)))
 (let ((?x130 (+ 1 n)))
 (let (($x472 (not (= (* ?x130 ?x74 ?x74 (+ 2 ?x226 ?x306 ?x56 ?x52 ?x367)) 0))))
 (let (($x138 (= (+ m (* (- 6) n)) 6)))
 (let (($x356 (not $x138)))
 (let (($x400 (or (not (= (+ k m ?x217 (* (- 3) (* n n))) 6)) $x356 $x472 $x522 $x548)))
 (let (($x296 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 0)))
 (let (($x260 (= (+ ?x255 k ?x257 ?x258) 0)))
 (let (($x215 (= (+ (* 18 c) (* 5 k) ?x217 ?x218 ?x155) 4)))
 (and $x138 $x215 $x260 $x296 $x400))))))))))))))))))))))))))) :qid k!38))
 ))
 (let (($x277 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x61 (* 3 n)))
 (let ((?x519 (* (- 1) m)))
 (let ((?x474 (* (- 1) k)))
 (let (($x699 (= (+ (* 3 (* (+ 1 n) (+ 1 n))) ?x474 ?x519 ?x61) (- 3))))
 (let (($x685 (not $x699)))
 (let (($x138 (= (+ m (* (- 6) n)) 6)))
 (let (($x356 (not $x138)))
 (let ((?x56 (* 2 n)))
 (let ((?x74 (+ k m)))
 (let ((?x130 (+ 1 n)))
 (let ((?x303 (* ?x130 ?x74)))
 (let ((?x169 (* (- 4) k)))
 (let ((?x226 (* (- 3) c)))
 (let (($x323 (not (= (* ?x130 ?x74 ?x74 (+ 2 ?x226 ?x169 ?x303 ?x519 ?x56)) 0))))
 (let ((?x217 (* (- 9) n)))
 (let ((?x430 (* 5 m)))
 (let ((?x37 (* 18 c)))
 (let ((?x545 (+ ?x37 (* 23 k) (* 9 (* ?x130 (+ c k))) ?x430 ?x217 (* (- 1) (* ?x74 ?x74)))))
 (let ((?x257 (* (- 2) n)))
 (let ((?x255 (* 3 c)))
 (let (($x399 (or (not (= (+ ?x255 (* 4 k) (* (- 1) ?x303) m ?x257) 2)) (not (= ?x545 13)) $x323 $x356 $x685)))
 (let (($x331 (= (+ (* 3 (* n n)) ?x474 ?x61) 0)))
 (let ((?x46 (* k k)))
 (let ((?x218 (* (- 1) ?x46)))
 (let ((?x41 (* 5 k)))
 (and $x138 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x217 ?x218) 4) (= (+ ?x255 (* (- 1) (* n k)) k ?x257) 0) $x331 $x399)))))))))))))))))))))))))) :qid k!38))
 ))
 (let ((?x488 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x52 (* k n)))
 (let ((?x258 (* (- 1) ?x52)))
 (let ((?x257 (* (- 2) n)))
 (let ((?x255 (* 3 c)))
 (let (($x540 (= (+ ?x255 (* 3 k) ?x257 ?x258 (* (- 1) (* m n))) 2)))
 (let (($x548 (not $x540)))
 (let ((?x155 (* 9 (* c n))))
 (let ((?x46 (* k k)))
 (let ((?x218 (* (- 1) ?x46)))
 (let ((?x217 (* (- 9) n)))
 (let ((?x430 (* 5 m)))
 (let ((?x518 (+ (* 27 c) (* 32 k) ?x430 ?x217 ?x218 (* 9 ?x52) ?x155 (* (- 2) (* k m)) (* (- 1) (* m m)))))
 (let (($x522 (not (= ?x518 13))))
 (let ((?x367 (* m n)))
 (let ((?x56 (* 2 n)))
 (let ((?x306 (* (- 3) k)))
 (let ((?x226 (* (- 3) c)))
 (let ((?x74 (+ k m)))
 (let ((?x130 (+ 1 n)))
 (let (($x472 (not (= (* ?x130 ?x74 ?x74 (+ 2 ?x226 ?x306 ?x56 ?x52 ?x367)) 0))))
 (let (($x138 (= (+ m (* (- 6) n)) 6)))
 (let (($x356 (not $x138)))
 (let (($x400 (or (not (= (+ k m ?x217 (* (- 3) (* n n))) 6)) $x356 $x472 $x522 $x548)))
 (let (($x296 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 0)))
 (let (($x260 (= (+ ?x255 k ?x257 ?x258) 0)))
 (let (($x215 (= (+ (* 18 c) (* 5 k) ?x217 ?x218 ?x155) 4)))
 (let (($x504 (and $x138 $x215 $x260 $x296 $x400)))
 (let ((?x61 (* 3 n)))
 (let ((?x519 (* (- 1) m)))
 (let ((?x474 (* (- 1) k)))
 (let (($x685 (not (= (+ (* 3 (* ?x130 ?x130)) ?x474 ?x519 ?x61) (- 3)))))
 (let ((?x239 (* ?x130 ?x74 ?x74 (+ 2 ?x226 (* (- 4) k) (* ?x130 ?x74) ?x519 ?x56))))
 (let (($x323 (not (= ?x239 0))))
 (let ((?x37 (* 18 c)))
 (let ((?x545 (+ ?x37 (* 23 k) (* 9 (* ?x130 (+ c k))) ?x430 ?x217 (* (- 1) (* ?x74 ?x74)))))
 (let (($x374 (= (+ ?x255 (* 4 k) (* (- 1) (* ?x130 ?x74)) m ?x257) 2)))
 (let (($x331 (= (+ (* 3 (* n n)) ?x474 ?x61) 0)))
 (let (($x168 (= (+ ?x37 (* 9 (* n c)) (* 5 k) ?x217 ?x218) 4)))
 (let (($x316 (and $x138 $x168 (= (+ ?x255 (* (- 1) (* n k)) k ?x257) 0) $x331 (or (not $x374) (not (= ?x545 13)) $x323 $x356 $x685))))
 (rewrite (= $x316 $x504))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x547 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x61 (* 3 n)))
 (let ((?x519 (* (- 1) m)))
 (let ((?x474 (* (- 1) k)))
 (let (($x699 (= (+ (* 3 (* (+ 1 n) (+ 1 n))) ?x474 ?x519 ?x61) (- 3))))
 (let (($x685 (not $x699)))
 (let ((?x74 (+ k m)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x454 (* (- 18) c)))
 (let ((?x406 (+ ?x454 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) (* (- 5) m) ?x45 ?x80)))
 (let (($x138 (= (+ m (* (- 6) n)) 6)))
 (let (($x356 (not $x138)))
 (let ((?x56 (* 2 n)))
 (let ((?x130 (+ 1 n)))
 (let ((?x303 (* ?x130 ?x74)))
 (let ((?x169 (* (- 4) k)))
 (let ((?x226 (* (- 3) c)))
 (let (($x323 (not (= (* ?x130 ?x74 ?x74 (+ 2 ?x226 ?x169 ?x303 ?x519 ?x56)) 0))))
 (let (($x240 (or (not (= (+ ?x226 ?x169 ?x303 ?x519 ?x56) (- 2))) $x323 $x356 (not (= ?x406 (- 13))) $x685)))
 (let (($x331 (= (+ (* 3 (* n n)) ?x474 ?x61) 0)))
 (let (($x196 (= (+ ?x454 (* (- 9) (* n c)) (* (- 5) k) ?x45 (* k k)) (- 4))))
 (and $x138 $x196 (= (+ ?x226 (* n k) ?x474 ?x56) 0) $x331 $x240)))))))))))))))))))))) :qid k!38))
 ))
 (let ((?x175 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x61 (* 3 n)))
 (let ((?x519 (* (- 1) m)))
 (let ((?x474 (* (- 1) k)))
 (let (($x699 (= (+ (* 3 (* (+ 1 n) (+ 1 n))) ?x474 ?x519 ?x61) (- 3))))
 (let (($x685 (not $x699)))
 (let (($x138 (= (+ m (* (- 6) n)) 6)))
 (let (($x356 (not $x138)))
 (let ((?x56 (* 2 n)))
 (let ((?x74 (+ k m)))
 (let ((?x130 (+ 1 n)))
 (let ((?x303 (* ?x130 ?x74)))
 (let ((?x169 (* (- 4) k)))
 (let ((?x226 (* (- 3) c)))
 (let (($x323 (not (= (* ?x130 ?x74 ?x74 (+ 2 ?x226 ?x169 ?x303 ?x519 ?x56)) 0))))
 (let ((?x217 (* (- 9) n)))
 (let ((?x430 (* 5 m)))
 (let ((?x37 (* 18 c)))
 (let ((?x545 (+ ?x37 (* 23 k) (* 9 (* ?x130 (+ c k))) ?x430 ?x217 (* (- 1) (* ?x74 ?x74)))))
 (let ((?x257 (* (- 2) n)))
 (let ((?x255 (* 3 c)))
 (let (($x399 (or (not (= (+ ?x255 (* 4 k) (* (- 1) ?x303) m ?x257) 2)) (not (= ?x545 13)) $x323 $x356 $x685)))
 (let (($x331 (= (+ (* 3 (* n n)) ?x474 ?x61) 0)))
 (let ((?x46 (* k k)))
 (let ((?x218 (* (- 1) ?x46)))
 (let ((?x41 (* 5 k)))
 (let (($x316 (and $x138 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x217 ?x218) 4) (= (+ ?x255 (* (- 1) (* n k)) k ?x257) 0) $x331 $x399)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x454 (* (- 18) c)))
 (let ((?x406 (+ ?x454 (* (- 23) k) (* (- 9) (* ?x130 (+ c k))) (* (- 5) m) ?x45 ?x80)))
 (let (($x240 (or (not (= (+ ?x226 ?x169 ?x303 ?x519 ?x56) (- 2))) $x323 $x356 (not (= ?x406 (- 13))) $x685)))
 (let (($x196 (= (+ ?x454 (* (- 9) (* n c)) (* (- 5) k) ?x45 ?x46) (- 4))))
 (let (($x585 (and $x138 $x196 (= (+ ?x226 (* n k) ?x474 ?x56) 0) $x331 $x240)))
 (rewrite (= $x585 $x316))))))))))))))))))))))))))))))))))))
 ))
 (let (($x103 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x74 (+ k m)))
 (let ((?x89 (+ (- (+ (* (- 3) (+ c k)) (* ?x74 (+ n 1))) ?x74) (* 2 (+ n 1)))))
 (let ((?x66 (+ n 1)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x78 (- (- (- 4 (* 18 (+ c k))) (* 9 (+ c k) ?x66)) (* 5 ?x74))))
 (let (($x101 (or (not (= (- (+ (- 6) m 6) (* 6 ?x66)) 0)) (not (= (+ ?x78 (* 9 ?x66) ?x80) 0)) (not (= ?x89 0)) (not (= (+ (- (* 3 ?x66 ?x66) ?x74) (* 3 ?x66)) 0)) (not (= (* 4 ?x74 ?x74 ?x66 ?x89) 0)))))
 (let (($x58 (= (+ (- (+ (* (- 3) c) (* k n)) k) (* 2 n)) 0)))
 (let ((?x46 (* k k)))
 (let ((?x45 (* 9 n)))
 (let ((?x41 (* 5 k)))
 (let ((?x47 (+ (- (- (- 4 (* 18 c)) (* 9 c n)) ?x41) ?x45 ?x46)))
 (and (= (- (+ (- 6) m) (* 6 n)) 0) (= ?x47 0) $x58 (= (+ (- (* 3 n n) k) (* 3 n)) 0) $x101)))))))))))) :qid k!38))
 ))
 (let ((?x307 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x61 (* 3 n)))
 (let ((?x519 (* (- 1) m)))
 (let ((?x474 (* (- 1) k)))
 (let (($x699 (= (+ (* 3 (* (+ 1 n) (+ 1 n))) ?x474 ?x519 ?x61) (- 3))))
 (let (($x685 (not $x699)))
 (let ((?x74 (+ k m)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x454 (* (- 18) c)))
 (let ((?x406 (+ ?x454 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) (* (- 5) m) ?x45 ?x80)))
 (let (($x138 (= (+ m (* (- 6) n)) 6)))
 (let (($x356 (not $x138)))
 (let ((?x56 (* 2 n)))
 (let ((?x130 (+ 1 n)))
 (let ((?x303 (* ?x130 ?x74)))
 (let ((?x169 (* (- 4) k)))
 (let ((?x226 (* (- 3) c)))
 (let (($x323 (not (= (* ?x130 ?x74 ?x74 (+ 2 ?x226 ?x169 ?x303 ?x519 ?x56)) 0))))
 (let (($x240 (or (not (= (+ ?x226 ?x169 ?x303 ?x519 ?x56) (- 2))) $x323 $x356 (not (= ?x406 (- 13))) $x685)))
 (let (($x331 (= (+ (* 3 (* n n)) ?x474 ?x61) 0)))
 (let (($x196 (= (+ ?x454 (* (- 9) (* n c)) (* (- 5) k) ?x45 (* k k)) (- 4))))
 (let (($x585 (and $x138 $x196 (= (+ ?x226 (* n k) ?x474 ?x56) 0) $x331 $x240)))
 (let ((?x89 (+ (- (+ (* (- 3) (+ c k)) (* ?x74 (+ n 1))) ?x74) (* 2 (+ n 1)))))
 (let ((?x66 (+ n 1)))
 (let ((?x78 (- (- (- 4 (* 18 (+ c k))) (* 9 (+ c k) ?x66)) (* 5 ?x74))))
 (let (($x101 (or (not (= (- (+ (- 6) m 6) (* 6 ?x66)) 0)) (not (= (+ ?x78 (* 9 ?x66) ?x80) 0)) (not (= ?x89 0)) (not (= (+ (- (* 3 ?x66 ?x66) ?x74) (* 3 ?x66)) 0)) (not (= (* 4 ?x74 ?x74 ?x66 ?x89) 0)))))
 (let ((?x46 (* k k)))
 (let ((?x41 (* 5 k)))
 (let ((?x47 (+ (- (- (- 4 (* 18 c)) (* 9 c n)) ?x41) ?x45 ?x46)))
 (let (($x102 (and (= (- (+ (- 6) m) (* 6 n)) 0) (= ?x47 0) (= (+ (- (+ (* (- 3) c) (* k n)) k) ?x56) 0) (= (+ (- (* 3 n n) k) ?x61) 0) $x101)))
 (rewrite (= $x102 $x585)))))))))))))))))))))))))))))))))
 ))
 (let ((@x104 (asserted $x103)))
 (let ((@x469 (mp (mp @x104 (quant-intro (proof-bind ?x307) (= $x103 $x547)) $x547) (rewrite (= $x547 $x547)) $x547)))
 (let ((@x661 (mp (mp @x469 (quant-intro (proof-bind ?x175) (= $x547 $x277)) $x277) (quant-intro (proof-bind ?x488) (= $x277 $x484)) $x484)))
 (let ((@x509 (mp (mp~ @x661 (sk (~ $x484 $x383)) $x383) (rewrite (= $x383 $x580)) $x580)))
 (let ((@x346 (and-elim @x509 $x497)))
 (let ((@x476 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x445 $x395)) @x346 $x395)))
 (let (($x671 (>= ?x328 6)))
 (let ((@x373 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x445 $x671)) @x346 $x671)))
 (let (($x342 (<= ?x401 0)))
 (let ((@x370 (and-elim @x509 $x396)))
 (let ((@x411 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x396) $x342)) @x370 $x342)))
 (let (($x318 (>= ?x401 0)))
 (let ((@x267 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x396) $x318)) @x370 $x318)))
 (let (($x530 (<= ?x641 (- 4))))
 (let ((@x584 (and-elim @x509 $x418)))
 (let ((@x386 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x418) $x530)) @x584 $x530)))
 (let (($x345 (>= ?x641 (- 4))))
 (let ((@x381 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x418) $x345)) @x584 $x345)))
 (let ((?x528 (* n!0 n!0)))
 (let ((?x536 (* (- 3) ?x528)))
 (let ((?x350 (+ m!1 ?x498 ?x536 k!2)))
 (let (($x312 (<= ?x350 6)))
 (let (($x310 (>= ?x317 0)))
 (let ((@x624 (and-elim @x509 $x304)))
 (let ((@x578 (unit-resolution ((_ th-lemma arith assign-bounds 1 -1) (or $x312 (not $x310) (not $x395))) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x304) $x310)) @x624 $x310) @x476 $x312)))
 (let (($x131 (>= ?x350 6)))
 (let (($x309 (<= ?x317 0)))
 (let ((@x495 ((_ th-lemma arith farkas 1 -1 1) (hypothesis (not $x131)) @x373 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x304) $x309)) @x624 $x309) false)))
 (let ((@x486 (lemma @x495 $x131)))
 (let (($x1331 (>= (+ ?x375 m!1 ?x384 (* (- 7) ?x521) ?x424 ?x419) 5)))
 (let ((@x1373 ((_ th-lemma arith) (hypothesis (not $x1331)) @x267 @x411 @x373 @x476 @x381 @x386 @x373 @x476 @x381 @x386 @x373 @x476 @x381 @x386 @x486 @x578 @x373 @x476 @x381 @x386 false)))
 ((_ th-lemma arith) (lemma @x1373 $x1331) @x373 @x476 @x381 @x386 @x373 @x476 @x486 @x578 @x373 @x476 @x486 @x578 @x486 @x578 @x486 @x578 @x373 @x476 @x381 @x386 @x373 @x476 @x381 @x386 @x381 @x386 @x267 @x411 @x373 @x476 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 31
 :arith-assert-diseq        49
 :arith-assert-lower        428
 :arith-assert-upper        200
 :arith-bound-prop          9
 :arith-branch-var          27
 :arith-conflicts           42
 :arith-eq-adapter          13
 :arith-fixed-eqs           53
 :arith-gcd-tests           192
 :arith-gomory-cuts         20
 :arith-grobner             42
 :arith-ineq-splits         27
 :arith-max-min             2398
 :arith-nonlinear-bounds    116
 :arith-nonlinear-horner    381
 :arith-num-rows            16
 :arith-offset-eqs          2
 :arith-patches             69
 :arith-patches_succ        15
 :arith-pivots              656
 :arith-pseudo-nonlinear    46
 :arith-row-summations      3156
 :arith-tableau-max-columns 50
 :arith-tableau-max-rows    16
 :conflicts                 44
 :decisions                 195
 :del-clause                75
 :final-checks              150
 :max-memory                4.00
 :memory                    3.27
 :minimized-lits            5
 :mk-bool-var               153
 :mk-clause                 100
 :num-allocs                43899122
 :num-checks                1
 :propagations              230
 :rlimit-count              313965
 :time                      0.39
 :total-time                0.40)
