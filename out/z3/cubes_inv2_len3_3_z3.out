unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let (($x772 (>= n!0 (- 1))))
 (let ((?x599 (* k!2 n!0)))
 (let ((?x592 (* (- 1) ?x599)))
 (let ((?x154 (* (- 2) n!0)))
 (let ((?x283 (* 3 c!3)))
 (let ((?x493 (+ k!2 ?x283 ?x154 ?x592)))
 (let (($x449 (<= ?x493 0)))
 (let (($x309 (= ?x493 0)))
 (let ((?x335 (+ m!1 (* (- 6) n!0))))
 (let (($x544 (= ?x335 6)))
 (let (($x543 (not $x544)))
 (let ((?x247 (* (- 9) ?x599)))
 (let ((?x618 (* 9 n!0)))
 (let ((?x506 (* (- 27) c!3)))
 (let ((?x510 (* (- 32) k!2)))
 (let ((?x185 (* k!2 k!2)))
 (let ((?x183 (* m!1 m!1)))
 (let ((?x512 (* (- 5) m!1)))
 (let ((?x131 (* c!3 n!0)))
 (let ((?x179 (* (- 9) ?x131)))
 (let ((?x156 (+ 13 ?x179 ?x512 ?x183 ?x185 ?x510 ?x506 (* 2 (* m!1 k!2)) ?x618 ?x247)))
 (let ((?x557 (* 42 (* k!2 k!2 k!2))))
 (let ((?x416 (* 8 n!0)))
 (let ((?x231 (* n!0 n!0)))
 (let ((?x560 (* 4 ?x231)))
 (let ((?x479 (* 3 ?x185)))
 (let ((?x153 (+ 4 ?x479 ?x560 (* 7 (* m!1 m!1 c!3 c!3)) (* 14 (* m!1 m!1 k!2 c!3)) (* 7 (* m!1 m!1 k!2 k!2)) (* 3 (* k!2 c!3)) (* 3 (* m!1 c!3)) (* 7 (* m!1 k!2 c!3 c!3)) (* 14 (* m!1 k!2 k!2 c!3)) (* 7 (* m!1 k!2 k!2 k!2)) (* 3 (* m!1 k!2)) (* 42 (* k!2 c!3 c!3)) ?x416 (* 84 (* k!2 k!2 c!3)) ?x557 (* 42 (* m!1 c!3 c!3)) (* 42 (* m!1 k!2 k!2)) (* 84 (* m!1 k!2 c!3)))))
 (let (($x602 (= (+ (* 3 k!2) ?x283 ?x154 (* (- 1) (* m!1 n!0)) ?x592) 2)))
 (let ((?x412 (* 9 ?x599)))
 (let ((?x399 (* (- 9) n!0)))
 (let ((?x585 (* 27 c!3)))
 (let ((?x201 (* 32 k!2)))
 (let ((?x403 (* (- 1) ?x185)))
 (let ((?x160 (* (- 1) ?x183)))
 (let ((?x409 (* 5 m!1)))
 (let ((?x401 (* 9 ?x131)))
 (let ((?x149 (+ ?x401 ?x409 ?x160 ?x403 ?x201 ?x585 (* (- 2) (* m!1 k!2)) ?x399 ?x412)))
 (let (($x433 (or (not (= (+ m!1 (* (- 3) ?x231) k!2 ?x399) 6)) (not (= ?x149 13)) (not $x602) (not (= (* ?x153 ?x156) 0)) $x543)))
 (let ((?x197 (+ (* 3 ?x231) (* (- 1) k!2) (* 3 n!0))))
 (let (($x456 (= ?x197 0)))
 (let ((?x186 (* 18 c!3)))
 (let ((?x375 (* 5 k!2)))
 (let ((?x492 (+ ?x401 ?x403 ?x375 ?x186 ?x399)))
 (let (($x245 (= ?x492 4)))
 (let (($x253 (and $x544 $x245 $x309 $x456 $x433)))
 (let (($x345 (= (+ ?x283 (* 3 k!2) ?x154 ?x592 (* (- 1) (* m!1 n!0))) 2)))
 (let ((?x374 (+ ?x585 ?x201 ?x409 ?x399 ?x403 ?x412 ?x401 (* (- 2) (* k!2 m!1)) ?x160)))
 (let ((?x113 (+ 13 ?x506 ?x510 ?x512 ?x618 ?x185 ?x247 ?x179 (* 2 (* k!2 m!1)) ?x183)))
 (let ((?x157 (+ 4 ?x416 ?x479 ?x560 (* 42 (* c!3 c!3 m!1)) (* 42 (* k!2 k!2 m!1)) (* 84 (* c!3 k!2 k!2)) (* 84 (* c!3 k!2 m!1)) (* 3 (* k!2 m!1)) (* 42 (* c!3 c!3 k!2)) ?x557 (* 7 (* c!3 c!3 k!2 m!1)) (* 14 (* c!3 k!2 k!2 m!1)) (* 7 (* k!2 k!2 k!2 m!1)) (* 7 (* c!3 c!3 m!1 m!1)) (* 14 (* c!3 k!2 m!1 m!1)) (* 7 (* k!2 k!2 m!1 m!1)) (* 3 (* c!3 k!2)) (* 3 (* c!3 m!1)))))
 (let (($x177 (or (not (= (* ?x157 ?x113) 0)) $x543 (not (= (+ k!2 m!1 ?x399 (* (- 3) ?x231)) 6)) (not (= ?x374 13)) (not $x345))))
 (let (($x178 (and $x544 (= (+ ?x186 ?x375 ?x399 ?x403 ?x401) 4) (= (+ ?x283 k!2 ?x154 ?x592) 0) (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x231)) 0) $x177)))
 (let (($x562 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x52 (* k n)))
 (let ((?x264 (* (- 1) ?x52)))
 (let ((?x263 (* (- 2) n)))
 (let ((?x261 (* 3 c)))
 (let (($x607 (= (+ ?x261 (* 3 k) ?x263 ?x264 (* (- 1) (* m n))) 2)))
 (let (($x615 (not $x607)))
 (let ((?x159 (* c n)))
 (let ((?x161 (* 9 ?x159)))
 (let ((?x46 (* k k)))
 (let ((?x224 (* (- 1) ?x46)))
 (let ((?x223 (* (- 9) n)))
 (let ((?x436 (* 5 m)))
 (let ((?x524 (+ (* 27 c) (* 32 k) ?x436 ?x223 ?x224 (* 9 ?x52) ?x161 (* (- 2) (* k m)) (* (- 1) (* m m)))))
 (let (($x528 (not (= ?x524 13))))
 (let (($x144 (= (+ m (* (- 6) n)) 6)))
 (let (($x362 (not $x144)))
 (let ((?x487 (* m m)))
 (let ((?x45 (* 9 n)))
 (let ((?x453 (* (- 5) m)))
 (let ((?x508 (+ 13 (* (- 27) c) (* (- 32) k) ?x453 ?x45 ?x46 (* (- 9) ?x52) (* (- 9) ?x159) (* 2 (* k m)) ?x487)))
 (let ((?x675 (* 3 (* c m))))
 (let ((?x672 (* 3 (* c k))))
 (let ((?x665 (* 7 (* k k m m))))
 (let ((?x659 (* 7 (* c c m m))))
 (let ((?x657 (* 7 (* k k k m))))
 (let ((?x651 (* 7 (* c c k m))))
 (let ((?x486 (* k m)))
 (let ((?x676 (* 3 ?x486)))
 (let ((?x271 (* n n)))
 (let ((?x542 (* 4 ?x271)))
 (let ((?x673 (* 3 ?x46)))
 (let ((?x458 (+ 4 (* 8 n) ?x673 ?x542 (* 42 (* c c m)) (* 42 (* k k m)) (* 84 (* c k k)) (* 84 (* c k m)) ?x676 (* 42 (* c c k)) (* 42 (* k k k)) ?x651 (* 14 (* c k k m)) ?x657 ?x659 (* 14 (* c k m m)) ?x665 ?x672 ?x675)))
 (let (($x136 (or (not (= (* ?x458 ?x508) 0)) $x362 (not (= (+ k m ?x223 (* (- 3) ?x271)) 6)) $x528 $x615)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) ?x271)) 0)))
 (let (($x266 (= (+ ?x261 k ?x263 ?x264) 0)))
 (let (($x221 (= (+ (* 18 c) (* 5 k) ?x223 ?x224 ?x161) 4)))
 (and $x144 $x221 $x266 $x302 $x136))))))))))))))))))))))))))))))))))))) :qid k!38))
 ))
 (let (($x392 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x223 (* (- 9) n)))
 (let ((?x436 (* 5 m)))
 (let ((?x37 (* 18 c)))
 (let ((?x477 (+ ?x37 (* 23 k) (* 9 (* (+ 1 n) (+ c k))) ?x436 ?x223 (* (- 1) (* (+ k m) (+ k m))))))
 (let (($x144 (= (+ m (* (- 6) n)) 6)))
 (let (($x362 (not $x144)))
 (let ((?x263 (* (- 2) n)))
 (let ((?x261 (* 3 c)))
 (let ((?x425 (+ ?x261 (* 4 k) (* (- 1) (* (+ 1 n) (+ k m))) m ?x263)))
 (let ((?x74 (+ k m)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x453 (* (- 5) m)))
 (let ((?x71 (+ c k)))
 (let ((?x499 (+ 1 n)))
 (let ((?x410 (* ?x499 ?x71)))
 (let ((?x424 (* (- 9) ?x410)))
 (let ((?x329 (* (- 23) k)))
 (let ((?x468 (* (- 18) c)))
 (let ((?x276 (+ (* 4 (* ?x499 ?x499)) (* 7 (* (+ 6 m) ?x74 ?x71 ?x71)) (* 3 (* ?x74 ?x71)))))
 (let (($x286 (not (= (* ?x276 (+ 13 ?x468 ?x329 ?x424 ?x453 ?x45 ?x80)) 0))))
 (let ((?x61 (* 3 n)))
 (let ((?x502 (* (- 1) m)))
 (let ((?x484 (* (- 1) k)))
 (let (($x242 (not (= (+ (* 3 (* ?x499 ?x499)) ?x484 ?x502 ?x61) (- 3)))))
 (let (($x574 (= (+ (* 3 (* n n)) ?x484 ?x61) 0)))
 (let ((?x46 (* k k)))
 (let ((?x224 (* (- 1) ?x46)))
 (let ((?x41 (* 5 k)))
 (and $x144 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x223 ?x224) 4) (= (+ ?x261 (* (- 1) (* n k)) k ?x263) 0) $x574 (or $x242 $x286 (not (= ?x425 2)) $x362 (not (= ?x477 13))))))))))))))))))))))))))))))))) :qid k!38))
 ))
 (let ((?x550 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x52 (* k n)))
 (let ((?x264 (* (- 1) ?x52)))
 (let ((?x263 (* (- 2) n)))
 (let ((?x261 (* 3 c)))
 (let (($x607 (= (+ ?x261 (* 3 k) ?x263 ?x264 (* (- 1) (* m n))) 2)))
 (let (($x615 (not $x607)))
 (let ((?x159 (* c n)))
 (let ((?x161 (* 9 ?x159)))
 (let ((?x46 (* k k)))
 (let ((?x224 (* (- 1) ?x46)))
 (let ((?x223 (* (- 9) n)))
 (let ((?x436 (* 5 m)))
 (let ((?x524 (+ (* 27 c) (* 32 k) ?x436 ?x223 ?x224 (* 9 ?x52) ?x161 (* (- 2) (* k m)) (* (- 1) (* m m)))))
 (let (($x528 (not (= ?x524 13))))
 (let (($x144 (= (+ m (* (- 6) n)) 6)))
 (let (($x362 (not $x144)))
 (let ((?x487 (* m m)))
 (let ((?x45 (* 9 n)))
 (let ((?x453 (* (- 5) m)))
 (let ((?x508 (+ 13 (* (- 27) c) (* (- 32) k) ?x453 ?x45 ?x46 (* (- 9) ?x52) (* (- 9) ?x159) (* 2 (* k m)) ?x487)))
 (let ((?x675 (* 3 (* c m))))
 (let ((?x672 (* 3 (* c k))))
 (let ((?x665 (* 7 (* k k m m))))
 (let ((?x659 (* 7 (* c c m m))))
 (let ((?x657 (* 7 (* k k k m))))
 (let ((?x651 (* 7 (* c c k m))))
 (let ((?x486 (* k m)))
 (let ((?x676 (* 3 ?x486)))
 (let ((?x271 (* n n)))
 (let ((?x542 (* 4 ?x271)))
 (let ((?x673 (* 3 ?x46)))
 (let ((?x458 (+ 4 (* 8 n) ?x673 ?x542 (* 42 (* c c m)) (* 42 (* k k m)) (* 84 (* c k k)) (* 84 (* c k m)) ?x676 (* 42 (* c c k)) (* 42 (* k k k)) ?x651 (* 14 (* c k k m)) ?x657 ?x659 (* 14 (* c k m m)) ?x665 ?x672 ?x675)))
 (let (($x136 (or (not (= (* ?x458 ?x508) 0)) $x362 (not (= (+ k m ?x223 (* (- 3) ?x271)) 6)) $x528 $x615)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) ?x271)) 0)))
 (let (($x266 (= (+ ?x261 k ?x263 ?x264) 0)))
 (let (($x221 (= (+ (* 18 c) (* 5 k) ?x223 ?x224 ?x161) 4)))
 (let (($x483 (and $x144 $x221 $x266 $x302 $x136)))
 (let ((?x37 (* 18 c)))
 (let ((?x477 (+ ?x37 (* 23 k) (* 9 (* (+ 1 n) (+ c k))) ?x436 ?x223 (* (- 1) (* (+ k m) (+ k m))))))
 (let ((?x425 (+ ?x261 (* 4 k) (* (- 1) (* (+ 1 n) (+ k m))) m ?x263)))
 (let ((?x74 (+ k m)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x71 (+ c k)))
 (let ((?x499 (+ 1 n)))
 (let ((?x410 (* ?x499 ?x71)))
 (let ((?x424 (* (- 9) ?x410)))
 (let ((?x329 (* (- 23) k)))
 (let ((?x468 (* (- 18) c)))
 (let ((?x276 (+ (* 4 (* ?x499 ?x499)) (* 7 (* (+ 6 m) ?x74 ?x71 ?x71)) (* 3 (* ?x74 ?x71)))))
 (let (($x286 (not (= (* ?x276 (+ 13 ?x468 ?x329 ?x424 ?x453 ?x45 ?x80)) 0))))
 (let ((?x61 (* 3 n)))
 (let ((?x502 (* (- 1) m)))
 (let ((?x484 (* (- 1) k)))
 (let (($x242 (not (= (+ (* 3 (* ?x499 ?x499)) ?x484 ?x502 ?x61) (- 3)))))
 (let (($x574 (= (+ (* 3 ?x271) ?x484 ?x61) 0)))
 (let (($x478 (= (+ ?x37 (* 9 (* n c)) (* 5 k) ?x223 ?x224) 4)))
 (let (($x469 (and $x144 $x478 (= (+ ?x261 (* (- 1) (* n k)) k ?x263) 0) $x574 (or $x242 $x286 (not (= ?x425 2)) $x362 (not (= ?x477 13))))))
 (rewrite (= $x469 $x483))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x398 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x74 (+ k m)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x453 (* (- 5) m)))
 (let ((?x71 (+ c k)))
 (let ((?x499 (+ 1 n)))
 (let ((?x410 (* ?x499 ?x71)))
 (let ((?x424 (* (- 9) ?x410)))
 (let ((?x329 (* (- 23) k)))
 (let ((?x468 (* (- 18) c)))
 (let (($x144 (= (+ m (* (- 6) n)) 6)))
 (let (($x362 (not $x144)))
 (let ((?x56 (* 2 n)))
 (let ((?x502 (* (- 1) m)))
 (let ((?x438 (* ?x499 ?x74)))
 (let ((?x318 (* (- 3) c)))
 (let ((?x276 (+ (* 4 (* ?x499 ?x499)) (* 7 (* (+ 6 m) ?x74 ?x71 ?x71)) (* 3 (* ?x74 ?x71)))))
 (let (($x286 (not (= (* ?x276 (+ 13 ?x468 ?x329 ?x424 ?x453 ?x45 ?x80)) 0))))
 (let (($x305 (= (+ (* 3 (* ?x499 ?x499)) (* (- 1) k) ?x502 (* 3 n)) (- 3))))
 (let (($x242 (not $x305)))
 (let (($x440 (or $x242 $x286 (not (= (+ ?x318 (* (- 4) k) ?x438 ?x502 ?x56) (- 2))) $x362 (not (= (+ ?x468 ?x329 ?x424 ?x453 ?x45 ?x80) (- 13))))))
 (let (($x574 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) 0)))
 (let (($x330 (= (+ ?x468 (* (- 9) (* n c)) (* (- 5) k) ?x45 (* k k)) (- 4))))
 (and $x144 $x330 (= (+ ?x318 (* n k) (* (- 1) k) ?x56) 0) $x574 $x440)))))))))))))))))))))))) :qid k!38))
 ))
 (let ((?x240 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x223 (* (- 9) n)))
 (let ((?x436 (* 5 m)))
 (let ((?x37 (* 18 c)))
 (let ((?x477 (+ ?x37 (* 23 k) (* 9 (* (+ 1 n) (+ c k))) ?x436 ?x223 (* (- 1) (* (+ k m) (+ k m))))))
 (let (($x144 (= (+ m (* (- 6) n)) 6)))
 (let (($x362 (not $x144)))
 (let ((?x263 (* (- 2) n)))
 (let ((?x261 (* 3 c)))
 (let ((?x425 (+ ?x261 (* 4 k) (* (- 1) (* (+ 1 n) (+ k m))) m ?x263)))
 (let ((?x74 (+ k m)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x453 (* (- 5) m)))
 (let ((?x71 (+ c k)))
 (let ((?x499 (+ 1 n)))
 (let ((?x410 (* ?x499 ?x71)))
 (let ((?x424 (* (- 9) ?x410)))
 (let ((?x329 (* (- 23) k)))
 (let ((?x468 (* (- 18) c)))
 (let ((?x276 (+ (* 4 (* ?x499 ?x499)) (* 7 (* (+ 6 m) ?x74 ?x71 ?x71)) (* 3 (* ?x74 ?x71)))))
 (let (($x286 (not (= (* ?x276 (+ 13 ?x468 ?x329 ?x424 ?x453 ?x45 ?x80)) 0))))
 (let ((?x61 (* 3 n)))
 (let ((?x502 (* (- 1) m)))
 (let ((?x484 (* (- 1) k)))
 (let (($x242 (not (= (+ (* 3 (* ?x499 ?x499)) ?x484 ?x502 ?x61) (- 3)))))
 (let (($x574 (= (+ (* 3 (* n n)) ?x484 ?x61) 0)))
 (let ((?x46 (* k k)))
 (let ((?x224 (* (- 1) ?x46)))
 (let ((?x41 (* 5 k)))
 (let (($x469 (and $x144 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x223 ?x224) 4) (= (+ ?x261 (* (- 1) (* n k)) k ?x263) 0) $x574 (or $x242 $x286 (not (= ?x425 2)) $x362 (not (= ?x477 13))))))
 (let ((?x56 (* 2 n)))
 (let ((?x438 (* ?x499 ?x74)))
 (let ((?x318 (* (- 3) c)))
 (let (($x440 (or $x242 $x286 (not (= (+ ?x318 (* (- 4) k) ?x438 ?x502 ?x56) (- 2))) $x362 (not (= (+ ?x468 ?x329 ?x424 ?x453 ?x45 ?x80) (- 13))))))
 (let (($x330 (= (+ ?x468 (* (- 9) (* n c)) (* (- 5) k) ?x45 ?x46) (- 4))))
 (let (($x515 (and $x144 $x330 (= (+ ?x318 (* n k) ?x484 ?x56) 0) $x574 $x440)))
 (rewrite (= $x515 $x469)))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x109 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x103 (+ (* 4 (+ n 1) (+ n 1)) (* 7 (+ c k) (+ c k) (+ k m) (+ m 6)) (* 3 (+ c k) (+ k m)))))
 (let ((?x74 (+ k m)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x77 (- (- 4 (* 18 (+ c k))) (* 9 (+ c k) (+ n 1)))))
 (let ((?x81 (+ (- ?x77 (* 5 ?x74)) (* 9 (+ n 1)) ?x80)))
 (let ((?x95 (+ (- (* 3 (+ n 1) (+ n 1)) ?x74) (* 3 (+ n 1)))))
 (let ((?x89 (+ (- (+ (* (- 3) (+ c k)) (* ?x74 (+ n 1))) ?x74) (* 2 (+ n 1)))))
 (let (($x70 (not (= (- (+ (- 6) m 6) (* 6 (+ n 1))) 0))))
 (let (($x107 (or $x70 (not (= ?x81 0)) (not (= ?x89 0)) (not (= ?x95 0)) (not (= (* ?x81 ?x103) 0)))))
 (let (($x58 (= (+ (- (+ (* (- 3) c) (* k n)) k) (* 2 n)) 0)))
 (let ((?x46 (* k k)))
 (let ((?x45 (* 9 n)))
 (let ((?x41 (* 5 k)))
 (let ((?x47 (+ (- (- (- 4 (* 18 c)) (* 9 c n)) ?x41) ?x45 ?x46)))
 (and (= (- (+ (- 6) m) (* 6 n)) 0) (= ?x47 0) $x58 (= (+ (- (* 3 n n) k) (* 3 n)) 0) $x107))))))))))))))) :qid k!38))
 ))
 (let ((?x400 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x74 (+ k m)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x453 (* (- 5) m)))
 (let ((?x71 (+ c k)))
 (let ((?x499 (+ 1 n)))
 (let ((?x410 (* ?x499 ?x71)))
 (let ((?x424 (* (- 9) ?x410)))
 (let ((?x329 (* (- 23) k)))
 (let ((?x468 (* (- 18) c)))
 (let (($x144 (= (+ m (* (- 6) n)) 6)))
 (let (($x362 (not $x144)))
 (let ((?x56 (* 2 n)))
 (let ((?x502 (* (- 1) m)))
 (let ((?x438 (* ?x499 ?x74)))
 (let ((?x318 (* (- 3) c)))
 (let ((?x276 (+ (* 4 (* ?x499 ?x499)) (* 7 (* (+ 6 m) ?x74 ?x71 ?x71)) (* 3 (* ?x74 ?x71)))))
 (let (($x286 (not (= (* ?x276 (+ 13 ?x468 ?x329 ?x424 ?x453 ?x45 ?x80)) 0))))
 (let (($x305 (= (+ (* 3 (* ?x499 ?x499)) (* (- 1) k) ?x502 (* 3 n)) (- 3))))
 (let (($x242 (not $x305)))
 (let (($x440 (or $x242 $x286 (not (= (+ ?x318 (* (- 4) k) ?x438 ?x502 ?x56) (- 2))) $x362 (not (= (+ ?x468 ?x329 ?x424 ?x453 ?x45 ?x80) (- 13))))))
 (let (($x574 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) 0)))
 (let (($x330 (= (+ ?x468 (* (- 9) (* n c)) (* (- 5) k) ?x45 (* k k)) (- 4))))
 (let (($x515 (and $x144 $x330 (= (+ ?x318 (* n k) (* (- 1) k) ?x56) 0) $x574 $x440)))
 (let ((?x103 (+ (* 4 (+ n 1) (+ n 1)) (* 7 ?x71 ?x71 ?x74 (+ m 6)) (* 3 ?x71 ?x74))))
 (let ((?x78 (- (- (- 4 (* 18 ?x71)) (* 9 ?x71 (+ n 1))) (* 5 ?x74))))
 (let ((?x81 (+ ?x78 (* 9 (+ n 1)) ?x80)))
 (let ((?x95 (+ (- (* 3 (+ n 1) (+ n 1)) ?x74) (* 3 (+ n 1)))))
 (let ((?x89 (+ (- (+ (* (- 3) ?x71) (* ?x74 (+ n 1))) ?x74) (* 2 (+ n 1)))))
 (let (($x70 (not (= (- (+ (- 6) m 6) (* 6 (+ n 1))) 0))))
 (let (($x107 (or $x70 (not (= ?x81 0)) (not (= ?x89 0)) (not (= ?x95 0)) (not (= (* ?x81 ?x103) 0)))))
 (let ((?x46 (* k k)))
 (let ((?x41 (* 5 k)))
 (let ((?x47 (+ (- (- (- 4 (* 18 c)) (* 9 c n)) ?x41) ?x45 ?x46)))
 (let (($x108 (and (= (- (+ (- 6) m) (* 6 n)) 0) (= ?x47 0) (= (+ (- (+ (* (- 3) c) (* k n)) k) ?x56) 0) (= (+ (- (* 3 n n) k) (* 3 n)) 0) $x107)))
 (rewrite (= $x108 $x515))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x110 (asserted $x109)))
 (let ((@x475 (mp (mp @x110 (quant-intro (proof-bind ?x400) (= $x109 $x398)) $x398) (rewrite (= $x398 $x398)) $x398)))
 (let ((@x288 (mp (mp @x475 (quant-intro (proof-bind ?x240) (= $x398 $x392)) $x392) (quant-intro (proof-bind ?x550) (= $x392 $x562)) $x562)))
 (let ((@x677 (mp (mp~ @x288 (sk (~ $x562 $x178)) $x178) (rewrite (= $x178 $x253)) $x253)))
 (let ((@x600 (and-elim @x677 $x309)))
 (let ((@x116 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x309) $x449)) @x600 $x449)))
 (let (($x190 (>= ?x493 0)))
 (let ((@x581 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x309) $x190)) @x600 $x190)))
 (let (($x443 (<= ?x197 0)))
 (let ((@x613 (and-elim @x677 $x456)))
 (let ((@x482 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x456) $x443)) @x613 $x443)))
 (let (($x346 (>= ?x197 0)))
 (let ((@x257 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x456) $x346)) @x613 $x346)))
 (let (($x357 (<= ?x492 4)))
 (let ((@x576 (and-elim @x677 $x245)))
 (let ((@x371 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x245) $x357)) @x576 $x357)))
 (let (($x272 (>= ?x492 4)))
 (let ((@x341 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x245) $x272)) @x576 $x272)))
 (let ((@x138 ((_ th-lemma arith) (hypothesis (not $x772)) @x257 @x482 @x341 @x371 @x341 @x371 @x341 @x371 @x257 @x482 @x257 @x482 @x581 @x116 false)))
 (let ((@x189 (lemma @x138 $x772)))
 (let (($x376 (>= ?x335 6)))
 (let ((@x155 (and-elim @x677 $x544)))
 (let ((@x324 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x543 $x376)) @x155 $x376)))
 (let (($x781 (<= m!1 0)))
 (let (($x461 (<= ?x335 6)))
 (let ((@x135 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x543 $x461)) @x155 $x461)))
 (let (($x774 (<= m!1 6)))
 (let (($x123 (<= m!1 12)))
 (let ((@x210 ((_ th-lemma arith) (hypothesis (not $x123)) @x135 @x257 @x482 @x341 @x371 @x257 @x482 @x581 @x116 @x257 @x482 false)))
 (let ((@x766 ((_ th-lemma arith) @x581 @x116 @x257 @x482 @x324 (hypothesis (not $x774)) @x135 (lemma @x210 $x123) @x324 @x135 @x257 @x482 @x581 @x116 @x257 @x482 @x341 @x371 @x257 @x482 @x581 @x116 false)))
 (let ((@x765 (lemma @x766 $x774)))
 (let (($x459 (>= ?x131 1)))
 (let (($x472 (<= n!0 0)))
 (let ((@x212 (unit-resolution ((_ th-lemma arith assign-bounds -1/6 1/6) (or $x472 (not $x774) (not $x376))) @x324 @x765 $x472)))
 (let (($x593 (>= n!0 0)))
 (let (($x397 (>= c!3 0)))
 (let ((@x122 (hypothesis (not $x459))))
 (let (($x169 (not $x397)))
 (let ((@x716 (hypothesis $x169)))
 (let ((@x548 (hypothesis (not $x593))))
 (let (($x279 (>= c!3 (- 1))))
 (let (($x561 (not $x279)))
 (let ((@x535 (lemma ((_ th-lemma arith farkas 1 -1 -1 1) @x548 (hypothesis $x279) @x716 @x122 false) (or $x561 $x593 $x397 $x459))))
 (let ((@x517 ((_ th-lemma arith farkas 1 1 1) @x122 (unit-resolution @x535 @x548 @x716 @x122 $x561) @x548 false)))
 (let ((@x577 (unit-resolution (lemma @x517 (or $x593 $x459 $x397)) @x716 @x122 $x593)))
 (let (($x164 (>= ?x185 0)))
 (let ((@x594 (lemma ((_ th-lemma arith farkas 1) (hypothesis (not $x164)) false) $x164)))
 (let ((@x114 ((_ th-lemma arith) @x716 @x594 @x341 @x122 @x577 @x716 @x594 @x341 @x122 @x577 @x577 @x716 @x341 @x716 false)))
 (let ((@x597 ((_ th-lemma arith) (hypothesis $x397) @x548 @x341 @x371 @x257 @x482 @x341 @x371 @x581 @x116 @x341 @x371 false)))
 (let ((@x214 (unit-resolution (lemma @x597 (or $x593 $x169)) (unit-resolution (lemma @x114 (or $x397 $x459)) @x122 $x397) $x593)))
 (let ((@x213 (lemma ((_ th-lemma arith farkas 1/3 1/3 1/3 3 2 2 2) @x482 @x594 @x341 @x122 @x214 (hypothesis $x472) @x116 false) (or (not $x472) $x459))))
 (let ((@x228 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x213 @x212 $x459) (hypothesis (>= m!1 6)) @x135 @x765 @x324 false)))
 (let ((@x768 ((_ th-lemma arith gcd-test -1/6 -1/6 1/6 1/6) (hypothesis (not $x781)) (lemma @x228 (not (>= m!1 6))) @x324 @x135 false)))
 (let ((@x771 (lemma @x768 $x781)))
 ((_ th-lemma arith farkas -3/2 -3/2 -3/2 -1/2 1/6 -1/6 1/2 1/2 1/6 -1/2 -1/2 -1/2 1) @x189 @x771 @x324 @x116 @x341 @x482 @x771 @x324 @x594 @x189 @x771 @x324 @x189 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 37
 :arith-assert-diseq        16
 :arith-assert-lower        186
 :arith-assert-upper        177
 :arith-bound-prop          2
 :arith-branch-var          12
 :arith-conflicts           23
 :arith-eq-adapter          11
 :arith-fixed-eqs           65
 :arith-gcd-tests           70
 :arith-gomory-cuts         3
 :arith-grobner             19
 :arith-ineq-splits         12
 :arith-max-min             2069
 :arith-nonlinear-bounds    73
 :arith-nonlinear-horner    123
 :arith-num-rows            15
 :arith-offset-eqs          1
 :arith-patches             25
 :arith-patches_succ        2
 :arith-pivots              191
 :arith-pseudo-nonlinear    60
 :arith-row-summations      862
 :arith-tableau-max-columns 66
 :arith-tableau-max-rows    15
 :conflicts                 25
 :decisions                 149
 :del-clause                41
 :final-checks              67
 :max-memory                3.81
 :memory                    3.19
 :minimized-lits            1
 :mk-bool-var               123
 :mk-clause                 62
 :num-allocs                1737150
 :num-checks                1
 :propagations              116
 :rlimit-count              59606
 :time                      0.03
 :total-time                0.03)
