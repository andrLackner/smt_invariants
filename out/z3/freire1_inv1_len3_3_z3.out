unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x299 (* 2 x!0)))
 (let ((?x288 (* (- 1) r!1)))
 (let ((?x189 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x105 (* (- 1) ?x36)))
 (let ((?x89 (* (- 2) x00)))
 (let ((?x127 (+ r00 ?x89 ?x105 ?x189 ?x288 ?x299)))
 (let (($x297 (<= ?x127 0)))
 (let (($x252 (= ?x127 0)))
 (let ((?x194 (* 4 x!0)))
 (let ((?x246 (* 7 (* r!1 r!1 x!0))))
 (let ((?x187 (* (- 4) r!1)))
 (let ((?x177 (* 14 (* r!1 x!0))))
 (let ((?x191 (* (- 14) ?x189)))
 (let ((?x192 (* (- 7) (* r!1 r!1 r!1))))
 (let ((?x148 (* (+ 10 ?x192 ?x191 ?x177 ?x187 ?x246 ?x194) ?x127)))
 (let (($x141 (= ?x148 0)))
 (let (($x149 (not $x141)))
 (let (($x307 (not $x252)))
 (let (($x147 (or $x307 $x149)))
 (let (($x173 (and $x252 $x147)))
 (let ((?x306 (* (+ 10 ?x187 ?x194 ?x191 ?x192 ?x177 ?x246) (+ ?x288 ?x299 r00 ?x189 ?x89 ?x105))))
 (let ((?x35 (* 2 x00)))
 (let ((?x120 (* (- 1) r00)))
 (let (($x185 (= (+ r!1 (* (- 2) x!0) ?x120 (* (- 1) ?x189) ?x35 ?x36) 0)))
 (let (($x135 (and $x185 (or (not $x185) (not (= ?x306 0))))))
 (let (($x212 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x105 (* (- 1) ?x36)))
 (let ((?x89 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x68 (* (- 1) r)))
 (let ((?x111 (+ ?x68 ?x32 r00 ?x30 ?x89 ?x105)))
 (let ((?x236 (* 7 (* r r x))))
 (let ((?x311 (* 4 x)))
 (let ((?x309 (* (- 4) r)))
 (let ((?x204 (+ 10 ?x309 ?x311 (* (- 14) ?x30) (* (- 7) (* r r r)) (* 14 (* r x)) ?x236)))
 (let ((?x35 (* 2 x00)))
 (let ((?x121 (* (- 1) ?x30)))
 (let ((?x120 (* (- 1) r00)))
 (let ((?x119 (* (- 2) x)))
 (let (($x123 (= (+ r ?x119 ?x120 ?x121 ?x35 ?x36) 0)))
 (let (($x219 (not $x123)))
 (and $x123 (or $x219 (not (= (* ?x204 ?x111) 0))))))))))))))))))))) :qid k!27))
 ))
 (let (($x151 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x105 (* (- 1) ?x36)))
 (let ((?x89 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x294 (+ 1 r)))
 (let ((?x145 (* ?x294 ?x294)))
 (let ((?x161 (* (- 3) r)))
 (let ((?x218 (* 3 r)))
 (let ((?x248 (+ 10 (* 7 (* ?x294 ?x294 (+ x (* (- 1) r)))) (* (- 3) x) ?x218)))
 (let (($x255 (not (= (* ?x248 (+ (- 1) ?x161 r00 ?x145 ?x32 ?x89 ?x105)) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x119 (* (- 2) x)))
 (let ((?x120 (* (- 1) r00)))
 (let (($x281 (or (not (= (+ ?x218 ?x120 (* (- 1) ?x145) ?x119 ?x35 ?x36) (- 1))) $x255)))
 (and (= (+ r ?x120 (* (- 1) (* r r)) ?x119 ?x35 ?x36) 0) $x281))))))))))))))) :qid k!27))
 ))
 (let ((?x253 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x105 (* (- 1) ?x36)))
 (let ((?x89 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x68 (* (- 1) r)))
 (let ((?x111 (+ ?x68 ?x32 r00 ?x30 ?x89 ?x105)))
 (let ((?x236 (* 7 (* r r x))))
 (let ((?x311 (* 4 x)))
 (let ((?x309 (* (- 4) r)))
 (let ((?x204 (+ 10 ?x309 ?x311 (* (- 14) ?x30) (* (- 7) (* r r r)) (* 14 (* r x)) ?x236)))
 (let ((?x35 (* 2 x00)))
 (let ((?x121 (* (- 1) ?x30)))
 (let ((?x120 (* (- 1) r00)))
 (let ((?x119 (* (- 2) x)))
 (let (($x123 (= (+ r ?x119 ?x120 ?x121 ?x35 ?x36) 0)))
 (let (($x219 (not $x123)))
 (let (($x195 (and $x123 (or $x219 (not (= (* ?x204 ?x111) 0))))))
 (let ((?x294 (+ 1 r)))
 (let ((?x145 (* ?x294 ?x294)))
 (let ((?x161 (* (- 3) r)))
 (let ((?x218 (* 3 r)))
 (let ((?x248 (+ 10 (* 7 (* ?x294 ?x294 (+ x ?x68))) (* (- 3) x) ?x218)))
 (let (($x255 (not (= (* ?x248 (+ (- 1) ?x161 r00 ?x145 ?x32 ?x89 ?x105)) 0))))
 (let (($x281 (or (not (= (+ ?x218 ?x120 (* (- 1) ?x145) ?x119 ?x35 ?x36) (- 1))) $x255)))
 (let (($x129 (and (= (+ r ?x120 ?x121 ?x119 ?x35 ?x36) 0) $x281)))
 (rewrite (= $x129 $x195)))))))))))))))))))))))))))))
 ))
 (let (($x74 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x105 (* (- 1) ?x36)))
 (let ((?x89 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x294 (+ 1 r)))
 (let ((?x145 (* ?x294 ?x294)))
 (let ((?x161 (* (- 3) r)))
 (let ((?x218 (* 3 r)))
 (let ((?x248 (+ 10 (* 7 (* ?x294 ?x294 (+ x (* (- 1) r)))) (* (- 3) x) ?x218)))
 (let (($x255 (not (= (* ?x248 (+ (- 1) ?x161 r00 ?x145 ?x32 ?x89 ?x105)) 0))))
 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x89 ?x105) 0) (or (not (= (+ ?x161 r00 ?x145 ?x32 ?x89 ?x105) 1)) $x255)))))))))))) :qid k!27))
 ))
 (let ((?x315 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x105 (* (- 1) ?x36)))
 (let ((?x89 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x294 (+ 1 r)))
 (let ((?x145 (* ?x294 ?x294)))
 (let ((?x161 (* (- 3) r)))
 (let ((?x218 (* 3 r)))
 (let ((?x248 (+ 10 (* 7 (* ?x294 ?x294 (+ x (* (- 1) r)))) (* (- 3) x) ?x218)))
 (let (($x255 (not (= (* ?x248 (+ (- 1) ?x161 r00 ?x145 ?x32 ?x89 ?x105)) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x119 (* (- 2) x)))
 (let ((?x120 (* (- 1) r00)))
 (let (($x281 (or (not (= (+ ?x218 ?x120 (* (- 1) ?x145) ?x119 ?x35 ?x36) (- 1))) $x255)))
 (let (($x129 (and (= (+ r ?x120 (* (- 1) (* r r)) ?x119 ?x35 ?x36) 0) $x281)))
 (let (($x72 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x89 ?x105) 0) (or (not (= (+ ?x161 r00 ?x145 ?x32 ?x89 ?x105) 1)) $x255))))
 (rewrite (= $x72 $x129)))))))))))))))))))
 ))
 (let (($x63 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let ((?x48 (- (- ?x46 ?x35) ?x36)))
 (let ((?x57 (- (+ 10 (* 7 (+ r 1) (+ r 1) (- x r))) (* 3 (- x r)))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x48 0)) (not (= (* ?x57 ?x48) 0)))))))))) :qid k!27))
 ))
 (let ((?x205 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x105 (* (- 1) ?x36)))
 (let ((?x89 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x294 (+ 1 r)))
 (let ((?x145 (* ?x294 ?x294)))
 (let ((?x161 (* (- 3) r)))
 (let ((?x218 (* 3 r)))
 (let ((?x248 (+ 10 (* 7 (* ?x294 ?x294 (+ x (* (- 1) r)))) (* (- 3) x) ?x218)))
 (let (($x255 (not (= (* ?x248 (+ (- 1) ?x161 r00 ?x145 ?x32 ?x89 ?x105)) 0))))
 (let (($x72 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x89 ?x105) 0) (or (not (= (+ ?x161 r00 ?x145 ?x32 ?x89 ?x105) 1)) $x255))))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let ((?x48 (- (- ?x46 ?x35) ?x36)))
 (let ((?x57 (- (+ 10 (* 7 (+ r 1) (+ r 1) (- x r))) (* 3 (- x r)))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x62 (and $x40 (or (not (= ?x48 0)) (not (= (* ?x57 ?x48) 0))))))
 (rewrite (= $x62 $x72))))))))))))))))))))
 ))
 (let ((@x64 (asserted $x63)))
 (let ((@x305 (mp (mp @x64 (quant-intro (proof-bind ?x205) (= $x63 $x74)) $x74) (rewrite (= $x74 $x74)) $x74)))
 (let ((@x193 (mp (mp @x305 (quant-intro (proof-bind ?x315) (= $x74 $x151)) $x151) (quant-intro (proof-bind ?x253) (= $x151 $x212)) $x212)))
 (let ((@x140 (mp (mp~ @x193 (sk (~ $x212 $x135)) $x135) (rewrite (= $x135 $x173)) $x173)))
 (let ((@x172 (and-elim @x140 $x252)))
 (let ((@x168 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x307 $x297)) @x172 $x297)))
 (let (($x170 (>= ?x127 0)))
 (let ((@x301 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x307 $x170)) @x172 $x170)))
 (let (($x97 (not (>= ?x148 0))))
 (let (($x175 (<= ?x148 0)))
 (let ((@x169 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x141 (not $x175) $x97)) (unit-resolution (and-elim @x140 $x147) @x172 $x149) (or (not $x175) $x97))))
 (let ((@x165 (unit-resolution @x169 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x175)) @x301 @x168 false) $x175) $x97)))
 ((_ th-lemma arith farkas 1 1 1) @x165 @x301 @x168 false))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 22
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.46
 :memory                    3.05
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1054459
 :num-checks                1
 :propagations              4
 :rlimit-count              1299
 :time                      0.01
 :total-time                0.02)
