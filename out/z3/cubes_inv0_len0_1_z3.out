unsat
((set-logic NIA)
(declare-fun c!3 () Int)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x360 (* 3 c!3)))
 (let ((?x361 (* (- 2) n!0)))
 (let ((?x275 (* k!2 n!0)))
 (let ((?x294 (* (- 1) ?x275)))
 (let ((?x266 (+ k!2 ?x294 ?x361 ?x360)))
 (let (($x454 (<= ?x266 0)))
 (let (($x303 (= ?x266 0)))
 (let (($x518 (= (+ (* 3 k!2) ?x294 (* (- 1) (* n!0 m!1)) ?x361 ?x360) 2)))
 (let ((?x400 (* 27 c!3)))
 (let ((?x406 (* (- 2) (* k!2 m!1))))
 (let ((?x404 (* 5 m!1)))
 (let ((?x187 (* (- 9) n!0)))
 (let ((?x387 (* (- 1) (* m!1 m!1))))
 (let ((?x485 (* (- 1) (* k!2 k!2))))
 (let ((?x408 (* 9 ?x275)))
 (let ((?x264 (* n!0 c!3)))
 (let ((?x366 (* 9 ?x264)))
 (let ((?x401 (* 32 k!2)))
 (let ((?x174 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x548 (= ?x174 (- 6))))
 (let (($x195 (not $x548)))
 (let (($x525 (or $x195 (not (= (+ k!2 (* (- 3) (* n!0 n!0)) ?x187 m!1) 6)) (not (= (+ ?x401 ?x366 ?x408 ?x485 ?x387 ?x187 ?x404 ?x406 ?x400) 13)) (not $x518))))
 (let ((?x473 (* (- 3) n!0)))
 (let ((?x339 (* n!0 n!0)))
 (let ((?x343 (* (- 3) ?x339)))
 (let ((?x170 (+ k!2 ?x343 ?x473)))
 (let (($x508 (= ?x170 0)))
 (let ((?x159 (* 18 c!3)))
 (let ((?x443 (* 5 k!2)))
 (let ((?x526 (+ ?x443 ?x366 ?x485 ?x187 ?x159)))
 (let (($x171 (= ?x526 4)))
 (let (($x438 (and $x548 $x171 $x303 $x508 $x525)))
 (let (($x104 (= (+ ?x360 (* 3 k!2) ?x361 ?x294 (* (- 1) (* m!1 n!0))) 2)))
 (let ((?x419 (* 9 (* c!3 n!0))))
 (let (($x322 (or (not (= (+ m!1 (* (- 6) n!0)) 6)) (not (= (+ k!2 m!1 ?x187 ?x343) 6)) (not (= (+ ?x400 ?x401 ?x404 ?x187 ?x485 ?x408 ?x419 ?x406 ?x387) 13)) (not $x104))))
 (let (($x442 (= (+ m!1 (* (- 6) n!0)) 6)))
 (let (($x310 (and $x442 (= (+ ?x159 ?x443 ?x187 ?x485 ?x419) 4) (= (+ ?x360 k!2 ?x361 ?x294) 0) (= (+ k!2 ?x473 ?x343) 0) $x322)))
 (let (($x298 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x52 (* k n)))
 (let ((?x255 (* (- 1) ?x52)))
 (let ((?x254 (* (- 2) n)))
 (let ((?x252 (* 3 c)))
 (let (($x537 (= (+ ?x252 (* 3 k) ?x254 ?x255 (* (- 1) (* m n))) 2)))
 (let (($x545 (not $x537)))
 (let ((?x152 (* 9 (* c n))))
 (let ((?x46 (* k k)))
 (let ((?x215 (* (- 1) ?x46)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x427 (* 5 m)))
 (let ((?x515 (+ (* 27 c) (* 32 k) ?x427 ?x214 ?x215 (* 9 ?x52) ?x152 (* (- 2) (* k m)) (* (- 1) (* m m)))))
 (let (($x519 (not (= ?x515 13))))
 (let (($x135 (= (+ m (* (- 6) n)) 6)))
 (let (($x353 (not $x135)))
 (let (($x362 (or $x353 (not (= (+ k m ?x214 (* (- 3) (* n n))) 6)) $x519 $x545)))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 0)))
 (let (($x257 (= (+ ?x252 k ?x254 ?x255) 0)))
 (let (($x212 (= (+ (* 18 c) (* 5 k) ?x214 ?x215 ?x152) 4)))
 (and $x135 $x212 $x257 $x293 $x362)))))))))))))))))))) :qid k!36))
 ))
 (let (($x222 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let (($x135 (= (+ m (* (- 6) n)) 6)))
 (let (($x353 (not $x135)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x427 (* 5 m)))
 (let ((?x37 (* 18 c)))
 (let ((?x236 (+ ?x37 (* 23 k) (* 9 (* (+ 1 n) (+ c k))) ?x427 ?x214 (* (- 1) (* (+ k m) (+ k m))))))
 (let ((?x254 (* (- 2) n)))
 (let ((?x252 (* 3 c)))
 (let ((?x224 (+ ?x252 (* 4 k) (* (- 1) (* (+ 1 n) (+ k m))) m ?x254)))
 (let ((?x61 (* 3 n)))
 (let ((?x312 (* (- 1) m)))
 (let ((?x363 (* (- 1) k)))
 (let (($x248 (= (+ (* 3 (* (+ 1 n) (+ 1 n))) ?x363 ?x312 ?x61) (- 3))))
 (let (($x142 (not $x248)))
 (let (($x319 (= (+ (* 3 (* n n)) ?x363 ?x61) 0)))
 (let ((?x46 (* k k)))
 (let ((?x215 (* (- 1) ?x46)))
 (let ((?x41 (* 5 k)))
 (and $x135 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x214 ?x215) 4) (= (+ ?x252 (* (- 1) (* n k)) k ?x254) 0) $x319 (or $x142 (not (= ?x224 2)) (not (= ?x236 13)) $x353)))))))))))))))))))) :qid k!36))
 ))
 (let ((?x316 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x52 (* k n)))
 (let ((?x255 (* (- 1) ?x52)))
 (let ((?x254 (* (- 2) n)))
 (let ((?x252 (* 3 c)))
 (let (($x537 (= (+ ?x252 (* 3 k) ?x254 ?x255 (* (- 1) (* m n))) 2)))
 (let (($x545 (not $x537)))
 (let ((?x152 (* 9 (* c n))))
 (let ((?x46 (* k k)))
 (let ((?x215 (* (- 1) ?x46)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x427 (* 5 m)))
 (let ((?x515 (+ (* 27 c) (* 32 k) ?x427 ?x214 ?x215 (* 9 ?x52) ?x152 (* (- 2) (* k m)) (* (- 1) (* m m)))))
 (let (($x519 (not (= ?x515 13))))
 (let (($x135 (= (+ m (* (- 6) n)) 6)))
 (let (($x353 (not $x135)))
 (let (($x362 (or $x353 (not (= (+ k m ?x214 (* (- 3) (* n n))) 6)) $x519 $x545)))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 0)))
 (let (($x257 (= (+ ?x252 k ?x254 ?x255) 0)))
 (let (($x212 (= (+ (* 18 c) (* 5 k) ?x214 ?x215 ?x152) 4)))
 (let (($x458 (and $x135 $x212 $x257 $x293 $x362)))
 (let ((?x37 (* 18 c)))
 (let ((?x236 (+ ?x37 (* 23 k) (* 9 (* (+ 1 n) (+ c k))) ?x427 ?x214 (* (- 1) (* (+ k m) (+ k m))))))
 (let ((?x224 (+ ?x252 (* 4 k) (* (- 1) (* (+ 1 n) (+ k m))) m ?x254)))
 (let ((?x61 (* 3 n)))
 (let ((?x312 (* (- 1) m)))
 (let ((?x363 (* (- 1) k)))
 (let (($x248 (= (+ (* 3 (* (+ 1 n) (+ 1 n))) ?x363 ?x312 ?x61) (- 3))))
 (let (($x142 (not $x248)))
 (let (($x319 (= (+ (* 3 (* n n)) ?x363 ?x61) 0)))
 (let (($x165 (= (+ ?x37 (* 9 (* n c)) (* 5 k) ?x214 ?x215) 4)))
 (let (($x302 (and $x135 $x165 (= (+ ?x252 (* (- 1) (* n k)) k ?x254) 0) $x319 (or $x142 (not (= ?x224 2)) (not (= ?x236 13)) $x353))))
 (rewrite (= $x302 $x458))))))))))))))))))))))))))))))))))
 ))
 (let (($x403 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let (($x135 (= (+ m (* (- 6) n)) 6)))
 (let (($x353 (not $x135)))
 (let ((?x74 (+ k m)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x451 (* (- 18) c)))
 (let ((?x286 (+ ?x451 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) (* (- 5) m) ?x45 ?x80)))
 (let ((?x56 (* 2 n)))
 (let ((?x312 (* (- 1) m)))
 (let ((?x480 (+ 1 n)))
 (let ((?x412 (* ?x480 ?x74)))
 (let ((?x484 (* (- 3) c)))
 (let (($x248 (= (+ (* 3 (* ?x480 ?x480)) (* (- 1) k) ?x312 (* 3 n)) (- 3))))
 (let (($x142 (not $x248)))
 (let (($x333 (or $x142 (not (= (+ ?x484 (* (- 4) k) ?x412 ?x312 ?x56) (- 2))) (not (= ?x286 (- 13))) $x353)))
 (let (($x319 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) 0)))
 (let (($x358 (= (+ ?x451 (* (- 9) (* n c)) (* (- 5) k) ?x45 (* k k)) (- 4))))
 (and $x135 $x358 (= (+ ?x484 (* n k) (* (- 1) k) ?x56) 0) $x319 $x333)))))))))))))))))) :qid k!36))
 ))
 (let ((?x277 (lambda ((c Int) (k Int) (m Int) (n Int) )(let (($x135 (= (+ m (* (- 6) n)) 6)))
 (let (($x353 (not $x135)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x427 (* 5 m)))
 (let ((?x37 (* 18 c)))
 (let ((?x236 (+ ?x37 (* 23 k) (* 9 (* (+ 1 n) (+ c k))) ?x427 ?x214 (* (- 1) (* (+ k m) (+ k m))))))
 (let ((?x254 (* (- 2) n)))
 (let ((?x252 (* 3 c)))
 (let ((?x224 (+ ?x252 (* 4 k) (* (- 1) (* (+ 1 n) (+ k m))) m ?x254)))
 (let ((?x61 (* 3 n)))
 (let ((?x312 (* (- 1) m)))
 (let ((?x363 (* (- 1) k)))
 (let (($x248 (= (+ (* 3 (* (+ 1 n) (+ 1 n))) ?x363 ?x312 ?x61) (- 3))))
 (let (($x142 (not $x248)))
 (let (($x319 (= (+ (* 3 (* n n)) ?x363 ?x61) 0)))
 (let ((?x46 (* k k)))
 (let ((?x215 (* (- 1) ?x46)))
 (let ((?x41 (* 5 k)))
 (let (($x302 (and $x135 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x214 ?x215) 4) (= (+ ?x252 (* (- 1) (* n k)) k ?x254) 0) $x319 (or $x142 (not (= ?x224 2)) (not (= ?x236 13)) $x353))))
 (let ((?x74 (+ k m)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x451 (* (- 18) c)))
 (let ((?x286 (+ ?x451 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) (* (- 5) m) ?x45 ?x80)))
 (let ((?x56 (* 2 n)))
 (let ((?x480 (+ 1 n)))
 (let ((?x412 (* ?x480 ?x74)))
 (let ((?x484 (* (- 3) c)))
 (let (($x333 (or $x142 (not (= (+ ?x484 (* (- 4) k) ?x412 ?x312 ?x56) (- 2))) (not (= ?x286 (- 13))) $x353)))
 (let (($x358 (= (+ ?x451 (* (- 9) (* n c)) (* (- 5) k) ?x45 ?x46) (- 4))))
 (let (($x413 (and $x135 $x358 (= (+ ?x484 (* n k) ?x363 ?x56) 0) $x319 $x333)))
 (rewrite (= $x413 $x302))))))))))))))))))))))))))))))))))
 ))
 (let (($x100 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x95 (+ (- (* 3 (+ n 1) (+ n 1)) (+ k m)) (* 3 (+ n 1)))))
 (let ((?x74 (+ k m)))
 (let ((?x89 (+ (- (+ (* (- 3) (+ c k)) (* ?x74 (+ n 1))) ?x74) (* 2 (+ n 1)))))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x77 (- (- 4 (* 18 (+ c k))) (* 9 (+ c k) (+ n 1)))))
 (let (($x82 (= (+ (- ?x77 (* 5 ?x74)) (* 9 (+ n 1)) ?x80) 0)))
 (let (($x70 (not (= (- (+ (- 6) m 6) (* 6 (+ n 1))) 0))))
 (let (($x58 (= (+ (- (+ (* (- 3) c) (* k n)) k) (* 2 n)) 0)))
 (let ((?x46 (* k k)))
 (let ((?x45 (* 9 n)))
 (let ((?x41 (* 5 k)))
 (let ((?x47 (+ (- (- (- 4 (* 18 c)) (* 9 c n)) ?x41) ?x45 ?x46)))
 (and (= (- (+ (- 6) m) (* 6 n)) 0) (= ?x47 0) $x58 (= (+ (- (* 3 n n) k) (* 3 n)) 0) (or $x70 (not $x82) (not (= ?x89 0)) (not (= ?x95 0)))))))))))))))) :qid k!36))
 ))
 (let ((?x405 (lambda ((c Int) (k Int) (m Int) (n Int) )(let (($x135 (= (+ m (* (- 6) n)) 6)))
 (let (($x353 (not $x135)))
 (let ((?x74 (+ k m)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x451 (* (- 18) c)))
 (let ((?x286 (+ ?x451 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) (* (- 5) m) ?x45 ?x80)))
 (let ((?x56 (* 2 n)))
 (let ((?x312 (* (- 1) m)))
 (let ((?x480 (+ 1 n)))
 (let ((?x412 (* ?x480 ?x74)))
 (let ((?x484 (* (- 3) c)))
 (let (($x248 (= (+ (* 3 (* ?x480 ?x480)) (* (- 1) k) ?x312 (* 3 n)) (- 3))))
 (let (($x142 (not $x248)))
 (let (($x333 (or $x142 (not (= (+ ?x484 (* (- 4) k) ?x412 ?x312 ?x56) (- 2))) (not (= ?x286 (- 13))) $x353)))
 (let (($x319 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) 0)))
 (let (($x358 (= (+ ?x451 (* (- 9) (* n c)) (* (- 5) k) ?x45 (* k k)) (- 4))))
 (let (($x413 (and $x135 $x358 (= (+ ?x484 (* n k) (* (- 1) k) ?x56) 0) $x319 $x333)))
 (let ((?x95 (+ (- (* 3 (+ n 1) (+ n 1)) ?x74) (* 3 (+ n 1)))))
 (let ((?x89 (+ (- (+ (* (- 3) (+ c k)) (* ?x74 (+ n 1))) ?x74) (* 2 (+ n 1)))))
 (let ((?x77 (- (- 4 (* 18 (+ c k))) (* 9 (+ c k) (+ n 1)))))
 (let (($x82 (= (+ (- ?x77 (* 5 ?x74)) (* 9 (+ n 1)) ?x80) 0)))
 (let (($x70 (not (= (- (+ (- 6) m 6) (* 6 (+ n 1))) 0))))
 (let ((?x46 (* k k)))
 (let ((?x41 (* 5 k)))
 (let ((?x47 (+ (- (- (- 4 (* 18 c)) (* 9 c n)) ?x41) ?x45 ?x46)))
 (let (($x99 (and (= (- (+ (- 6) m) (* 6 n)) 0) (= ?x47 0) (= (+ (- (+ (* (- 3) c) (* k n)) k) ?x56) 0) (= (+ (- (* 3 n n) k) (* 3 n)) 0) (or $x70 (not $x82) (not (= ?x89 0)) (not (= ?x95 0))))))
 (rewrite (= $x99 $x413))))))))))))))))))))))))))))))
 ))
 (let ((@x101 (asserted $x100)))
 (let ((@x466 (mp (mp @x101 (quant-intro (proof-bind ?x405) (= $x100 $x403)) $x403) (rewrite (= $x403 $x403)) $x403)))
 (let ((@x527 (mp (mp @x466 (quant-intro (proof-bind ?x277) (= $x403 $x222)) $x222) (quant-intro (proof-bind ?x316) (= $x222 $x298)) $x298)))
 (let ((@x175 (mp (mp~ @x527 (sk (~ $x298 $x310)) $x310) (rewrite (= $x310 $x438)) $x438)))
 (let ((@x166 (and-elim @x175 $x303)))
 (let ((@x410 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x303) $x454)) @x166 $x454)))
 (let (($x299 (>= ?x266 0)))
 (let ((@x417 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x303) $x299)) @x166 $x299)))
 (let (($x488 (<= ?x170 0)))
 (let ((@x365 (and-elim @x175 $x508)))
 (let ((@x377 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x508) $x488)) @x365 $x488)))
 (let (($x489 (>= ?x170 0)))
 (let ((@x301 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x508) $x489)) @x365 $x489)))
 (let (($x346 (<= ?x526 4)))
 (let ((@x158 (and-elim @x175 $x171)))
 (let ((@x226 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x171) $x346)) @x158 $x346)))
 (let (($x265 (>= ?x526 4)))
 (let ((@x435 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x171) $x265)) @x158 $x265)))
 (let (($x194 (<= ?x174 (- 6))))
 (let ((@x439 (and-elim @x175 $x548)))
 (let ((@x402 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x195 $x194)) @x439 $x194)))
 (let (($x524 (>= ?x174 (- 6))))
 (let ((@x505 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x195 $x524)) @x439 $x524)))
 (let (($x371 (>= ?x264 1)))
 (let (($x534 (>= c!3 1)))
 (let (($x549 (<= m!1 6)))
 (let (($x423 (not $x549)))
 (let ((@x492 (hypothesis (not $x371))))
 (let ((@x192 (hypothesis $x549)))
 (let (($x430 (>= n!0 0)))
 (let (($x479 (>= n!0 (- 1))))
 (let (($x325 (not $x479)))
 (let ((@x472 (hypothesis $x325)))
 (let ((@x452 ((_ th-lemma arith) @x301 @x410 @x492 @x435 @x472 @x301 @x301 @x410 @x492 @x435 @x472 @x301 @x410 @x492 @x435 @x472 false)))
 (let ((@x315 (hypothesis (not $x430))))
 (let ((@x147 (hypothesis $x479)))
 (let ((@x411 ((_ th-lemma arith farkas 4 6 6 6 6 2 1 3 3 3 1 1) @x147 @x147 @x315 @x147 @x315 @x301 @x410 @x492 @x147 @x315 @x147 @x315 false)))
 (let ((@x444 (unit-resolution (lemma @x411 (or $x325 $x430 $x371)) (unit-resolution (lemma @x452 (or $x479 $x371)) @x492 $x479) @x492 $x430)))
 (let ((@x418 ((_ th-lemma arith gomory-cut 1 -1/2 -3/4 1/12 1/12 1/2 -1/6 1 1/6) @x301 @x410 @x492 @x435 @x301 @x417 @x402 @x444 @x505 (>= (+ k!2 (* (- 2) ?x339) ?x361 c!3) 1))))
 (let ((@x269 (lemma ((_ th-lemma arith farkas 3 -2 -1/3 -1/3 -1 1 1 1) @x418 @x377 @x192 @x402 @x410 @x444 @x192 @x402 false) (or $x423 $x371))))
 (let ((@x233 (unit-resolution @x269 @x492 $x423)))
 (let ((@x240 ((_ th-lemma arith) @x402 (hypothesis $x423) @x505 (hypothesis (not $x534)) @x301 @x377 @x505 @x402 @x417 @x410 @x301 @x377 @x301 @x377 @x435 @x226 false)))
 (let ((@x245 ((_ th-lemma arith farkas 1 1 1 1) @x492 @x233 @x505 (unit-resolution (lemma @x240 (or $x534 $x549)) @x233 $x534) false)))
 (let ((@x1174 ((_ th-lemma arith) @x301 @x377 @x505 @x402 @x417 @x410 (lemma @x245 $x371) @x417 (hypothesis (<= (+ k!2 ?x264 ?x294 ?x361 ?x360) 1)) @x301 @x377 @x417 @x410 @x435 @x226 @x301 @x377 @x417 @x410 false)))
 ((_ th-lemma arith) (lemma @x1174 (not (<= (+ k!2 ?x264 ?x294 ?x361 ?x360) 1))) @x417 @x410 @x505 @x402 @x301 @x377 @x417 @x410 @x301 @x377 @x301 @x377 @x301 @x377 @x417 @x410 @x435 @x226 @x301 @x377 @x417 @x410 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 37
 :arith-assert-diseq        25
 :arith-assert-lower        468
 :arith-assert-upper        506
 :arith-bound-prop          1
 :arith-branch-var          19
 :arith-conflicts           54
 :arith-eq-adapter          9
 :arith-fixed-eqs           74
 :arith-gcd-tests           138
 :arith-gomory-cuts         16
 :arith-grobner             74
 :arith-ineq-splits         19
 :arith-max-min             2717
 :arith-nonlinear-bounds    76
 :arith-nonlinear-horner    600
 :arith-num-rows            13
 :arith-offset-eqs          3
 :arith-patches             51
 :arith-patches_succ        13
 :arith-pivots              1073
 :arith-pseudo-nonlinear    66
 :arith-row-summations      3319
 :arith-tableau-max-columns 44
 :arith-tableau-max-rows    13
 :conflicts                 58
 :decisions                 167
 :del-clause                128
 :final-checks              218
 :max-memory                3.88
 :memory                    3.23
 :minimized-lits            28
 :mk-bool-var               224
 :mk-clause                 218
 :num-allocs                4883401
 :num-checks                1
 :propagations              337
 :rlimit-count              291409
 :time                      0.07
 :total-time                0.08)
