unsat
((set-logic NIA)
(proof
(let (($x180 (exists ((s Int) (r Int) )(! (let ((?x167 (* (- 1) s)))
 (let ((?x54 (* r00 r00)))
 (let ((?x179 (* (- 3) ?x54)))
 (let ((?x98 (+ (* 3 (* (+ 1 r) (+ 1 r))) ?x179 ?x167 (* (- 6) r) s00)))
 (let (($x113 (not (= ?x98 3))))
 (let ((?x50 (* r r)))
 (let ((?x69 (* 3 ?x50)))
 (let ((?x73 (+ ?x69 ?x179 ?x167 s00)))
 (let (($x151 (= ?x73 0)))
 (and $x151 $x113)))))))))) :qid k!29))
 ))
 (let (($x192 (exists ((s Int) (r Int) )(! false :qid k!29))
 ))
 (let ((?x62 (lambda ((s Int) (r Int) )(let ((?x167 (* (- 1) s)))
 (let ((?x54 (* r00 r00)))
 (let ((?x179 (* (- 3) ?x54)))
 (let ((?x98 (+ (* 3 (* (+ 1 r) (+ 1 r))) ?x179 ?x167 (* (- 6) r) s00)))
 (let (($x113 (not (= ?x98 3))))
 (let ((?x50 (* r r)))
 (let ((?x69 (* 3 ?x50)))
 (let ((?x73 (+ ?x69 ?x179 ?x167 s00)))
 (let (($x151 (= ?x73 0)))
 (let (($x86 (and $x151 $x113)))
 (let (($x103 (= (+ s (* (- 1) s00) (* (- 3) ?x50) (* 3 ?x54)) 0)))
 (let (($x96 (not $x103)))
 (let (($x131 (and $x103 $x96)))
 (let ((@x135 (monotonicity (rewrite (= ?x73 (+ ?x167 s00 ?x69 ?x179))) (= $x151 (= (+ ?x167 s00 ?x69 ?x179) 0)))))
 (let ((@x143 (trans @x135 (rewrite (= (= (+ ?x167 s00 ?x69 ?x179) 0) $x103)) (= $x151 $x103))))
 (trans (monotonicity @x143 (rewrite (= $x113 $x96)) (= $x86 $x131)) (rewrite (= $x131 false)) (= $x86 false))))))))))))))))))
 ))
 (let ((@x128 (trans (quant-intro (proof-bind ?x62) (= $x180 $x192)) (elim-unused (= $x192 false)) (= $x180 false))))
 (let (($x49 (exists ((x Int) (s Int) (r Int) )(! (let ((?x44 (- (- (* 3 (+ r 1) (+ r 1)) (* 3 r00 r00)) (+ s (* 6 r) 3))))
 (let (($x36 (= (+ (- (- (* 3 r r) (* 3 r00 r00)) s) s00) 0)))
 (and $x36 (not (= (+ ?x44 s00) 0))))) :qid k!29))
 ))
 (let (($x122 (exists ((x Int) (s Int) (r Int) )(! (let ((?x167 (* (- 1) s)))
 (let ((?x54 (* r00 r00)))
 (let ((?x179 (* (- 3) ?x54)))
 (let ((?x98 (+ (* 3 (* (+ 1 r) (+ 1 r))) ?x179 ?x167 (* (- 6) r) s00)))
 (let (($x113 (not (= ?x98 3))))
 (let ((?x50 (* r r)))
 (let ((?x69 (* 3 ?x50)))
 (let ((?x73 (+ ?x69 ?x179 ?x167 s00)))
 (let (($x151 (= ?x73 0)))
 (and $x151 $x113)))))))))) :qid k!29))
 ))
 (let ((?x124 (lambda ((x Int) (s Int) (r Int) )(let ((?x167 (* (- 1) s)))
 (let ((?x54 (* r00 r00)))
 (let ((?x179 (* (- 3) ?x54)))
 (let ((?x98 (+ (* 3 (* (+ 1 r) (+ 1 r))) ?x179 ?x167 (* (- 6) r) s00)))
 (let (($x113 (not (= ?x98 3))))
 (let ((?x50 (* r r)))
 (let ((?x69 (* 3 ?x50)))
 (let ((?x73 (+ ?x69 ?x179 ?x167 s00)))
 (let (($x151 (= ?x73 0)))
 (let (($x86 (and $x151 $x113)))
 (let ((?x44 (- (- (* 3 (+ r 1) (+ r 1)) (* 3 r00 r00)) (+ s (* 6 r) 3))))
 (let (($x36 (= (+ (- (- (* 3 r r) (* 3 r00 r00)) s) s00) 0)))
 (let (($x48 (and $x36 (not (= (+ ?x44 s00) 0)))))
 (rewrite (= $x48 $x86))))))))))))))))
 ))
 (let ((@x153 (trans (quant-intro (proof-bind ?x124) (= $x49 $x122)) (elim-unused (= $x122 $x180)) (= $x49 $x180))))
 (let ((@x24 (asserted $x49)))
 (mp (mp (mp @x24 @x153 $x180) (rewrite (= $x180 $x180)) $x180) @x128 false))))))))))))

