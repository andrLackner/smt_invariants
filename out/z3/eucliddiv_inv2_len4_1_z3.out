unsat
((set-logic NIA)
(declare-fun q!2 () Int)
(declare-fun r!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x76 (* y00 q00)))
 (let ((?x423 (+ r00 ?x76 (* (- 1) r!1) (* (- 1) (* y00 q!2)))))
 (let (($x398 (>= ?x423 0)))
 (let (($x424 (= ?x423 0)))
 (let ((?x346 (* 10 (* y00 y00 y00))))
 (let ((?x168 (* y00 y00)))
 (let ((?x446 (* 2 ?x168)))
 (let ((?x70 (* (- 1) y00)))
 (let ((?x321 (+ ?x70 ?x446 (* 10 (* y00 r!1 r!1 q!2)) (* 10 (* y00 r!1 r!1)) (* 10 (* y00 y00 y00 q!2)) (* 4 (* y00 y00 q!2)) (* 2 (* y00 y00 q!2 q!2)) (* 2 (* y00 r!1)) (* 4 (* y00 r!1 q!2)) (* 2 (* y00 r!1 q!2 q!2)) (* (- 20) (* y00 y00 r!1)) (* (- 20) (* y00 y00 r!1 q!2)) ?x346 r!1)))
 (let ((?x327 (* (+ (* (- 1) r00) (* (- 1) ?x76) r!1 (* y00 q!2)) ?x321)))
 (let (($x280 (= ?x327 0)))
 (let (($x269 (not $x280)))
 (let (($x274 (not $x424)))
 (let (($x281 (or $x274 $x269)))
 (let (($x152 (and (= (+ y00 (* (- 1) y!0)) 0) $x424 $x281)))
 (let ((?x387 (+ r!1 ?x70 ?x446 (* 4 (* q!2 y00 y00)) (* 2 (* q!2 q!2 y00 y00)) (* 10 (* r!1 r!1 y00)) (* 10 (* q!2 r!1 r!1 y00)) (* 2 (* r!1 y00)) (* 4 (* q!2 r!1 y00)) (* 2 (* q!2 q!2 r!1 y00)) (* (- 20) (* r!1 y00 y00)) (* (- 20) (* q!2 r!1 y00 y00)) ?x346 (* 10 (* q!2 y00 y00 y00)))))
 (let ((?x85 (* (- 1) ?x76)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x290 (+ r!1 ?x68 (* q!2 y00) ?x85)))
 (let (($x292 (= ?x290 0)))
 (let (($x391 (and (= (+ y!0 ?x70) 0) $x292 (or (not $x292) (not (= (* ?x290 ?x387) 0))))))
 (let (($x100 (exists ((q Int) (r Int) (y Int) )(! (let ((?x346 (* 10 (* y00 y00 y00))))
 (let ((?x215 (* 2 (* q q r y00))))
 (let ((?x209 (* 2 (* r y00))))
 (let ((?x187 (* 10 (* q r r y00))))
 (let ((?x185 (* 10 (* r r y00))))
 (let ((?x173 (* 4 (* q y00 y00))))
 (let ((?x168 (* y00 y00)))
 (let ((?x446 (* 2 ?x168)))
 (let ((?x70 (* (- 1) y00)))
 (let ((?x442 (+ r ?x70 ?x446 ?x173 (* 2 (* q q y00 y00)) ?x185 ?x187 ?x209 (* 4 (* q r y00)) ?x215 (* (- 20) (* r y00 y00)) (* (- 20) (* q r y00 y00)) ?x346 (* 10 (* q y00 y00 y00)))))
 (let ((?x76 (* y00 q00)))
 (let ((?x85 (* (- 1) ?x76)))
 (let ((?x39 (* q y00)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x99 (+ r ?x68 ?x39 ?x85)))
 (let (($x104 (= ?x99 0)))
 (let (($x163 (not $x104)))
 (let (($x79 (= (+ y ?x70) 0)))
 (and $x79 $x104 (or $x163 (not (= (* ?x99 ?x442) 0)))))))))))))))))))))) :qid k!31))
 ))
 (let (($x161 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x114 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x70 (* (- 1) y00)))
 (let ((?x178 (+ r ?x70 ?x68 ?x114 (* y00 (+ 1 q)))))
 (let ((?x248 (+ (* 4 (* y00 y00 (+ 1 q) (+ 1 q))) r ?x70 (* 10 (* y00 (+ 1 q) (+ r ?x70) (+ r ?x70))) (* 2 (* y00 (+ 1 q) (+ 1 q) (+ r ?x70))))))
 (let (($x207 (or (not (= (* ?x178 ?x248) 0)) (not (= ?x178 0)))))
 (let (($x142 (= (+ r ?x68 ?x114 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x142 $x207))))))))) :qid k!31))
 ))
 (let ((?x103 (lambda ((q Int) (r Int) (y Int) )(let ((?x346 (* 10 (* y00 y00 y00))))
 (let ((?x215 (* 2 (* q q r y00))))
 (let ((?x209 (* 2 (* r y00))))
 (let ((?x187 (* 10 (* q r r y00))))
 (let ((?x185 (* 10 (* r r y00))))
 (let ((?x173 (* 4 (* q y00 y00))))
 (let ((?x168 (* y00 y00)))
 (let ((?x446 (* 2 ?x168)))
 (let ((?x70 (* (- 1) y00)))
 (let ((?x442 (+ r ?x70 ?x446 ?x173 (* 2 (* q q y00 y00)) ?x185 ?x187 ?x209 (* 4 (* q r y00)) ?x215 (* (- 20) (* r y00 y00)) (* (- 20) (* q r y00 y00)) ?x346 (* 10 (* q y00 y00 y00)))))
 (let ((?x76 (* y00 q00)))
 (let ((?x85 (* (- 1) ?x76)))
 (let ((?x39 (* q y00)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x99 (+ r ?x68 ?x39 ?x85)))
 (let (($x104 (= ?x99 0)))
 (let (($x163 (not $x104)))
 (let (($x79 (= (+ y ?x70) 0)))
 (let (($x247 (and $x79 $x104 (or $x163 (not (= (* ?x99 ?x442) 0))))))
 (let ((?x36 (* q00 y00)))
 (let ((?x114 (* (- 1) ?x36)))
 (let ((?x178 (+ r ?x70 ?x68 ?x114 (* y00 (+ 1 q)))))
 (let ((?x248 (+ (* 4 (* y00 y00 (+ 1 q) (+ 1 q))) r ?x70 (* 10 (* y00 (+ 1 q) (+ r ?x70) (+ r ?x70))) (* 2 (* y00 (+ 1 q) (+ 1 q) (+ r ?x70))))))
 (let (($x207 (or (not (= (* ?x178 ?x248) 0)) (not (= ?x178 0)))))
 (let (($x142 (= (+ r ?x68 ?x114 (* y00 q)) 0)))
 (let (($x92 (and (= (+ y00 (* (- 1) y)) 0) $x142 $x207)))
 (rewrite (= $x92 $x247)))))))))))))))))))))))))))))
 ))
 (let (($x115 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x114 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x70 (* (- 1) y00)))
 (let ((?x178 (+ r ?x70 ?x68 ?x114 (* y00 (+ 1 q)))))
 (let ((?x248 (+ (* 4 (* y00 y00 (+ 1 q) (+ 1 q))) r ?x70 (* 10 (* y00 (+ 1 q) (+ r ?x70) (+ r ?x70))) (* 2 (* y00 (+ 1 q) (+ 1 q) (+ r ?x70))))))
 (let (($x207 (or (not (= (* ?x178 ?x248) 0)) (not (= ?x178 0)))))
 (let (($x142 (= (+ r ?x68 ?x114 (* y00 q)) 0)))
 (and (= (+ ?x70 y) 0) $x142 $x207))))))))) :qid k!31))
 ))
 (let ((?x91 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x114 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x70 (* (- 1) y00)))
 (let ((?x178 (+ r ?x70 ?x68 ?x114 (* y00 (+ 1 q)))))
 (let ((?x248 (+ (* 4 (* y00 y00 (+ 1 q) (+ 1 q))) r ?x70 (* 10 (* y00 (+ 1 q) (+ r ?x70) (+ r ?x70))) (* 2 (* y00 (+ 1 q) (+ 1 q) (+ r ?x70))))))
 (let (($x207 (or (not (= (* ?x178 ?x248) 0)) (not (= ?x178 0)))))
 (let (($x142 (= (+ r ?x68 ?x114 (* y00 q)) 0)))
 (let (($x92 (and (= (+ y00 (* (- 1) y)) 0) $x142 $x207)))
 (let (($x229 (and (= (+ ?x70 y) 0) $x142 $x207)))
 (rewrite (= $x229 $x92)))))))))))))
 ))
 (let (($x65 (exists ((q Int) (r Int) (y Int) )(! (let ((?x50 (+ (- (- (- r y00) r00) (* q00 y00)) (* (+ q 1) y00))))
 (let ((?x45 (- r y00)))
 (let ((?x59 (+ (* 4 (+ q 1) (+ q 1) y00 y00) ?x45 (* 10 (+ q 1) ?x45 ?x45 y00) (* 2 (+ q 1) (+ q 1) ?x45 y00))))
 (let (($x63 (or (not (= (+ (* (- 1) y00) y00) 0)) (not (= ?x50 0)) (not (= (* ?x59 ?x50) 0)))))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) $x63))))) :qid k!31))
 ))
 (let ((?x122 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x114 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x70 (* (- 1) y00)))
 (let ((?x178 (+ r ?x70 ?x68 ?x114 (* y00 (+ 1 q)))))
 (let ((?x248 (+ (* 4 (* y00 y00 (+ 1 q) (+ 1 q))) r ?x70 (* 10 (* y00 (+ 1 q) (+ r ?x70) (+ r ?x70))) (* 2 (* y00 (+ 1 q) (+ 1 q) (+ r ?x70))))))
 (let (($x207 (or (not (= (* ?x178 ?x248) 0)) (not (= ?x178 0)))))
 (let (($x142 (= (+ r ?x68 ?x114 (* y00 q)) 0)))
 (let (($x229 (and (= (+ ?x70 y) 0) $x142 $x207)))
 (let ((?x50 (+ (- (- (- r y00) r00) ?x36) (* (+ q 1) y00))))
 (let ((?x45 (- r y00)))
 (let ((?x59 (+ (* 4 (+ q 1) (+ q 1) y00 y00) ?x45 (* 10 (+ q 1) ?x45 ?x45 y00) (* 2 (+ q 1) (+ q 1) ?x45 y00))))
 (let (($x63 (or (not (= (+ (* (- 1) y00) y00) 0)) (not (= ?x50 0)) (not (= (* ?x59 ?x50) 0)))))
 (let (($x64 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) $x63)))
 (rewrite (= $x64 $x229)))))))))))))))))
 ))
 (let ((@x66 (asserted $x65)))
 (let ((@x130 (mp (mp @x66 (quant-intro (proof-bind ?x122) (= $x65 $x115)) $x115) (rewrite (= $x115 $x115)) $x115)))
 (let ((@x165 (mp (mp @x130 (quant-intro (proof-bind ?x91) (= $x115 $x161)) $x161) (quant-intro (proof-bind ?x103) (= $x161 $x100)) $x100)))
 (let ((@x288 (mp (mp~ @x165 (sk (~ $x100 $x391)) $x391) (rewrite (= $x391 $x152)) $x152)))
 (let ((@x394 (and-elim @x288 $x424)))
 (let ((@x331 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x274 $x398)) @x394 $x398)))
 (let (($x399 (<= ?x423 0)))
 (let ((@x416 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x274 $x399)) @x394 $x399)))
 (let (($x414 (not (<= ?x327 0))))
 (let (($x273 (>= ?x327 0)))
 (let ((@x408 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x280 $x414 (not $x273))) (unit-resolution (and-elim @x288 $x281) @x394 $x269) (or $x414 (not $x273)))))
 (let ((@x275 (unit-resolution @x408 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x273)) @x416 @x331 false) $x273) $x414)))
 ((_ th-lemma arith farkas 1 1 1) @x275 @x416 @x331 false)))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        12
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-fixed-eqs           2
 :arith-max-min             82
 :arith-nonlinear-bounds    4
 :arith-num-rows            4
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      2
 :arith-tableau-max-columns 30
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.55
 :memory                    3.08
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1080391
 :num-checks                1
 :propagations              6
 :rlimit-count              2174
 :time                      0.01
 :total-time                0.02)
