unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun q!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x75 (* y00 q00)))
 (let ((?x72 (+ r00 ?x75 (* (- 1) (* y00 q!2)) (* (- 1) r!1))))
 (let (($x89 (>= ?x72 0)))
 (let (($x182 (= ?x72 0)))
 (let ((?x274 (* (- 9) (* y00 y00 y00 y00))))
 (let ((?x256 (* (- 10) (* q!2 q!2))))
 (let ((?x207 (* (- 20) q!2)))
 (let ((?x137 (+ (- 10) ?x207 (* (- 9) (* y00 y00 r!1 r!1 q!2)) (* 18 (* y00 y00 y00 r!1)) (* 18 (* y00 y00 y00 r!1 q!2)) (* (- 9) (* y00 y00 y00 y00 q!2)) ?x256 ?x274 (* (- 9) (* y00 y00 r!1 r!1)))))
 (let ((?x145 (* ?x137 (+ (* (- 1) r00) (* (- 1) ?x75) (* y00 q!2) r!1))))
 (let (($x222 (= ?x145 0)))
 (let (($x324 (not $x222)))
 (let (($x81 (not $x182)))
 (let (($x224 (or $x81 $x324)))
 (let (($x258 (and (= (+ y00 (* (- 1) y!0)) 0) $x182 $x224)))
 (let ((?x84 (* (- 1) ?x75)))
 (let ((?x67 (* (- 1) r00)))
 (let ((?x247 (+ r!1 ?x67 (* q!2 y00) ?x84)))
 (let ((?x183 (+ (- 10) ?x207 ?x256 (* (- 9) (* r!1 r!1 y00 y00)) (* (- 9) (* q!2 r!1 r!1 y00 y00)) (* 18 (* r!1 y00 y00 y00)) (* 18 (* q!2 r!1 y00 y00 y00)) ?x274 (* (- 9) (* q!2 y00 y00 y00 y00)))))
 (let (($x248 (= ?x247 0)))
 (let (($x178 (and (= (+ y!0 (* (- 1) y00)) 0) $x248 (or (not $x248) (not (= (* ?x183 ?x247) 0))))))
 (let (($x148 (exists ((q Int) (r Int) (y Int) )(! (let ((?x75 (* y00 q00)))
 (let ((?x84 (* (- 1) ?x75)))
 (let ((?x39 (* q y00)))
 (let ((?x67 (* (- 1) r00)))
 (let ((?x98 (+ r ?x67 ?x39 ?x84)))
 (let ((?x278 (* (- 9) (* q y00 y00 y00 y00))))
 (let ((?x274 (* (- 9) (* y00 y00 y00 y00))))
 (let ((?x286 (* 18 (* q r y00 y00 y00))))
 (let ((?x285 (* 18 (* r y00 y00 y00))))
 (let ((?x246 (* (- 9) (* q r r y00 y00))))
 (let ((?x243 (* (- 9) (* r r y00 y00))))
 (let ((?x177 (* (- 10) (* q q))))
 (let ((?x330 (* (+ (- 10) (* (- 20) q) ?x177 ?x243 ?x246 ?x285 ?x286 ?x274 ?x278) ?x98)))
 (let (($x103 (= ?x98 0)))
 (let (($x162 (not $x103)))
 (let (($x78 (= (+ y (* (- 1) y00)) 0)))
 (and $x78 $x103 (or $x162 (not (= ?x330 0)))))))))))))))))))) :qid k!31))
 ))
 (let (($x155 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x116 (* (- 1) ?x36)))
 (let ((?x67 (* (- 1) r00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x234 (+ r ?x69 ?x67 ?x116 (* y00 (+ 1 q)))))
 (let ((?x291 (* (- 9) (* y00 y00 (+ 1 q) (+ r ?x69) (+ r ?x69)))))
 (let (($x267 (= (* (+ (* (- 10) (* (+ 1 q) (+ 1 q))) ?x291) ?x234) 0)))
 (let (($x212 (or (not (= ?x234 0)) (not $x267))))
 (let (($x141 (= (+ r ?x67 ?x116 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x141 $x212)))))))))) :qid k!31))
 ))
 (let ((?x154 (lambda ((q Int) (r Int) (y Int) )(let ((?x75 (* y00 q00)))
 (let ((?x84 (* (- 1) ?x75)))
 (let ((?x39 (* q y00)))
 (let ((?x67 (* (- 1) r00)))
 (let ((?x98 (+ r ?x67 ?x39 ?x84)))
 (let ((?x278 (* (- 9) (* q y00 y00 y00 y00))))
 (let ((?x274 (* (- 9) (* y00 y00 y00 y00))))
 (let ((?x286 (* 18 (* q r y00 y00 y00))))
 (let ((?x285 (* 18 (* r y00 y00 y00))))
 (let ((?x246 (* (- 9) (* q r r y00 y00))))
 (let ((?x243 (* (- 9) (* r r y00 y00))))
 (let ((?x177 (* (- 10) (* q q))))
 (let ((?x330 (* (+ (- 10) (* (- 20) q) ?x177 ?x243 ?x246 ?x285 ?x286 ?x274 ?x278) ?x98)))
 (let (($x103 (= ?x98 0)))
 (let (($x162 (not $x103)))
 (let (($x78 (= (+ y (* (- 1) y00)) 0)))
 (let (($x353 (and $x78 $x103 (or $x162 (not (= ?x330 0))))))
 (let ((?x36 (* q00 y00)))
 (let ((?x116 (* (- 1) ?x36)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x234 (+ r ?x69 ?x67 ?x116 (* y00 (+ 1 q)))))
 (let ((?x291 (* (- 9) (* y00 y00 (+ 1 q) (+ r ?x69) (+ r ?x69)))))
 (let (($x267 (= (* (+ (* (- 10) (* (+ 1 q) (+ 1 q))) ?x291) ?x234) 0)))
 (let (($x212 (or (not (= ?x234 0)) (not $x267))))
 (let (($x141 (= (+ r ?x67 ?x116 (* y00 q)) 0)))
 (let (($x160 (and (= (+ y00 (* (- 1) y)) 0) $x141 $x212)))
 (rewrite (= $x160 $x353)))))))))))))))))))))))))))))
 ))
 (let (($x109 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x116 (* (- 1) ?x36)))
 (let ((?x67 (* (- 1) r00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x234 (+ r ?x69 ?x67 ?x116 (* y00 (+ 1 q)))))
 (let ((?x291 (* (- 9) (* y00 y00 (+ 1 q) (+ r ?x69) (+ r ?x69)))))
 (let (($x267 (= (* (+ (* (- 10) (* (+ 1 q) (+ 1 q))) ?x291) ?x234) 0)))
 (let (($x212 (or (not (= ?x234 0)) (not $x267))))
 (let (($x141 (= (+ r ?x67 ?x116 (* y00 q)) 0)))
 (and (= (+ ?x69 y) 0) $x141 $x212)))))))))) :qid k!31))
 ))
 (let ((?x156 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x116 (* (- 1) ?x36)))
 (let ((?x67 (* (- 1) r00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x234 (+ r ?x69 ?x67 ?x116 (* y00 (+ 1 q)))))
 (let ((?x291 (* (- 9) (* y00 y00 (+ 1 q) (+ r ?x69) (+ r ?x69)))))
 (let (($x267 (= (* (+ (* (- 10) (* (+ 1 q) (+ 1 q))) ?x291) ?x234) 0)))
 (let (($x212 (or (not (= ?x234 0)) (not $x267))))
 (let (($x141 (= (+ r ?x67 ?x116 (* y00 q)) 0)))
 (let (($x160 (and (= (+ y00 (* (- 1) y)) 0) $x141 $x212)))
 (let (($x214 (and (= (+ ?x69 y) 0) $x141 $x212)))
 (rewrite (= $x214 $x160))))))))))))))
 ))
 (let (($x64 (exists ((q Int) (r Int) (y Int) )(! (let ((?x50 (+ (- (- (- r y00) r00) (* q00 y00)) (* (+ q 1) y00))))
 (let ((?x58 (- (* (- 10) (+ q 1) (+ q 1)) (* 9 (+ q 1) (- r y00) (- r y00) y00 y00))))
 (let (($x62 (or (not (= (+ (* (- 1) y00) y00) 0)) (not (= ?x50 0)) (not (= (* ?x58 ?x50) 0)))))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) $x62)))) :qid k!31))
 ))
 (let ((?x111 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x116 (* (- 1) ?x36)))
 (let ((?x67 (* (- 1) r00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x234 (+ r ?x69 ?x67 ?x116 (* y00 (+ 1 q)))))
 (let ((?x291 (* (- 9) (* y00 y00 (+ 1 q) (+ r ?x69) (+ r ?x69)))))
 (let (($x267 (= (* (+ (* (- 10) (* (+ 1 q) (+ 1 q))) ?x291) ?x234) 0)))
 (let (($x212 (or (not (= ?x234 0)) (not $x267))))
 (let (($x141 (= (+ r ?x67 ?x116 (* y00 q)) 0)))
 (let (($x214 (and (= (+ ?x69 y) 0) $x141 $x212)))
 (let ((?x50 (+ (- (- (- r y00) r00) ?x36) (* (+ q 1) y00))))
 (let ((?x58 (- (* (- 10) (+ q 1) (+ q 1)) (* 9 (+ q 1) (- r y00) (- r y00) y00 y00))))
 (let (($x62 (or (not (= (+ (* (- 1) y00) y00) 0)) (not (= ?x50 0)) (not (= (* ?x58 ?x50) 0)))))
 (let (($x63 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) $x62)))
 (rewrite (= $x63 $x214)))))))))))))))))
 ))
 (let ((@x65 (asserted $x64)))
 (let ((@x157 (mp (mp @x65 (quant-intro (proof-bind ?x111) (= $x64 $x109)) $x109) (rewrite (= $x109 $x109)) $x109)))
 (let ((@x174 (mp (mp @x157 (quant-intro (proof-bind ?x156) (= $x109 $x155)) $x155) (quant-intro (proof-bind ?x154) (= $x155 $x148)) $x148)))
 (let ((@x230 (mp (mp~ @x174 (sk (~ $x148 $x178)) $x178) (rewrite (= $x178 $x258)) $x258)))
 (let ((@x194 (and-elim @x230 $x182)))
 (let ((@x165 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x81 $x89)) @x194 $x89)))
 (let (($x93 (<= ?x72 0)))
 (let ((@x168 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x81 $x93)) @x194 $x93)))
 (let (($x101 (not (<= ?x145 0))))
 (let (($x79 (>= ?x145 0)))
 (let ((@x99 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x222 $x101 (not $x79))) (unit-resolution (and-elim @x230 $x224) @x194 $x324) (or $x101 (not $x79)))))
 (let ((@x199 (unit-resolution @x99 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x79)) @x168 @x165 false) $x79) $x101)))
 ((_ th-lemma arith farkas 1 1 1) @x199 @x168 @x165 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        14
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-fixed-eqs           2
 :arith-max-min             62
 :arith-nonlinear-bounds    6
 :arith-num-rows            4
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 25
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.55
 :memory                    3.06
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1082577
 :num-checks                1
 :propagations              6
 :rlimit-count              1810
 :time                      0.01
 :total-time                0.02)
