unsat
((set-logic NIA)
(proof
(let (($x337 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x152 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x70 (* (- 1) y00)))
 (let (($x135 (not (= (+ r ?x70 ?x68 ?x152 (* y00 (+ 1 q))) 0))))
 (let (($x328 (= (+ r ?x68 ?x152 (* y00 q)) 0)))
 (let ((?x356 (* (- 1) y)))
 (let ((?x358 (+ y00 ?x356)))
 (let (($x320 (= ?x358 0)))
 (and $x320 $x328 $x135)))))))))) :qid k!31))
 ))
 (let (($x305 (exists ((q Int) (r Int) (y Int) )(! false :qid k!31))
 ))
 (let ((@x311 (elim-unused (= $x305 false))))
 (let ((?x354 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x152 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x70 (* (- 1) y00)))
 (let (($x135 (not (= (+ r ?x70 ?x68 ?x152 (* y00 (+ 1 q))) 0))))
 (let (($x328 (= (+ r ?x68 ?x152 (* y00 q)) 0)))
 (let ((?x356 (* (- 1) y)))
 (let ((?x358 (+ y00 ?x356)))
 (let (($x320 (= ?x358 0)))
 (let (($x344 (and $x320 $x328 $x135)))
 (let (($x104 (= (+ r ?x68 (* q y00) (* (- 1) (* y00 q00))) 0)))
 (let (($x112 (not $x104)))
 (let (($x79 (= (+ y ?x70) 0)))
 (let (($x298 (and $x79 $x104 $x112)))
 (let ((@x302 (rewrite (= $x298 false))))
 (let ((@x324 (monotonicity (rewrite (= ?x358 (+ ?x356 y00))) (= $x320 (= (+ ?x356 y00) 0)))))
 (let ((@x332 (trans @x324 (rewrite (= (= (+ ?x356 y00) 0) $x79)) (= $x320 $x79))))
 (let ((@x362 (monotonicity @x332 (rewrite (= $x328 $x104)) (rewrite (= $x135 $x112)) (= $x344 $x298))))
 (trans @x362 @x302 (= $x344 false)))))))))))))))))))))
 ))
 (let ((@x316 (trans (quant-intro (proof-bind ?x354) (= $x337 $x305)) @x311 (= $x337 false))))
 (let (($x400 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x152 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x70 (* (- 1) y00)))
 (let (($x135 (not (= (+ r ?x70 ?x68 ?x152 (* y00 (+ 1 q))) 0))))
 (let (($x328 (= (+ r ?x68 ?x152 (* y00 q)) 0)))
 (and (= (+ ?x70 y) 0) $x328 $x135))))))) :qid k!31))
 ))
 (let ((?x321 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x152 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x70 (* (- 1) y00)))
 (let (($x135 (not (= (+ r ?x70 ?x68 ?x152 (* y00 (+ 1 q))) 0))))
 (let (($x328 (= (+ r ?x68 ?x152 (* y00 q)) 0)))
 (let ((?x356 (* (- 1) y)))
 (let ((?x358 (+ y00 ?x356)))
 (let (($x320 (= ?x358 0)))
 (let (($x344 (and $x320 $x328 $x135)))
 (let (($x398 (and (= (+ ?x70 y) 0) $x328 $x135)))
 (rewrite (= $x398 $x344))))))))))))))
 ))
 (let (($x65 (exists ((q Int) (r Int) (y Int) )(! (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x48 (+ q 1)))
 (let ((?x57 (* 3 ?x48 y00)))
 (let ((?x45 (- r y00)))
 (let ((?x56 (* 2 ?x45 ?x45 y00)))
 (let ((?x54 (* 3 ?x48 ?x45 ?x45 y00 y00)))
 (let ((?x58 (- ?x54 ?x56)))
 (let ((?x59 (- ?x58 ?x57)))
 (let ((?x60 (* ?x59 ?x42)))
 (let (($x61 (= ?x60 0)))
 (let (($x62 (not $x61)))
 (let (($x52 (not (= (+ (- (- ?x45 r00) (* q00 y00)) (* ?x48 y00)) 0))))
 (let (($x43 (= ?x42 0)))
 (let (($x44 (not $x43)))
 (let (($x63 (or $x44 $x52 $x62)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x63))))))))))))))))))) :qid k!31))
 ))
 (let ((?x402 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x152 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x70 (* (- 1) y00)))
 (let (($x135 (not (= (+ r ?x70 ?x68 ?x152 (* y00 (+ 1 q))) 0))))
 (let (($x328 (= (+ r ?x68 ?x152 (* y00 q)) 0)))
 (let (($x398 (and (= (+ ?x70 y) 0) $x328 $x135)))
 (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x48 (+ q 1)))
 (let ((?x57 (* 3 ?x48 y00)))
 (let ((?x45 (- r y00)))
 (let ((?x56 (* 2 ?x45 ?x45 y00)))
 (let ((?x54 (* 3 ?x48 ?x45 ?x45 y00 y00)))
 (let ((?x58 (- ?x54 ?x56)))
 (let ((?x59 (- ?x58 ?x57)))
 (let ((?x60 (* ?x59 ?x42)))
 (let (($x61 (= ?x60 0)))
 (let (($x62 (not $x61)))
 (let (($x52 (not (= (+ (- (- ?x45 r00) ?x36) (* ?x48 y00)) 0))))
 (let (($x43 (= ?x42 0)))
 (let (($x44 (not $x43)))
 (let (($x63 (or $x44 $x52 $x62)))
 (let (($x41 (= (+ (- (- r r00) ?x36) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x64 (and $x33 $x41 $x63)))
 (rewrite (= $x64 $x398)))))))))))))))))))))))))))))
 ))
 (let ((@x66 (asserted $x65)))
 (let ((@x331 (mp (mp @x66 (quant-intro (proof-bind ?x402) (= $x65 $x400)) $x400) (rewrite (= $x400 $x400)) $x400)))
 (mp (mp @x331 (quant-intro (proof-bind ?x321) (= $x400 $x337)) $x337) @x316 false))))))))))))))

(:max-memory   3.35
 :memory       3.04
 :mk-bool-var  6
 :num-allocs   959876
 :num-checks   1
 :rlimit-count 479
 :time         0.01
 :total-time   0.02)
