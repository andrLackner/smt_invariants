unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x244 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x107 (+ r00 ?x86 ?x102 ?x244 (* (- 1) r!1) (* 2 x!0))))
 (let (($x126 (<= ?x107 0)))
 (let (($x111 (= ?x107 0)))
 (let ((?x299 (+ (* 13 r00) (* (- 26) x00) (* (- 13) ?x36) (* 16 (* r!1 r!1 x!0)) (* 8 (* r!1 r!1 r!1)) (* 8 (* r!1 r!1 r!1 r!1)) (* 8 (* r00 r!1 r!1)) (* (- 16) (* r00 r00 r!1)) (* (- 8) (* r00 r00 r!1 r!1)) (* 16 (* r00 r!1)) (* (- 32) (* x00 r!1)) (* (- 3) ?x244) (* (- 16) (* x00 r!1 r!1)) (* (- 13) r!1) (* 32 (* r!1 x!0)) (* 26 x!0))))
 (let (($x300 (= ?x299 0)))
 (let (($x79 (not $x300)))
 (let (($x124 (not $x111)))
 (let (($x215 (or $x124 $x79)))
 (let (($x134 (and $x111 $x215)))
 (let ((?x315 (* 13 ?x36)))
 (let ((?x314 (* 26 x00)))
 (let ((?x312 (* (- 13) r00)))
 (let ((?x186 (+ (* 13 r!1) (* (- 26) x!0) ?x312 (* 3 ?x244) ?x314 ?x315 (* (- 8) (* r!1 r!1 r!1)) (* (- 32) (* r!1 x!0)) (* (- 16) (* r!1 r!1 x!0)) (* (- 8) (* r!1 r!1 r!1 r!1)) (* (- 8) (* r!1 r!1 r00)) (* (- 16) (* r!1 r00)) (* 32 (* r!1 x00)) (* 16 (* r!1 r!1 x00)) (* 16 (* r!1 r00 r00)) (* 8 (* r!1 r!1 r00 r00)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x117 (* (- 1) r00)))
 (let (($x198 (= (+ r!1 (* (- 2) x!0) ?x117 (* (- 1) ?x244) ?x35 ?x36) 0)))
 (let (($x332 (and $x198 (or (not $x198) (not (= ?x186 0))))))
 (let (($x194 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x315 (* 13 ?x36)))
 (let ((?x314 (* 26 x00)))
 (let ((?x312 (* (- 13) r00)))
 (let ((?x325 (+ (* 13 r) (* (- 26) x) ?x312 (* 3 (* r r)) ?x314 ?x315 (* (- 8) (* r r r)) (* (- 32) (* r x)) (* (- 16) (* r r x)) (* (- 8) (* r r r r)) (* (- 8) (* r r r00)) (* (- 16) (* r r00)) (* 32 (* r x00)) (* 16 (* r r x00)) (* 16 (* r r00 r00)) (* 8 (* r r r00 r00)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x118 (* (- 1) ?x30)))
 (let ((?x117 (* (- 1) r00)))
 (let ((?x116 (* (- 2) x)))
 (let (($x120 (= (+ r ?x116 ?x117 ?x118 ?x35 ?x36) 0)))
 (let (($x216 (not $x120)))
 (and $x120 (or $x216 (not (= ?x325 0)))))))))))))))) :qid k!27))
 ))
 (let (($x151 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x63 (+ 1 r)))
 (let ((?x156 (* ?x63 ?x63)))
 (let ((?x190 (* (- 3) r)))
 (let ((?x210 (* (+ 5 (* 8 ?x156)) (+ (- 1) ?x190 r00 ?x156 ?x32 ?x86 ?x102))))
 (let (($x222 (not (= ?x210 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x116 (* (- 2) x)))
 (let ((?x117 (* (- 1) r00)))
 (let (($x161 (not (= (+ (* 3 r) ?x117 (* (- 1) ?x156) ?x116 ?x35 ?x36) (- 1)))))
 (and (= (+ r ?x117 (* (- 1) (* r r)) ?x116 ?x35 ?x36) 0) (or $x161 $x222))))))))))))))) :qid k!27))
 ))
 (let ((?x76 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x315 (* 13 ?x36)))
 (let ((?x314 (* 26 x00)))
 (let ((?x312 (* (- 13) r00)))
 (let ((?x325 (+ (* 13 r) (* (- 26) x) ?x312 (* 3 (* r r)) ?x314 ?x315 (* (- 8) (* r r r)) (* (- 32) (* r x)) (* (- 16) (* r r x)) (* (- 8) (* r r r r)) (* (- 8) (* r r r00)) (* (- 16) (* r r00)) (* 32 (* r x00)) (* 16 (* r r x00)) (* 16 (* r r00 r00)) (* 8 (* r r r00 r00)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x118 (* (- 1) ?x30)))
 (let ((?x117 (* (- 1) r00)))
 (let ((?x116 (* (- 2) x)))
 (let (($x120 (= (+ r ?x116 ?x117 ?x118 ?x35 ?x36) 0)))
 (let (($x216 (not $x120)))
 (let (($x207 (and $x120 (or $x216 (not (= ?x325 0))))))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x63 (+ 1 r)))
 (let ((?x156 (* ?x63 ?x63)))
 (let ((?x190 (* (- 3) r)))
 (let ((?x210 (* (+ 5 (* 8 ?x156)) (+ (- 1) ?x190 r00 ?x156 ?x32 ?x86 ?x102))))
 (let (($x222 (not (= ?x210 0))))
 (let (($x161 (not (= (+ (* 3 r) ?x117 (* (- 1) ?x156) ?x116 ?x35 ?x36) (- 1)))))
 (let (($x133 (and (= (+ r ?x117 ?x118 ?x116 ?x35 ?x36) 0) (or $x161 $x222))))
 (rewrite (= $x133 $x207))))))))))))))))))))))))))
 ))
 (let (($x237 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x63 (+ 1 r)))
 (let ((?x156 (* ?x63 ?x63)))
 (let ((?x190 (* (- 3) r)))
 (let ((?x210 (* (+ 5 (* 8 ?x156)) (+ (- 1) ?x190 r00 ?x156 ?x32 ?x86 ?x102))))
 (let (($x222 (not (= ?x210 0))))
 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x86 ?x102) 0) (or (not (= (+ ?x190 r00 ?x156 ?x32 ?x86 ?x102) 1)) $x222))))))))))) :qid k!27))
 ))
 (let ((?x150 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x63 (+ 1 r)))
 (let ((?x156 (* ?x63 ?x63)))
 (let ((?x190 (* (- 3) r)))
 (let ((?x210 (* (+ 5 (* 8 ?x156)) (+ (- 1) ?x190 r00 ?x156 ?x32 ?x86 ?x102))))
 (let (($x222 (not (= ?x210 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x116 (* (- 2) x)))
 (let ((?x117 (* (- 1) r00)))
 (let (($x161 (not (= (+ (* 3 r) ?x117 (* (- 1) ?x156) ?x116 ?x35 ?x36) (- 1)))))
 (let (($x133 (and (= (+ r ?x117 (* (- 1) (* r r)) ?x116 ?x35 ?x36) 0) (or $x161 $x222))))
 (let (($x233 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x86 ?x102) 0) (or (not (= (+ ?x190 r00 ?x156 ?x32 ?x86 ?x102) 1)) $x222))))
 (rewrite (= $x233 $x133))))))))))))))))))
 ))
 (let (($x60 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let ((?x48 (- (- ?x46 ?x35) ?x36)))
 (let (($x56 (= (* ?x48 (+ 5 (* 8 (+ r 1) (+ r 1)))) 0)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x48 0)) (not $x56))))))))) :qid k!27))
 ))
 (let ((?x208 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x63 (+ 1 r)))
 (let ((?x156 (* ?x63 ?x63)))
 (let ((?x190 (* (- 3) r)))
 (let ((?x210 (* (+ 5 (* 8 ?x156)) (+ (- 1) ?x190 r00 ?x156 ?x32 ?x86 ?x102))))
 (let (($x222 (not (= ?x210 0))))
 (let (($x233 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x86 ?x102) 0) (or (not (= (+ ?x190 r00 ?x156 ?x32 ?x86 ?x102) 1)) $x222))))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let ((?x48 (- (- ?x46 ?x35) ?x36)))
 (let (($x56 (= (* ?x48 (+ 5 (* 8 (+ r 1) (+ r 1)))) 0)))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x59 (and $x40 (or (not (= ?x48 0)) (not $x56)))))
 (rewrite (= $x59 $x233)))))))))))))))))))
 ))
 (let ((@x61 (asserted $x60)))
 (let ((@x130 (mp (mp @x61 (quant-intro (proof-bind ?x208) (= $x60 $x237)) $x237) (rewrite (= $x237 $x237)) $x237)))
 (let ((@x113 (mp (mp @x130 (quant-intro (proof-bind ?x150) (= $x237 $x151)) $x151) (quant-intro (proof-bind ?x76) (= $x151 $x194)) $x194)))
 (let ((@x247 (mp (mp~ @x113 (sk (~ $x194 $x332)) $x332) (rewrite (= $x332 $x134)) $x134)))
 (let ((@x253 (and-elim @x247 $x111)))
 (let ((@x266 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x124 $x126)) @x253 $x126)))
 (let (($x196 (>= ?x107 0)))
 (let ((@x115 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x124 $x196)) @x253 $x196)))
 (let (($x301 (not (>= ?x299 0))))
 (let (($x200 (<= ?x299 0)))
 (let ((@x278 (lemma ((_ th-lemma arith) (hypothesis (not $x200)) @x115 @x266 @x115 @x266 false) $x200)))
 (let ((@x262 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x300 (not $x200) $x301)) (unit-resolution (and-elim @x247 $x215) @x253 $x79) (or (not $x200) $x301))))
 ((_ th-lemma arith) (unit-resolution @x262 @x278 $x301) @x115 @x266 @x115 @x266 false)))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        11
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             120
 :arith-nonlinear-bounds    8
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 33
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.55
 :memory                    3.07
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1116221
 :num-checks                1
 :propagations              4
 :rlimit-count              2182
 :time                      0.01
 :total-time                0.01)
