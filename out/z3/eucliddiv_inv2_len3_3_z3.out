unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun q!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x77 (* y00 q00)))
 (let ((?x265 (+ r00 ?x77 (* (- 1) (* y00 q!2)) (* (- 1) r!1))))
 (let (($x233 (>= ?x265 0)))
 (let (($x209 (= ?x265 0)))
 (let ((?x261 (* 2 (* r!1 r!1))))
 (let ((?x280 (* 2 (* q!2 r!1 r!1))))
 (let ((?x169 (* y00 y00)))
 (let ((?x319 (* 8 ?x169)))
 (let ((?x245 (* (- 7) y00)))
 (let ((?x91 (+ ?x245 (* 6 (* y00 y00 q!2 q!2)) (* (- 4) (* y00 r!1)) (* (- 4) (* y00 q!2 r!1)) (* (- 7) (* y00 q!2)) (* 14 (* y00 y00 q!2)) ?x319 ?x280 ?x261)))
 (let ((?x216 (* ?x91 (+ (* (- 1) r00) (* (- 1) ?x77) (* y00 q!2) r!1))))
 (let (($x211 (= ?x216 0)))
 (let (($x104 (not $x211)))
 (let (($x207 (not $x209)))
 (let (($x110 (or $x207 $x104)))
 (let (($x289 (and (= (+ y00 (* (- 1) y!0)) 0) $x209 $x110)))
 (let ((?x86 (* (- 1) ?x77)))
 (let ((?x292 (* q!2 y00)))
 (let ((?x69 (* (- 1) r00)))
 (let ((?x270 (+ r!1 ?x69 ?x292 ?x86)))
 (let ((?x264 (+ ?x245 (* (- 7) ?x292) ?x319 (* 14 (* q!2 y00 y00)) (* 6 (* q!2 q!2 y00 y00)) ?x261 ?x280 (* (- 4) (* r!1 y00)) (* (- 4) (* q!2 r!1 y00)))))
 (let (($x293 (= ?x270 0)))
 (let (($x276 (and (= (+ y!0 (* (- 1) y00)) 0) $x293 (or (not $x293) (not (= (* ?x264 ?x270) 0))))))
 (let (($x149 (exists ((q Int) (r Int) (y Int) )(! (let ((?x77 (* y00 q00)))
 (let ((?x86 (* (- 1) ?x77)))
 (let ((?x39 (* q y00)))
 (let ((?x69 (* (- 1) r00)))
 (let ((?x100 (+ r ?x69 ?x39 ?x86)))
 (let ((?x188 (* 2 (* q r r))))
 (let ((?x186 (* 2 (* r r))))
 (let ((?x176 (* 6 (* q q y00 y00))))
 (let ((?x169 (* y00 y00)))
 (let ((?x319 (* 8 ?x169)))
 (let ((?x248 (* (- 7) ?x39)))
 (let ((?x245 (* (- 7) y00)))
 (let ((?x322 (+ ?x245 ?x248 ?x319 (* 14 (* q y00 y00)) ?x176 ?x186 ?x188 (* (- 4) (* r y00)) (* (- 4) (* q r y00)))))
 (let (($x105 (= ?x100 0)))
 (let (($x164 (not $x105)))
 (let (($x80 (= (+ y (* (- 1) y00)) 0)))
 (and $x80 $x105 (or $x164 (not (= (* ?x322 ?x100) 0)))))))))))))))))))) :qid k!31))
 ))
 (let (($x155 (exists ((q Int) (r Int) (y Int) )(! (let ((?x227 (+ 1 q)))
 (let ((?x234 (* y00 ?x227)))
 (let ((?x36 (* q00 y00)))
 (let ((?x114 (* (- 1) ?x36)))
 (let ((?x69 (* (- 1) r00)))
 (let ((?x71 (* (- 1) y00)))
 (let ((?x217 (+ r ?x71 ?x69 ?x114 ?x234)))
 (let ((?x206 (+ (* 6 (* y00 y00 ?x227 ?x227)) (* 2 (* ?x227 (+ r ?x71) (+ r ?x71))) (* (- 7) ?x234))))
 (let (($x168 (or (not (= ?x217 0)) (not (= (* ?x206 ?x217) 0)))))
 (let (($x142 (= (+ r ?x69 ?x114 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x142 $x168))))))))))) :qid k!31))
 ))
 (let ((?x154 (lambda ((q Int) (r Int) (y Int) )(let ((?x77 (* y00 q00)))
 (let ((?x86 (* (- 1) ?x77)))
 (let ((?x39 (* q y00)))
 (let ((?x69 (* (- 1) r00)))
 (let ((?x100 (+ r ?x69 ?x39 ?x86)))
 (let ((?x188 (* 2 (* q r r))))
 (let ((?x186 (* 2 (* r r))))
 (let ((?x176 (* 6 (* q q y00 y00))))
 (let ((?x169 (* y00 y00)))
 (let ((?x319 (* 8 ?x169)))
 (let ((?x248 (* (- 7) ?x39)))
 (let ((?x245 (* (- 7) y00)))
 (let ((?x322 (+ ?x245 ?x248 ?x319 (* 14 (* q y00 y00)) ?x176 ?x186 ?x188 (* (- 4) (* r y00)) (* (- 4) (* q r y00)))))
 (let (($x105 (= ?x100 0)))
 (let (($x164 (not $x105)))
 (let (($x80 (= (+ y (* (- 1) y00)) 0)))
 (let (($x350 (and $x80 $x105 (or $x164 (not (= (* ?x322 ?x100) 0))))))
 (let ((?x227 (+ 1 q)))
 (let ((?x234 (* y00 ?x227)))
 (let ((?x36 (* q00 y00)))
 (let ((?x114 (* (- 1) ?x36)))
 (let ((?x71 (* (- 1) y00)))
 (let ((?x217 (+ r ?x71 ?x69 ?x114 ?x234)))
 (let ((?x206 (+ (* 6 (* y00 y00 ?x227 ?x227)) (* 2 (* ?x227 (+ r ?x71) (+ r ?x71))) (* (- 7) ?x234))))
 (let (($x168 (or (not (= ?x217 0)) (not (= (* ?x206 ?x217) 0)))))
 (let (($x142 (= (+ r ?x69 ?x114 (* y00 q)) 0)))
 (let (($x161 (and (= (+ y00 (* (- 1) y)) 0) $x142 $x168)))
 (rewrite (= $x161 $x350))))))))))))))))))))))))))))))
 ))
 (let (($x116 (exists ((q Int) (r Int) (y Int) )(! (let ((?x227 (+ 1 q)))
 (let ((?x234 (* y00 ?x227)))
 (let ((?x36 (* q00 y00)))
 (let ((?x114 (* (- 1) ?x36)))
 (let ((?x69 (* (- 1) r00)))
 (let ((?x71 (* (- 1) y00)))
 (let ((?x217 (+ r ?x71 ?x69 ?x114 ?x234)))
 (let ((?x206 (+ (* 6 (* y00 y00 ?x227 ?x227)) (* 2 (* ?x227 (+ r ?x71) (+ r ?x71))) (* (- 7) ?x234))))
 (let (($x168 (or (not (= ?x217 0)) (not (= (* ?x206 ?x217) 0)))))
 (let (($x142 (= (+ r ?x69 ?x114 (* y00 q)) 0)))
 (and (= (+ ?x71 y) 0) $x142 $x168))))))))))) :qid k!31))
 ))
 (let ((?x157 (lambda ((q Int) (r Int) (y Int) )(let ((?x227 (+ 1 q)))
 (let ((?x234 (* y00 ?x227)))
 (let ((?x36 (* q00 y00)))
 (let ((?x114 (* (- 1) ?x36)))
 (let ((?x69 (* (- 1) r00)))
 (let ((?x71 (* (- 1) y00)))
 (let ((?x217 (+ r ?x71 ?x69 ?x114 ?x234)))
 (let ((?x206 (+ (* 6 (* y00 y00 ?x227 ?x227)) (* 2 (* ?x227 (+ r ?x71) (+ r ?x71))) (* (- 7) ?x234))))
 (let (($x168 (or (not (= ?x217 0)) (not (= (* ?x206 ?x217) 0)))))
 (let (($x142 (= (+ r ?x69 ?x114 (* y00 q)) 0)))
 (let (($x161 (and (= (+ y00 (* (- 1) y)) 0) $x142 $x168)))
 (let (($x90 (and (= (+ ?x71 y) 0) $x142 $x168)))
 (rewrite (= $x90 $x161)))))))))))))))
 ))
 (let (($x66 (exists ((q Int) (r Int) (y Int) )(! (let ((?x50 (+ (- (- (- r y00) r00) (* q00 y00)) (* (+ q 1) y00))))
 (let ((?x57 (+ (* 6 (+ q 1) (+ q 1) y00 y00) (* 2 (+ q 1) (- r y00) (- r y00)))))
 (let (($x64 (or (not (= (+ (* (- 1) y00) y00) 0)) (not (= ?x50 0)) (not (= (* (- ?x57 (* 7 (+ q 1) y00)) ?x50) 0)))))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) $x64)))) :qid k!31))
 ))
 (let ((?x123 (lambda ((q Int) (r Int) (y Int) )(let ((?x227 (+ 1 q)))
 (let ((?x234 (* y00 ?x227)))
 (let ((?x36 (* q00 y00)))
 (let ((?x114 (* (- 1) ?x36)))
 (let ((?x69 (* (- 1) r00)))
 (let ((?x71 (* (- 1) y00)))
 (let ((?x217 (+ r ?x71 ?x69 ?x114 ?x234)))
 (let ((?x206 (+ (* 6 (* y00 y00 ?x227 ?x227)) (* 2 (* ?x227 (+ r ?x71) (+ r ?x71))) (* (- 7) ?x234))))
 (let (($x168 (or (not (= ?x217 0)) (not (= (* ?x206 ?x217) 0)))))
 (let (($x142 (= (+ r ?x69 ?x114 (* y00 q)) 0)))
 (let (($x90 (and (= (+ ?x71 y) 0) $x142 $x168)))
 (let ((?x50 (+ (- (- (- r y00) r00) ?x36) (* (+ q 1) y00))))
 (let ((?x57 (+ (* 6 (+ q 1) (+ q 1) y00 y00) (* 2 (+ q 1) (- r y00) (- r y00)))))
 (let (($x64 (or (not (= (+ (* (- 1) y00) y00) 0)) (not (= ?x50 0)) (not (= (* (- ?x57 (* 7 (+ q 1) y00)) ?x50) 0)))))
 (let (($x65 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) $x64)))
 (rewrite (= $x65 $x90))))))))))))))))))
 ))
 (let ((@x67 (asserted $x66)))
 (let ((@x158 (mp (mp @x67 (quant-intro (proof-bind ?x123) (= $x66 $x116)) $x116) (rewrite (= $x116 $x116)) $x116)))
 (let ((@x257 (mp (mp @x158 (quant-intro (proof-bind ?x157) (= $x116 $x155)) $x155) (quant-intro (proof-bind ?x154) (= $x155 $x149)) $x149)))
 (let ((@x79 (mp (mp~ @x257 (sk (~ $x149 $x276)) $x276) (rewrite (= $x276 $x289)) $x289)))
 (let ((@x92 (and-elim @x79 $x209)))
 (let ((@x269 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x207 $x233)) @x92 $x233)))
 (let (($x242 (<= ?x265 0)))
 (let ((@x275 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x207 $x242)) @x92 $x242)))
 (let (($x125 (not (<= ?x216 0))))
 (let (($x204 (>= ?x216 0)))
 (let ((@x72 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x211 $x125 (not $x204))) (unit-resolution (and-elim @x79 $x110) @x92 $x104) (or $x125 (not $x204)))))
 (let ((@x98 (unit-resolution @x72 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x204)) @x275 @x269 false) $x204) $x125)))
 ((_ th-lemma arith farkas 1 1 1) @x98 @x275 @x269 false)))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        14
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-fixed-eqs           2
 :arith-max-min             62
 :arith-nonlinear-bounds    6
 :arith-num-rows            4
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      2
 :arith-tableau-max-columns 27
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.55
 :memory                    3.07
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1080012
 :num-checks                1
 :propagations              6
 :rlimit-count              1838
 :time                      0.01
 :total-time                0.02)
