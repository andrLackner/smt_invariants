unsat
((set-logic NIA)
(proof
(let (($x71 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x123 (* (- 1) ?x36)))
 (let ((?x70 (* (- 1) r00)))
 (let ((?x72 (* (- 1) y00)))
 (let (($x137 (not (= (+ r ?x72 ?x70 ?x123 (* y00 (+ 1 q))) 0))))
 (let (($x530 (= (+ r ?x70 ?x123 (* y00 q)) 0)))
 (let ((?x560 (* (- 1) y)))
 (let ((?x155 (+ y00 ?x560)))
 (let (($x79 (= ?x155 0)))
 (and $x79 $x530 $x137)))))))))) :qid k!31))
 ))
 (let (($x508 (exists ((q Int) (r Int) (y Int) )(! false :qid k!31))
 ))
 (let ((@x514 (elim-unused (= $x508 false))))
 (let ((?x569 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x123 (* (- 1) ?x36)))
 (let ((?x70 (* (- 1) r00)))
 (let ((?x72 (* (- 1) y00)))
 (let (($x137 (not (= (+ r ?x72 ?x70 ?x123 (* y00 (+ 1 q))) 0))))
 (let (($x530 (= (+ r ?x70 ?x123 (* y00 q)) 0)))
 (let ((?x560 (* (- 1) y)))
 (let ((?x155 (+ y00 ?x560)))
 (let (($x79 (= ?x155 0)))
 (let (($x523 (and $x79 $x530 $x137)))
 (let (($x106 (= (+ r ?x70 (* q y00) (* (- 1) (* y00 q00))) 0)))
 (let (($x114 (not $x106)))
 (let (($x81 (= (+ y ?x72) 0)))
 (let (($x501 (and $x81 $x106 $x114)))
 (let ((@x505 (rewrite (= $x501 false))))
 (let ((@x542 (monotonicity (rewrite (= ?x155 (+ ?x560 y00))) (= $x79 (= (+ ?x560 y00) 0)))))
 (let ((@x549 (trans @x542 (rewrite (= (= (+ ?x560 y00) 0) $x81)) (= $x79 $x81))))
 (let ((@x579 (monotonicity @x549 (rewrite (= $x530 $x106)) (rewrite (= $x137 $x114)) (= $x523 $x501))))
 (trans @x579 @x505 (= $x523 false)))))))))))))))))))))
 ))
 (let ((@x575 (trans (quant-intro (proof-bind ?x569) (= $x71 $x508)) @x514 (= $x71 false))))
 (let (($x603 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x123 (* (- 1) ?x36)))
 (let ((?x70 (* (- 1) r00)))
 (let ((?x72 (* (- 1) y00)))
 (let (($x137 (not (= (+ r ?x72 ?x70 ?x123 (* y00 (+ 1 q))) 0))))
 (let (($x530 (= (+ r ?x70 ?x123 (* y00 q)) 0)))
 (and (= (+ ?x72 y) 0) $x530 $x137))))))) :qid k!31))
 ))
 (let ((?x80 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x123 (* (- 1) ?x36)))
 (let ((?x70 (* (- 1) r00)))
 (let ((?x72 (* (- 1) y00)))
 (let (($x137 (not (= (+ r ?x72 ?x70 ?x123 (* y00 (+ 1 q))) 0))))
 (let (($x530 (= (+ r ?x70 ?x123 (* y00 q)) 0)))
 (let ((?x560 (* (- 1) y)))
 (let ((?x155 (+ y00 ?x560)))
 (let (($x79 (= ?x155 0)))
 (let (($x523 (and $x79 $x530 $x137)))
 (let (($x601 (and (= (+ ?x72 y) 0) $x530 $x137)))
 (rewrite (= $x601 $x523))))))))))))))
 ))
 (let (($x67 (exists ((q Int) (r Int) (y Int) )(! (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x45 (- r y00)))
 (let ((?x48 (+ q 1)))
 (let ((?x59 (* 2 ?x48 ?x48 ?x45 ?x45 y00)))
 (let ((?x57 (* 9 ?x48 ?x48 ?x45 ?x45 y00 y00)))
 (let ((?x54 (- 10)))
 (let ((?x55 (* ?x54 ?x48 ?x48 y00 y00)))
 (let ((?x60 (- ?x55 ?x57)))
 (let ((?x61 (- ?x60 ?x59)))
 (let ((?x62 (* ?x61 ?x42)))
 (let (($x63 (= ?x62 0)))
 (let (($x64 (not $x63)))
 (let (($x52 (not (= (+ (- (- ?x45 r00) (* q00 y00)) (* ?x48 y00)) 0))))
 (let (($x43 (= ?x42 0)))
 (let (($x44 (not $x43)))
 (let (($x65 (or $x44 $x52 $x64)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x65)))))))))))))))))))) :qid k!31))
 ))
 (let ((?x605 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x123 (* (- 1) ?x36)))
 (let ((?x70 (* (- 1) r00)))
 (let ((?x72 (* (- 1) y00)))
 (let (($x137 (not (= (+ r ?x72 ?x70 ?x123 (* y00 (+ 1 q))) 0))))
 (let (($x530 (= (+ r ?x70 ?x123 (* y00 q)) 0)))
 (let (($x601 (and (= (+ ?x72 y) 0) $x530 $x137)))
 (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x45 (- r y00)))
 (let ((?x48 (+ q 1)))
 (let ((?x59 (* 2 ?x48 ?x48 ?x45 ?x45 y00)))
 (let ((?x57 (* 9 ?x48 ?x48 ?x45 ?x45 y00 y00)))
 (let ((?x54 (- 10)))
 (let ((?x55 (* ?x54 ?x48 ?x48 y00 y00)))
 (let ((?x60 (- ?x55 ?x57)))
 (let ((?x61 (- ?x60 ?x59)))
 (let ((?x62 (* ?x61 ?x42)))
 (let (($x63 (= ?x62 0)))
 (let (($x64 (not $x63)))
 (let (($x52 (not (= (+ (- (- ?x45 r00) ?x36) (* ?x48 y00)) 0))))
 (let (($x43 (= ?x42 0)))
 (let (($x44 (not $x43)))
 (let (($x65 (or $x44 $x52 $x64)))
 (let (($x41 (= (+ (- (- r r00) ?x36) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x66 (and $x33 $x41 $x65)))
 (rewrite (= $x66 $x601))))))))))))))))))))))))))))))
 ))
 (let ((@x68 (asserted $x67)))
 (let ((@x558 (mp (mp @x68 (quant-intro (proof-bind ?x605) (= $x67 $x603)) $x603) (rewrite (= $x603 $x603)) $x603)))
 (mp (mp @x558 (quant-intro (proof-bind ?x80) (= $x603 $x71)) $x71) @x575 false))))))))))))))

(:max-memory   3.42
 :memory       3.11
 :mk-bool-var  6
 :num-allocs   1004434
 :num-checks   1
 :rlimit-count 657
 :time         0.01
 :total-time   0.01)
