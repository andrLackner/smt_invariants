unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x324 (* 2 x!0)))
 (let ((?x283 (* r!1 r!1)))
 (let ((?x308 (* (- 1) r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x134 (+ r00 ?x88 ?x104 ?x308 ?x283 ?x324)))
 (let (($x204 (<= ?x134 0)))
 (let (($x299 (= ?x134 0)))
 (let ((?x363 (* (- 1) (* r!1 r!1 r!1 r!1))))
 (let ((?x364 (* 4 (* r!1 r!1 x!0))))
 (let ((?x171 (* 2 ?x283)))
 (let ((?x157 (* 6 r!1)))
 (let ((?x115 (* (- 2) (* r!1 r!1 r!1))))
 (let ((?x341 (* 2 (* r!1 x!0))))
 (let ((?x106 (* (- 1) (* r!1 r!1 x!0 x!0))))
 (let ((?x178 (* (- 1) (* x!0 x!0))))
 (let ((?x166 (* 2 (* r!1 r!1 r!1 x!0))))
 (let ((?x97 (* (- 2) (* r!1 x!0 x!0))))
 (let ((?x132 (* (+ ?x97 ?x166 ?x178 ?x106 ?x341 ?x115 ?x157 ?x171 ?x364 ?x363) ?x134)))
 (let (($x128 (= ?x132 0)))
 (let (($x136 (not $x128)))
 (let (($x227 (not $x299)))
 (let (($x129 (or $x227 $x136)))
 (let (($x359 (and $x299 $x129)))
 (let ((?x267 (* (+ ?x157 ?x171 ?x178 ?x97 ?x106 ?x115 ?x363 ?x341 ?x364 ?x166) (+ ?x308 ?x324 r00 ?x283 ?x88 ?x104))))
 (let ((?x35 (* 2 x00)))
 (let ((?x119 (* (- 1) r00)))
 (let (($x155 (= (+ r!1 (* (- 2) x!0) ?x119 (* (- 1) ?x283) ?x35 ?x36) 0)))
 (let (($x305 (and $x155 (or (not $x155) (not (= ?x267 0))))))
 (let (($x384 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x67 (* (- 1) r)))
 (let ((?x110 (+ ?x67 ?x32 r00 ?x30 ?x88 ?x104)))
 (let ((?x382 (* 2 (* r r r x))))
 (let ((?x379 (* 4 (* r r x))))
 (let ((?x375 (* 2 (* r x))))
 (let ((?x362 (* (- 1) (* r r r r))))
 (let ((?x372 (* (- 2) (* r r r))))
 (let ((?x360 (* (- 1) (* r r x x))))
 (let ((?x369 (* (- 2) (* r x x))))
 (let ((?x358 (* (- 1) (* x x))))
 (let ((?x377 (* 2 ?x30)))
 (let ((?x376 (* (+ (* 6 r) ?x377 ?x358 ?x369 ?x360 ?x372 ?x362 ?x375 ?x379 ?x382) ?x110)))
 (let ((?x35 (* 2 x00)))
 (let ((?x120 (* (- 1) ?x30)))
 (let ((?x119 (* (- 1) r00)))
 (let ((?x118 (* (- 2) x)))
 (let (($x122 (= (+ r ?x118 ?x119 ?x120 ?x35 ?x36) 0)))
 (let (($x218 (not $x122)))
 (and $x122 (or $x218 (not (= ?x376 0))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x141 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x314 (+ 1 r)))
 (let ((?x241 (* ?x314 ?x314)))
 (let ((?x139 (* (- 3) r)))
 (let ((?x82 (* (- 1) (* ?x314 ?x314 (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x207 (* (+ (- 3) (* 3 ?x241) ?x82) (+ (- 1) ?x139 r00 ?x241 ?x32 ?x88 ?x104))))
 (let (($x84 (not (= ?x207 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x118 (* (- 2) x)))
 (let ((?x119 (* (- 1) r00)))
 (let ((?x234 (* 3 r)))
 (let (($x175 (or (not (= (+ ?x234 ?x119 (* (- 1) ?x241) ?x118 ?x35 ?x36) (- 1))) $x84)))
 (and (= (+ r ?x119 (* (- 1) (* r r)) ?x118 ?x35 ?x36) 0) $x175)))))))))))))))) :qid k!27))
 ))
 (let ((?x380 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x67 (* (- 1) r)))
 (let ((?x110 (+ ?x67 ?x32 r00 ?x30 ?x88 ?x104)))
 (let ((?x382 (* 2 (* r r r x))))
 (let ((?x379 (* 4 (* r r x))))
 (let ((?x375 (* 2 (* r x))))
 (let ((?x362 (* (- 1) (* r r r r))))
 (let ((?x372 (* (- 2) (* r r r))))
 (let ((?x360 (* (- 1) (* r r x x))))
 (let ((?x369 (* (- 2) (* r x x))))
 (let ((?x358 (* (- 1) (* x x))))
 (let ((?x377 (* 2 ?x30)))
 (let ((?x376 (* (+ (* 6 r) ?x377 ?x358 ?x369 ?x360 ?x372 ?x362 ?x375 ?x379 ?x382) ?x110)))
 (let ((?x35 (* 2 x00)))
 (let ((?x120 (* (- 1) ?x30)))
 (let ((?x119 (* (- 1) r00)))
 (let ((?x118 (* (- 2) x)))
 (let (($x122 (= (+ r ?x118 ?x119 ?x120 ?x35 ?x36) 0)))
 (let (($x218 (not $x122)))
 (let (($x185 (and $x122 (or $x218 (not (= ?x376 0))))))
 (let ((?x314 (+ 1 r)))
 (let ((?x241 (* ?x314 ?x314)))
 (let ((?x139 (* (- 3) r)))
 (let ((?x91 (+ (- 3) (* 3 ?x241) (* (- 1) (* ?x314 ?x314 (+ x ?x67) (+ x ?x67))))))
 (let (($x84 (not (= (* ?x91 (+ (- 1) ?x139 r00 ?x241 ?x32 ?x88 ?x104)) 0))))
 (let (($x142 (not (= (+ (* 3 r) ?x119 (* (- 1) ?x241) ?x118 ?x35 ?x36) (- 1)))))
 (let (($x127 (and (= (+ r ?x119 ?x120 ?x118 ?x35 ?x36) 0) (or $x142 $x84))))
 (rewrite (= $x127 $x185))))))))))))))))))))))))))))))))))
 ))
 (let (($x212 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x314 (+ 1 r)))
 (let ((?x241 (* ?x314 ?x314)))
 (let ((?x139 (* (- 3) r)))
 (let ((?x82 (* (- 1) (* ?x314 ?x314 (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x207 (* (+ (- 3) (* 3 ?x241) ?x82) (+ (- 1) ?x139 r00 ?x241 ?x32 ?x88 ?x104))))
 (let (($x84 (not (= ?x207 0))))
 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x88 ?x104) 0) (or (not (= (+ ?x139 r00 ?x241 ?x32 ?x88 ?x104) 1)) $x84)))))))))))) :qid k!27))
 ))
 (let ((?x73 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x314 (+ 1 r)))
 (let ((?x241 (* ?x314 ?x314)))
 (let ((?x139 (* (- 3) r)))
 (let ((?x82 (* (- 1) (* ?x314 ?x314 (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x207 (* (+ (- 3) (* 3 ?x241) ?x82) (+ (- 1) ?x139 r00 ?x241 ?x32 ?x88 ?x104))))
 (let (($x84 (not (= ?x207 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x118 (* (- 2) x)))
 (let ((?x119 (* (- 1) r00)))
 (let ((?x234 (* 3 r)))
 (let (($x175 (or (not (= (+ ?x234 ?x119 (* (- 1) ?x241) ?x118 ?x35 ?x36) (- 1))) $x84)))
 (let (($x127 (and (= (+ r ?x119 (* (- 1) (* r r)) ?x118 ?x35 ?x36) 0) $x175)))
 (let (($x205 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x88 ?x104) 0) (or (not (= (+ ?x139 r00 ?x241 ?x32 ?x88 ?x104) 1)) $x84))))
 (rewrite (= $x205 $x127))))))))))))))))))))
 ))
 (let (($x62 (exists ((r Int) (x Int) )(! (let ((?x56 (- (+ (- 3) (* 3 (+ r 1) (+ r 1))) (* (+ r 1) (+ r 1) (- x r) (- x r)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let ((?x48 (- (- ?x46 ?x35) ?x36)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x48 0)) (not (= (* ?x48 ?x56) 0)))))))))) :qid k!27))
 ))
 (let ((?x198 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x314 (+ 1 r)))
 (let ((?x241 (* ?x314 ?x314)))
 (let ((?x139 (* (- 3) r)))
 (let ((?x82 (* (- 1) (* ?x314 ?x314 (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x207 (* (+ (- 3) (* 3 ?x241) ?x82) (+ (- 1) ?x139 r00 ?x241 ?x32 ?x88 ?x104))))
 (let (($x84 (not (= ?x207 0))))
 (let (($x205 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x88 ?x104) 0) (or (not (= (+ ?x139 r00 ?x241 ?x32 ?x88 ?x104) 1)) $x84))))
 (let ((?x56 (- (+ (- 3) (* 3 (+ r 1) (+ r 1))) (* (+ r 1) (+ r 1) (- x r) (- x r)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let ((?x48 (- (- ?x46 ?x35) ?x36)))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x61 (and $x40 (or (not (= ?x48 0)) (not (= (* ?x48 ?x56) 0))))))
 (rewrite (= $x61 $x205))))))))))))))))))))
 ))
 (let ((@x63 (asserted $x62)))
 (let ((@x297 (mp (mp @x63 (quant-intro (proof-bind ?x198) (= $x62 $x212)) $x212) (rewrite (= $x212 $x212)) $x212)))
 (let ((@x385 (mp (mp @x297 (quant-intro (proof-bind ?x73) (= $x212 $x141)) $x141) (quant-intro (proof-bind ?x380) (= $x141 $x384)) $x384)))
 (let ((@x65 (mp (mp~ @x385 (sk (~ $x384 $x305)) $x305) (rewrite (= $x305 $x359)) $x359)))
 (let ((@x147 (and-elim @x65 $x299)))
 (let ((@x101 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x227 $x204)) @x147 $x204)))
 (let (($x89 (>= ?x134 0)))
 (let ((@x226 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x227 $x89)) @x147 $x89)))
 (let (($x189 (not (>= ?x132 0))))
 (let (($x111 (<= ?x132 0)))
 (let ((@x289 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x128 (not $x111) $x189)) (unit-resolution (and-elim @x65 $x129) @x147 $x136) (or (not $x111) $x189))))
 (let ((@x190 (unit-resolution @x289 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x111)) @x226 @x101 false) $x111) $x189)))
 ((_ th-lemma arith farkas 1 1 1) @x190 @x226 @x101 false))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 22
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.48
 :memory                    3.08
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1034608
 :num-checks                1
 :propagations              4
 :rlimit-count              1605
 :time                      0.01
 :total-time                0.01)
