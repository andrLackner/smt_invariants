unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x260 (* r!1 r!1)))
 (let ((?x109 (* (- 1) r!1)))
 (let ((?x110 (* 2 x!0)))
 (let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x128 (+ r00 ?x86 ?x102 ?x110 ?x109 ?x260)))
 (let (($x261 (<= ?x128 0)))
 (let (($x129 (= ?x128 0)))
 (let ((?x378 (* (- 1) (* x!0 x!0))))
 (let ((?x233 (* 3 ?x260)))
 (let ((?x318 (* 2 r!1)))
 (let ((?x250 (* (- 1) (* r!1 r!1 r!1 r!1))))
 (let ((?x283 (* (- 2) x!0)))
 (let ((?x284 (+ (* 2 (* x!0 r!1 r!1 r!1)) ?x283 ?x250 ?x318 ?x233 (* (- 1) (* x!0 x!0 r!1 r!1)) (* (- 2) (* x!0 r!1)) (* 2 (* x!0 r!1 r!1)) (* (- 2) (* x!0 x!0 r!1)) ?x378)))
 (let ((?x305 (* ?x284 ?x128)))
 (let (($x254 (= ?x305 0)))
 (let (($x307 (not $x254)))
 (let (($x142 (not $x129)))
 (let (($x299 (or $x142 $x307)))
 (let (($x210 (and $x129 $x299)))
 (let ((?x296 (+ ?x318 ?x283 ?x233 (* (- 2) (* r!1 x!0)) (* 2 (* r!1 r!1 x!0)) ?x378 (* (- 2) (* r!1 x!0 x!0)) (* (- 1) (* r!1 r!1 x!0 x!0)) ?x250 (* 2 (* r!1 r!1 r!1 x!0)))))
 (let (($x362 (= (+ r!1 ?x283 (* (- 1) r00) (* (- 1) ?x260) (* 2 x00) ?x36) 0)))
 (let (($x141 (or (not $x362) (not (= (* ?x296 (+ ?x109 ?x110 r00 ?x260 ?x86 ?x102)) 0)))))
 (let (($x185 (and $x362 $x141)))
 (let (($x253 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x65 (* (- 1) r)))
 (let ((?x108 (+ ?x65 ?x32 r00 ?x30 ?x86 ?x102)))
 (let ((?x379 (* 2 (* r r r x))))
 (let ((?x361 (* (- 1) (* r r r r))))
 (let ((?x359 (* (- 1) (* r r x x))))
 (let ((?x373 (* (- 2) (* r x x))))
 (let ((?x357 (* (- 1) (* x x))))
 (let ((?x375 (* 2 (* r r x))))
 (let ((?x116 (* (- 2) x)))
 (let ((?x162 (* 2 r)))
 (let ((?x107 (+ ?x162 ?x116 (* 3 ?x30) (* (- 2) (* r x)) ?x375 ?x357 ?x373 ?x359 ?x361 ?x379)))
 (let (($x120 (= (+ r ?x116 (* (- 1) r00) (* (- 1) ?x30) (* 2 x00) ?x36) 0)))
 (let (($x216 (not $x120)))
 (and $x120 (or $x216 (not (= (* ?x107 ?x108) 0)))))))))))))))))))))) :qid k!27))
 ))
 (let (($x247 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x312 (+ 1 r)))
 (let ((?x381 (* ?x312 ?x312)))
 (let ((?x92 (* (- 3) r)))
 (let ((?x168 (* (- 1) (* ?x312 ?x312 (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x183 (* (+ (* (- 2) (* ?x312 ?x312 (+ x (* (- 1) r)))) ?x168) (+ (- 1) ?x92 r00 ?x381 ?x32 ?x86 ?x102))))
 (let (($x145 (not (= ?x183 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x116 (* (- 2) x)))
 (let ((?x117 (* (- 1) r00)))
 (let (($x252 (not (= (+ (* 3 r) ?x117 (* (- 1) ?x381) ?x116 ?x35 ?x36) (- 1)))))
 (and (= (+ r ?x117 (* (- 1) (* r r)) ?x116 ?x35 ?x36) 0) (or $x252 $x145)))))))))))))))) :qid k!27))
 ))
 (let ((?x255 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x65 (* (- 1) r)))
 (let ((?x108 (+ ?x65 ?x32 r00 ?x30 ?x86 ?x102)))
 (let ((?x379 (* 2 (* r r r x))))
 (let ((?x361 (* (- 1) (* r r r r))))
 (let ((?x359 (* (- 1) (* r r x x))))
 (let ((?x373 (* (- 2) (* r x x))))
 (let ((?x357 (* (- 1) (* x x))))
 (let ((?x375 (* 2 (* r r x))))
 (let ((?x116 (* (- 2) x)))
 (let ((?x162 (* 2 r)))
 (let ((?x107 (+ ?x162 ?x116 (* 3 ?x30) (* (- 2) (* r x)) ?x375 ?x357 ?x373 ?x359 ?x361 ?x379)))
 (let (($x120 (= (+ r ?x116 (* (- 1) r00) (* (- 1) ?x30) (* 2 x00) ?x36) 0)))
 (let (($x216 (not $x120)))
 (let (($x144 (and $x120 (or $x216 (not (= (* ?x107 ?x108) 0))))))
 (let ((?x312 (+ 1 r)))
 (let ((?x381 (* ?x312 ?x312)))
 (let ((?x92 (* (- 3) r)))
 (let ((?x169 (+ (* (- 2) (* ?x312 ?x312 (+ x ?x65))) (* (- 1) (* ?x312 ?x312 (+ x ?x65) (+ x ?x65))))))
 (let (($x145 (not (= (* ?x169 (+ (- 1) ?x92 r00 ?x381 ?x32 ?x86 ?x102)) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x117 (* (- 1) r00)))
 (let (($x252 (not (= (+ (* 3 r) ?x117 (* (- 1) ?x381) ?x116 ?x35 ?x36) (- 1)))))
 (let (($x228 (and (= (+ r ?x117 (* (- 1) ?x30) ?x116 ?x35 ?x36) 0) (or $x252 $x145))))
 (rewrite (= $x228 $x144)))))))))))))))))))))))))))))))
 ))
 (let (($x195 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x312 (+ 1 r)))
 (let ((?x381 (* ?x312 ?x312)))
 (let ((?x92 (* (- 3) r)))
 (let ((?x168 (* (- 1) (* ?x312 ?x312 (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x183 (* (+ (* (- 2) (* ?x312 ?x312 (+ x (* (- 1) r)))) ?x168) (+ (- 1) ?x92 r00 ?x381 ?x32 ?x86 ?x102))))
 (let (($x145 (not (= ?x183 0))))
 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x86 ?x102) 0) (or (not (= (+ ?x92 r00 ?x381 ?x32 ?x86 ?x102) 1)) $x145)))))))))))) :qid k!27))
 ))
 (let ((?x221 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x312 (+ 1 r)))
 (let ((?x381 (* ?x312 ?x312)))
 (let ((?x92 (* (- 3) r)))
 (let ((?x168 (* (- 1) (* ?x312 ?x312 (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x183 (* (+ (* (- 2) (* ?x312 ?x312 (+ x (* (- 1) r)))) ?x168) (+ (- 1) ?x92 r00 ?x381 ?x32 ?x86 ?x102))))
 (let (($x145 (not (= ?x183 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x116 (* (- 2) x)))
 (let ((?x117 (* (- 1) r00)))
 (let (($x252 (not (= (+ (* 3 r) ?x117 (* (- 1) ?x381) ?x116 ?x35 ?x36) (- 1)))))
 (let (($x228 (and (= (+ r ?x117 (* (- 1) (* r r)) ?x116 ?x35 ?x36) 0) (or $x252 $x145))))
 (let (($x146 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x86 ?x102) 0) (or (not (= (+ ?x92 r00 ?x381 ?x32 ?x86 ?x102) 1)) $x145))))
 (rewrite (= $x146 $x228)))))))))))))))))))
 ))
 (let (($x60 (exists ((r Int) (x Int) )(! (let ((?x54 (- (* (- 2) (+ r 1) (+ r 1) (- x r)) (* (+ r 1) (+ r 1) (- x r) (- x r)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let ((?x48 (- (- ?x46 ?x35) ?x36)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x48 0)) (not (= (* ?x48 ?x54) 0)))))))))) :qid k!27))
 ))
 (let ((?x151 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x312 (+ 1 r)))
 (let ((?x381 (* ?x312 ?x312)))
 (let ((?x92 (* (- 3) r)))
 (let ((?x168 (* (- 1) (* ?x312 ?x312 (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x183 (* (+ (* (- 2) (* ?x312 ?x312 (+ x (* (- 1) r)))) ?x168) (+ (- 1) ?x92 r00 ?x381 ?x32 ?x86 ?x102))))
 (let (($x145 (not (= ?x183 0))))
 (let (($x146 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x86 ?x102) 0) (or (not (= (+ ?x92 r00 ?x381 ?x32 ?x86 ?x102) 1)) $x145))))
 (let ((?x54 (- (* (- 2) (+ r 1) (+ r 1) (- x r)) (* (+ r 1) (+ r 1) (- x r) (- x r)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let ((?x48 (- (- ?x46 ?x35) ?x36)))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x59 (and $x40 (or (not (= ?x48 0)) (not (= (* ?x48 ?x54) 0))))))
 (rewrite (= $x59 $x146))))))))))))))))))))
 ))
 (let ((@x61 (asserted $x60)))
 (let ((@x336 (mp (mp @x61 (quant-intro (proof-bind ?x151) (= $x60 $x195)) $x195) (rewrite (= $x195 $x195)) $x195)))
 (let ((@x265 (mp (mp @x336 (quant-intro (proof-bind ?x221) (= $x195 $x247)) $x247) (quant-intro (proof-bind ?x255) (= $x247 $x253)) $x253)))
 (let ((@x377 (mp (mp~ @x265 (sk (~ $x253 $x185)) $x185) (rewrite (= $x185 $x210)) $x210)))
 (let ((@x271 (and-elim @x377 $x129)))
 (let ((@x199 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x142 $x261)) @x271 $x261)))
 (let (($x214 (>= ?x128 0)))
 (let ((@x143 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x142 $x214)) @x271 $x214)))
 (let (($x135 (not (>= ?x305 0))))
 (let (($x77 (<= ?x305 0)))
 (let ((@x293 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x254 (not $x77) $x135)) (unit-resolution (and-elim @x377 $x299) @x271 $x307) (or (not $x77) $x135))))
 (let ((@x263 (unit-resolution @x293 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x77)) @x143 @x199 false) $x77) $x135)))
 ((_ th-lemma arith farkas 1 1 1) @x263 @x143 @x199 false)))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 20
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.48
 :memory                    3.08
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1052807
 :num-checks                1
 :propagations              4
 :rlimit-count              1655
 :time                      0.01
 :total-time                0.01)
