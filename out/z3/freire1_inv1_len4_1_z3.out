unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x87 (* (- 1) r!1)))
 (let ((?x207 (* 2 x!0)))
 (let ((?x118 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x107 (* (- 1) ?x36)))
 (let ((?x91 (* (- 2) x00)))
 (let ((?x293 (+ r00 ?x91 ?x107 ?x118 ?x207 ?x87)))
 (let (($x102 (<= ?x293 0)))
 (let (($x370 (= ?x293 0)))
 (let ((?x230 (* 6 r!1)))
 (let ((?x325 (* 5 (* r!1 r!1 r!1))))
 (let ((?x164 (* 6 (* x!0 x!0))))
 (let ((?x185 (* 6 (* r!1 r!1 r!1 r!1))))
 (let ((?x234 (* (- 8) ?x118)))
 (let ((?x88 (+ 7 ?x234 (* 6 (* x!0 x!0 r!1 r!1)) (* 12 (* x!0 x!0 r!1)) ?x185 ?x164 ?x325 (* (- 12) (* x!0 r!1 r!1 r!1)) (* 2 (* x!0 r!1)) (* (- 17) (* x!0 r!1 r!1)) x!0 ?x230)))
 (let ((?x231 (* ?x88 ?x293)))
 (let (($x165 (= ?x231 0)))
 (let (($x236 (not $x165)))
 (let (($x386 (not $x370)))
 (let (($x168 (or $x386 $x236)))
 (let (($x169 (and $x370 $x168)))
 (let ((?x84 (+ 7 ?x230 x!0 ?x234 (* (- 12) (* r!1 r!1 r!1 x!0)) ?x325 (* 2 (* r!1 x!0)) (* (- 17) (* r!1 r!1 x!0)) ?x185 ?x164 (* 12 (* r!1 x!0 x!0)) (* 6 (* r!1 r!1 x!0 x!0)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x122 (* (- 1) r00)))
 (let (($x126 (= (+ r!1 (* (- 2) x!0) ?x122 (* (- 1) ?x118) ?x35 ?x36) 0)))
 (let (($x214 (or (not $x126) (not (= (* ?x84 (+ ?x87 ?x207 r00 ?x118 ?x91 ?x107)) 0)))))
 (let (($x331 (and $x126 $x214)))
 (let (($x410 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x107 (* (- 1) ?x36)))
 (let ((?x91 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x70 (* (- 1) r)))
 (let ((?x113 (+ ?x70 ?x32 r00 ?x30 ?x91 ?x107)))
 (let ((?x366 (* 6 (* r r x x))))
 (let ((?x360 (* 6 (* x x))))
 (let ((?x315 (* 6 r)))
 (let ((?x383 (+ 7 ?x315 x (* (- 8) ?x30) (* (- 12) (* r r r x)) (* 5 (* r r r)) (* 2 (* r x)) (* (- 17) (* r r x)) (* 6 (* r r r r)) ?x360 (* 12 (* r x x)) ?x366)))
 (let ((?x35 (* 2 x00)))
 (let ((?x123 (* (- 1) ?x30)))
 (let ((?x122 (* (- 1) r00)))
 (let ((?x121 (* (- 2) x)))
 (let (($x125 (= (+ r ?x121 ?x122 ?x123 ?x35 ?x36) 0)))
 (let (($x221 (not $x125)))
 (and $x125 (or $x221 (not (= (* ?x383 ?x113) 0))))))))))))))))))))) :qid k!27))
 ))
 (let (($x148 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x107 (* (- 1) ?x36)))
 (let ((?x91 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x294 (+ 1 r)))
 (let ((?x150 (* ?x294 ?x294)))
 (let ((?x182 (* (- 3) r)))
 (let ((?x129 (* 6 (* ?x294 ?x294 (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x237 (+ 7 (* 13 r) (* 7 (* ?x294 ?x294 (+ x (* (- 1) r)))) (* (- 6) x) ?x129)))
 (let (($x275 (not (= (* ?x237 (+ (- 1) ?x182 r00 ?x150 ?x32 ?x91 ?x107)) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x121 (* (- 2) x)))
 (let ((?x122 (* (- 1) r00)))
 (let (($x151 (not (= (+ (* 3 r) ?x122 (* (- 1) ?x150) ?x121 ?x35 ?x36) (- 1)))))
 (and (= (+ r ?x122 (* (- 1) (* r r)) ?x121 ?x35 ?x36) 0) (or $x151 $x275)))))))))))))))) :qid k!27))
 ))
 (let ((?x412 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x107 (* (- 1) ?x36)))
 (let ((?x91 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x70 (* (- 1) r)))
 (let ((?x113 (+ ?x70 ?x32 r00 ?x30 ?x91 ?x107)))
 (let ((?x366 (* 6 (* r r x x))))
 (let ((?x360 (* 6 (* x x))))
 (let ((?x315 (* 6 r)))
 (let ((?x383 (+ 7 ?x315 x (* (- 8) ?x30) (* (- 12) (* r r r x)) (* 5 (* r r r)) (* 2 (* r x)) (* (- 17) (* r r x)) (* 6 (* r r r r)) ?x360 (* 12 (* r x x)) ?x366)))
 (let ((?x35 (* 2 x00)))
 (let ((?x123 (* (- 1) ?x30)))
 (let ((?x122 (* (- 1) r00)))
 (let ((?x121 (* (- 2) x)))
 (let (($x125 (= (+ r ?x121 ?x122 ?x123 ?x35 ?x36) 0)))
 (let (($x221 (not $x125)))
 (let (($x170 (and $x125 (or $x221 (not (= (* ?x383 ?x113) 0))))))
 (let ((?x294 (+ 1 r)))
 (let ((?x150 (* ?x294 ?x294)))
 (let ((?x182 (* (- 3) r)))
 (let ((?x237 (+ 7 (* 13 r) (* 7 (* ?x294 ?x294 (+ x ?x70))) (* (- 6) x) (* 6 (* ?x294 ?x294 (+ x ?x70) (+ x ?x70))))))
 (let (($x275 (not (= (* ?x237 (+ (- 1) ?x182 r00 ?x150 ?x32 ?x91 ?x107)) 0))))
 (let (($x151 (not (= (+ (* 3 r) ?x122 (* (- 1) ?x150) ?x121 ?x35 ?x36) (- 1)))))
 (let (($x232 (and (= (+ r ?x122 ?x123 ?x121 ?x35 ?x36) 0) (or $x151 $x275))))
 (rewrite (= $x232 $x170))))))))))))))))))))))))))))
 ))
 (let (($x211 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x107 (* (- 1) ?x36)))
 (let ((?x91 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x294 (+ 1 r)))
 (let ((?x150 (* ?x294 ?x294)))
 (let ((?x182 (* (- 3) r)))
 (let ((?x129 (* 6 (* ?x294 ?x294 (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x237 (+ 7 (* 13 r) (* 7 (* ?x294 ?x294 (+ x (* (- 1) r)))) (* (- 6) x) ?x129)))
 (let (($x275 (not (= (* ?x237 (+ (- 1) ?x182 r00 ?x150 ?x32 ?x91 ?x107)) 0))))
 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x91 ?x107) 0) (or (not (= (+ ?x182 r00 ?x150 ?x32 ?x91 ?x107) 1)) $x275)))))))))))) :qid k!27))
 ))
 (let ((?x215 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x107 (* (- 1) ?x36)))
 (let ((?x91 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x294 (+ 1 r)))
 (let ((?x150 (* ?x294 ?x294)))
 (let ((?x182 (* (- 3) r)))
 (let ((?x129 (* 6 (* ?x294 ?x294 (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x237 (+ 7 (* 13 r) (* 7 (* ?x294 ?x294 (+ x (* (- 1) r)))) (* (- 6) x) ?x129)))
 (let (($x275 (not (= (* ?x237 (+ (- 1) ?x182 r00 ?x150 ?x32 ?x91 ?x107)) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x121 (* (- 2) x)))
 (let ((?x122 (* (- 1) r00)))
 (let (($x151 (not (= (+ (* 3 r) ?x122 (* (- 1) ?x150) ?x121 ?x35 ?x36) (- 1)))))
 (let (($x232 (and (= (+ r ?x122 (* (- 1) (* r r)) ?x121 ?x35 ?x36) 0) (or $x151 $x275))))
 (let (($x277 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x91 ?x107) 0) (or (not (= (+ ?x182 r00 ?x150 ?x32 ?x91 ?x107) 1)) $x275))))
 (rewrite (= $x277 $x232)))))))))))))))))))
 ))
 (let (($x65 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let ((?x48 (- (- ?x46 ?x35) ?x36)))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x59 (+ (- (+ (* 7 ?x41) (* 7 ?x41 ?x41 ?x44)) (* 6 ?x44)) (* 6 ?x41 ?x41 ?x44 ?x44))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x48 0)) (not (= (* ?x59 ?x48) 0)))))))))))) :qid k!27))
 ))
 (let ((?x213 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x107 (* (- 1) ?x36)))
 (let ((?x91 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x294 (+ 1 r)))
 (let ((?x150 (* ?x294 ?x294)))
 (let ((?x182 (* (- 3) r)))
 (let ((?x129 (* 6 (* ?x294 ?x294 (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x237 (+ 7 (* 13 r) (* 7 (* ?x294 ?x294 (+ x (* (- 1) r)))) (* (- 6) x) ?x129)))
 (let (($x275 (not (= (* ?x237 (+ (- 1) ?x182 r00 ?x150 ?x32 ?x91 ?x107)) 0))))
 (let (($x277 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x91 ?x107) 0) (or (not (= (+ ?x182 r00 ?x150 ?x32 ?x91 ?x107) 1)) $x275))))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let ((?x48 (- (- ?x46 ?x35) ?x36)))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x59 (+ (- (+ (* 7 ?x41) (* 7 ?x41 ?x41 ?x44)) (* 6 ?x44)) (* 6 ?x41 ?x41 ?x44 ?x44))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x64 (and $x40 (or (not (= ?x48 0)) (not (= (* ?x59 ?x48) 0))))))
 (rewrite (= $x64 $x277))))))))))))))))))))))
 ))
 (let ((@x66 (asserted $x65)))
 (let ((@x172 (mp (mp @x66 (quant-intro (proof-bind ?x213) (= $x65 $x211)) $x211) (rewrite (= $x211 $x211)) $x211)))
 (let ((@x394 (mp (mp @x172 (quant-intro (proof-bind ?x215) (= $x211 $x148)) $x148) (quant-intro (proof-bind ?x412) (= $x148 $x410)) $x410)))
 (let ((@x130 (mp (mp~ @x394 (sk (~ $x410 $x331)) $x331) (rewrite (= $x331 $x169)) $x169)))
 (let ((@x135 (and-elim @x130 $x370)))
 (let ((@x209 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x386 $x102)) @x135 $x102)))
 (let (($x75 (>= ?x293 0)))
 (let ((@x387 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x386 $x75)) @x135 $x75)))
 (let (($x291 (not (>= ?x231 0))))
 (let (($x289 (<= ?x231 0)))
 (let ((@x80 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x165 (not $x289) $x291)) (unit-resolution (and-elim @x130 $x168) @x135 $x236) (or (not $x289) $x291))))
 (let ((@x82 (unit-resolution @x80 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x289)) @x387 @x209 false) $x289) $x291)))
 ((_ th-lemma arith farkas 1 1 1) @x82 @x387 @x209 false)))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 27
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.58
 :memory                    3.09
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1105882
 :num-checks                1
 :propagations              4
 :rlimit-count              1707
 :time                      0.01
 :total-time                0.02)
