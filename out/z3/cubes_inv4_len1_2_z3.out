unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(proof
(let (($x282 (<= k!2 1)))
 (let (($x1142 (= 0 (- 2))))
 (let ((?x447 (* n!0 k!2)))
 (let ((?x574 (* (- 3) c!3)))
 (let ((?x551 (* 2 n!0)))
 (let ((?x261 (+ ?x551 ?x574 (* (- 3) k!2) ?x447 (* n!0 m!1))))
 (let (($x159 (= ?x261 (- 2))))
 (let (($x194 (<= ?x261 (- 2))))
 (let ((@x785 (hypothesis (not $x282))))
 (let (($x315 (<= m!1 0)))
 (let (($x201 (not $x315)))
 (let ((?x473 (* (- 1) m!1)))
 (let ((?x126 (+ (* 6 n!0) ?x473)))
 (let (($x145 (<= ?x126 (- 6))))
 (let (($x127 (= ?x126 (- 6))))
 (let ((?x713 (* m!1 m!1 m!1)))
 (let ((?x205 (* k!2 k!2 k!2)))
 (let ((?x684 (+ (* 3 (* m!1 m!1 k!2)) (* (- 15) (* n!0 k!2 k!2)) (* (- 3) (* n!0 n!0 n!0 k!2 k!2)) (* (- 6) (* n!0 n!0 n!0 m!1 k!2)) ?x205 (* (- 3) (* n!0 n!0 n!0 m!1 m!1)) (* (- 30) (* n!0 m!1 k!2)) (* 3 (* n!0 m!1 m!1 k!2)) (* 3 (* n!0 m!1 k!2 k!2)) (* n!0 k!2 k!2 k!2) (* (- 15) (* n!0 m!1 m!1)) (* (- 12) (* m!1 k!2)) (* 3 (* m!1 k!2 k!2)) (* n!0 m!1 m!1 m!1) (* (- 24) (* n!0 n!0 m!1 k!2)) (* (- 12) (* n!0 n!0 k!2 k!2)) (* (- 6) (* k!2 k!2)) (* (- 12) (* n!0 n!0 m!1 m!1)) (* (- 6) (* m!1 m!1)) ?x713)))
 (let (($x299 (not $x127)))
 (let ((?x448 (* n!0 n!0)))
 (let ((?x281 (* 3 ?x448)))
 (let ((?x625 (* (- 1) k!2)))
 (let ((?x341 (* 9 n!0)))
 (let ((?x245 (+ ?x341 ?x473 ?x625 ?x281)))
 (let ((?x649 (* m!1 m!1)))
 (let ((?x350 (* n!0 c!3)))
 (let ((?x477 (* (- 9) ?x350)))
 (let ((?x322 (* k!2 k!2)))
 (let ((?x157 (+ ?x341 (* 2 (* m!1 k!2)) ?x322 (* (- 27) c!3) ?x477 (* (- 5) m!1) (* (- 32) k!2) (* (- 9) ?x447) ?x649)))
 (let (($x232 (or (not (= ?x157 (- 13))) (not $x159) (not (= ?x245 (- 6))) $x299 (not (= ?x684 0)))))
 (let ((?x629 (+ (* 3 n!0) ?x625 ?x281)))
 (let (($x284 (= ?x629 0)))
 (let ((?x565 (+ ?x551 ?x574 ?x625 ?x447)))
 (let (($x669 (= ?x565 0)))
 (let ((?x343 (+ ?x341 ?x322 (* (- 18) c!3) ?x477 (* (- 5) k!2))))
 (let (($x123 (= ?x343 (- 4))))
 (let (($x248 (and $x127 $x123 $x669 $x284 $x232)))
 (let ((?x770 (* k!2 n!0)))
 (let ((?x773 (* (- 1) ?x770)))
 (let ((?x769 (* (- 2) n!0)))
 (let ((?x529 (* 3 c!3)))
 (let (($x423 (= (+ ?x529 (* 3 k!2) ?x769 ?x773 (* (- 1) (* m!1 n!0))) 2)))
 (let ((?x508 (* 9 (* c!3 n!0))))
 (let ((?x321 (* (- 1) ?x322)))
 (let ((?x544 (* (- 9) n!0)))
 (let ((?x520 (+ (* 27 c!3) (* 32 k!2) (* 5 m!1) ?x544 ?x321 (* 9 ?x770) ?x508 (* (- 2) (* k!2 m!1)) (* (- 1) ?x649))))
 (let ((?x313 (+ (* 6 ?x322) (* (- 3) (* k!2 k!2 m!1)) (* (- 1) ?x205) (* (- 1) (* m!1 m!1 m!1 n!0)) (* 12 (* k!2 k!2 n!0 n!0)) (* 24 (* k!2 m!1 n!0 n!0)) (* 30 (* k!2 m!1 n!0)) (* (- 1) ?x713) (* (- 3) (* k!2 m!1 m!1 n!0)) (* (- 1) (* k!2 k!2 k!2 n!0)) (* (- 3) (* k!2 k!2 m!1 n!0)) (* 15 (* m!1 m!1 n!0)) (* 12 (* k!2 m!1)) (* 6 ?x649) (* 15 (* k!2 k!2 n!0)) (* (- 3) (* k!2 m!1 m!1)) (* 12 (* m!1 m!1 n!0 n!0)) (* 3 (* k!2 k!2 n!0 n!0 n!0)) (* 6 (* k!2 m!1 n!0 n!0 n!0)) (* 3 (* m!1 m!1 n!0 n!0 n!0)))))
 (let (($x462 (or (not (= ?x313 0)) (not (= (+ m!1 (* (- 6) n!0)) 6)) (not (= ?x520 13)) (not $x423) (not (= (+ k!2 m!1 ?x544 (* (- 3) ?x448)) 6)))))
 (let (($x434 (= (+ m!1 (* (- 6) n!0)) 6)))
 (let (($x552 (and $x434 (= (+ (* 18 c!3) (* 5 k!2) ?x544 ?x321 ?x508) 4) (= (+ ?x529 k!2 ?x769 ?x773) 0) (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x448)) 0) $x462)))
 (let (($x532 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let (($x655 (not (= (+ k m (* (- 9) n) (* (- 3) (* n n))) 6))))
 (let ((?x52 (* k n)))
 (let ((?x258 (* (- 1) ?x52)))
 (let ((?x257 (* (- 2) n)))
 (let ((?x255 (* 3 c)))
 (let (($x540 (= (+ ?x255 (* 3 k) ?x257 ?x258 (* (- 1) (* m n))) 2)))
 (let (($x548 (not $x540)))
 (let ((?x155 (* 9 (* c n))))
 (let ((?x46 (* k k)))
 (let ((?x218 (* (- 1) ?x46)))
 (let ((?x217 (* (- 9) n)))
 (let ((?x430 (* 5 m)))
 (let ((?x518 (+ (* 27 c) (* 32 k) ?x430 ?x217 ?x218 (* 9 ?x52) ?x155 (* (- 2) (* k m)) (* (- 1) (* m m)))))
 (let (($x522 (not (= ?x518 13))))
 (let (($x138 (= (+ m (* (- 6) n)) 6)))
 (let (($x356 (not $x138)))
 (let ((?x764 (+ (* 6 ?x46) (* (- 3) (* k k m)) (* (- 1) (* k k k)) (* (- 1) (* m m m n)) (* 12 (* k k n n)) (* 24 (* k m n n)) (* 30 (* k m n)) (* (- 1) (* m m m)) (* (- 3) (* k m m n)) (* (- 1) (* k k k n)) (* (- 3) (* k k m n)) (* 15 (* m m n)) (* 12 (* k m)) (* 6 (* m m)) (* 15 (* k k n)) (* (- 3) (* k m m)) (* 12 (* m m n n)) (* 3 (* k k n n n)) (* 6 (* k m n n n)) (* 3 (* m m n n n)))))
 (let (($x296 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 0)))
 (let (($x260 (= (+ ?x255 k ?x257 ?x258) 0)))
 (let (($x215 (= (+ (* 18 c) (* 5 k) ?x217 ?x218 ?x155) 4)))
 (and $x138 $x215 $x260 $x296 (or (not (= ?x764 0)) $x356 $x522 $x548 $x655)))))))))))))))))))))) :qid k!39))
 ))
 (let (($x570 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x257 (* (- 2) n)))
 (let ((?x255 (* 3 c)))
 (let ((?x337 (+ ?x255 (* 4 k) (* (- 1) (* (+ 1 n) (+ k m))) m ?x257)))
 (let (($x138 (= (+ m (* (- 6) n)) 6)))
 (let (($x356 (not $x138)))
 (let ((?x61 (* 3 n)))
 (let ((?x471 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x505 (* 3 (* (+ 1 n) (+ 1 n)))))
 (let ((?x74 (+ k m)))
 (let ((?x435 (+ 1 n)))
 (let (($x279 (not (= (* ?x435 ?x74 ?x74 (+ 3 ?x505 ?x233 ?x471 ?x61)) 0))))
 (let (($x240 (not (= (+ ?x505 ?x233 ?x471 ?x61) (- 3)))))
 (let ((?x217 (* (- 9) n)))
 (let ((?x430 (* 5 m)))
 (let ((?x37 (* 18 c)))
 (let ((?x558 (+ ?x37 (* 23 k) (* 9 (* ?x435 (+ c k))) ?x430 ?x217 (* (- 1) (* ?x74 ?x74)))))
 (let (($x511 (= (+ (* 3 (* n n)) ?x233 ?x61) 0)))
 (let ((?x46 (* k k)))
 (let ((?x218 (* (- 1) ?x46)))
 (let ((?x41 (* 5 k)))
 (and $x138 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x217 ?x218) 4) (= (+ ?x255 (* (- 1) (* n k)) k ?x257) 0) $x511 (or (not (= ?x558 13)) $x240 $x279 $x356 (not (= ?x337 2))))))))))))))))))))))))) :qid k!39))
 ))
 (let ((?x556 (lambda ((c Int) (k Int) (m Int) (n Int) )(let (($x655 (not (= (+ k m (* (- 9) n) (* (- 3) (* n n))) 6))))
 (let ((?x52 (* k n)))
 (let ((?x258 (* (- 1) ?x52)))
 (let ((?x257 (* (- 2) n)))
 (let ((?x255 (* 3 c)))
 (let (($x540 (= (+ ?x255 (* 3 k) ?x257 ?x258 (* (- 1) (* m n))) 2)))
 (let (($x548 (not $x540)))
 (let ((?x155 (* 9 (* c n))))
 (let ((?x46 (* k k)))
 (let ((?x218 (* (- 1) ?x46)))
 (let ((?x217 (* (- 9) n)))
 (let ((?x430 (* 5 m)))
 (let ((?x518 (+ (* 27 c) (* 32 k) ?x430 ?x217 ?x218 (* 9 ?x52) ?x155 (* (- 2) (* k m)) (* (- 1) (* m m)))))
 (let (($x522 (not (= ?x518 13))))
 (let (($x138 (= (+ m (* (- 6) n)) 6)))
 (let (($x356 (not $x138)))
 (let ((?x764 (+ (* 6 ?x46) (* (- 3) (* k k m)) (* (- 1) (* k k k)) (* (- 1) (* m m m n)) (* 12 (* k k n n)) (* 24 (* k m n n)) (* 30 (* k m n)) (* (- 1) (* m m m)) (* (- 3) (* k m m n)) (* (- 1) (* k k k n)) (* (- 3) (* k k m n)) (* 15 (* m m n)) (* 12 (* k m)) (* 6 (* m m)) (* 15 (* k k n)) (* (- 3) (* k m m)) (* 12 (* m m n n)) (* 3 (* k k n n n)) (* 6 (* k m n n n)) (* 3 (* m m n n n)))))
 (let (($x296 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 0)))
 (let (($x260 (= (+ ?x255 k ?x257 ?x258) 0)))
 (let (($x215 (= (+ (* 18 c) (* 5 k) ?x217 ?x218 ?x155) 4)))
 (let (($x786 (and $x138 $x215 $x260 $x296 (or (not (= ?x764 0)) $x356 $x522 $x548 $x655))))
 (let ((?x337 (+ ?x255 (* 4 k) (* (- 1) (* (+ 1 n) (+ k m))) m ?x257)))
 (let ((?x61 (* 3 n)))
 (let ((?x471 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x505 (* 3 (* (+ 1 n) (+ 1 n)))))
 (let ((?x74 (+ k m)))
 (let ((?x435 (+ 1 n)))
 (let (($x279 (not (= (* ?x435 ?x74 ?x74 (+ 3 ?x505 ?x233 ?x471 ?x61)) 0))))
 (let (($x240 (not (= (+ ?x505 ?x233 ?x471 ?x61) (- 3)))))
 (let ((?x37 (* 18 c)))
 (let ((?x558 (+ ?x37 (* 23 k) (* 9 (* ?x435 (+ c k))) ?x430 ?x217 (* (- 1) (* ?x74 ?x74)))))
 (let (($x511 (= (+ (* 3 (* n n)) ?x233 ?x61) 0)))
 (let (($x168 (= (+ ?x37 (* 9 (* n c)) (* 5 k) ?x217 ?x218) 4)))
 (let (($x401 (and $x138 $x168 (= (+ ?x255 (* (- 1) (* n k)) k ?x257) 0) $x511 (or (not (= ?x558 13)) $x240 $x279 $x356 (not (= ?x337 2))))))
 (rewrite (= $x401 $x786))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x388 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x56 (* 2 n)))
 (let ((?x471 (* (- 1) m)))
 (let ((?x74 (+ k m)))
 (let ((?x435 (+ 1 n)))
 (let ((?x306 (* ?x435 ?x74)))
 (let ((?x316 (* (- 3) c)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x454 (* (- 18) c)))
 (let ((?x397 (+ ?x454 (* (- 23) k) (* (- 9) (* ?x435 (+ c k))) (* (- 5) m) ?x45 ?x80)))
 (let (($x138 (= (+ m (* (- 6) n)) 6)))
 (let (($x356 (not $x138)))
 (let ((?x61 (* 3 n)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x505 (* 3 (* ?x435 ?x435))))
 (let (($x279 (not (= (* ?x435 ?x74 ?x74 (+ 3 ?x505 ?x233 ?x471 ?x61)) 0))))
 (let (($x240 (not (= (+ ?x505 ?x233 ?x471 ?x61) (- 3)))))
 (let (($x228 (or $x240 $x279 $x356 (not (= ?x397 (- 13))) (not (= (+ ?x316 (* (- 4) k) ?x306 ?x471 ?x56) (- 2))))))
 (let (($x511 (= (+ (* 3 (* n n)) ?x233 ?x61) 0)))
 (let (($x308 (= (+ ?x454 (* (- 9) (* n c)) (* (- 5) k) ?x45 (* k k)) (- 4))))
 (and $x138 $x308 (= (+ ?x316 (* n k) ?x233 ?x56) 0) $x511 $x228))))))))))))))))))))) :qid k!39))
 ))
 (let ((?x338 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x257 (* (- 2) n)))
 (let ((?x255 (* 3 c)))
 (let ((?x337 (+ ?x255 (* 4 k) (* (- 1) (* (+ 1 n) (+ k m))) m ?x257)))
 (let (($x138 (= (+ m (* (- 6) n)) 6)))
 (let (($x356 (not $x138)))
 (let ((?x61 (* 3 n)))
 (let ((?x471 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x505 (* 3 (* (+ 1 n) (+ 1 n)))))
 (let ((?x74 (+ k m)))
 (let ((?x435 (+ 1 n)))
 (let (($x279 (not (= (* ?x435 ?x74 ?x74 (+ 3 ?x505 ?x233 ?x471 ?x61)) 0))))
 (let (($x240 (not (= (+ ?x505 ?x233 ?x471 ?x61) (- 3)))))
 (let ((?x217 (* (- 9) n)))
 (let ((?x430 (* 5 m)))
 (let ((?x37 (* 18 c)))
 (let ((?x558 (+ ?x37 (* 23 k) (* 9 (* ?x435 (+ c k))) ?x430 ?x217 (* (- 1) (* ?x74 ?x74)))))
 (let (($x511 (= (+ (* 3 (* n n)) ?x233 ?x61) 0)))
 (let ((?x46 (* k k)))
 (let ((?x218 (* (- 1) ?x46)))
 (let ((?x41 (* 5 k)))
 (let (($x401 (and $x138 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x217 ?x218) 4) (= (+ ?x255 (* (- 1) (* n k)) k ?x257) 0) $x511 (or (not (= ?x558 13)) $x240 $x279 $x356 (not (= ?x337 2))))))
 (let ((?x56 (* 2 n)))
 (let ((?x306 (* ?x435 ?x74)))
 (let ((?x316 (* (- 3) c)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x454 (* (- 18) c)))
 (let ((?x397 (+ ?x454 (* (- 23) k) (* (- 9) (* ?x435 (+ c k))) (* (- 5) m) ?x45 ?x80)))
 (let (($x228 (or $x240 $x279 $x356 (not (= ?x397 (- 13))) (not (= (+ ?x316 (* (- 4) k) ?x306 ?x471 ?x56) (- 2))))))
 (let (($x308 (= (+ ?x454 (* (- 9) (* n c)) (* (- 5) k) ?x45 ?x46) (- 4))))
 (let (($x173 (and $x138 $x308 (= (+ ?x316 (* n k) ?x233 ?x56) 0) $x511 $x228)))
 (rewrite (= $x173 $x401)))))))))))))))))))))))))))))))))))
 ))
 (let (($x103 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x95 (+ (- (* 3 (+ n 1) (+ n 1)) (+ k m)) (* 3 (+ n 1)))))
 (let ((?x66 (+ n 1)))
 (let ((?x74 (+ k m)))
 (let ((?x89 (+ (- (+ (* (- 3) (+ c k)) (* ?x74 ?x66)) ?x74) (* 2 ?x66))))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x78 (- (- (- 4 (* 18 (+ c k))) (* 9 (+ c k) ?x66)) (* 5 ?x74))))
 (let (($x101 (or (not (= (- (+ (- 6) m 6) (* 6 ?x66)) 0)) (not (= (+ ?x78 (* 9 ?x66) ?x80) 0)) (not (= ?x89 0)) (not (= ?x95 0)) (not (= (* 4 ?x74 ?x74 ?x66 ?x95) 0)))))
 (let (($x58 (= (+ (- (+ (* (- 3) c) (* k n)) k) (* 2 n)) 0)))
 (let ((?x46 (* k k)))
 (let ((?x45 (* 9 n)))
 (let ((?x41 (* 5 k)))
 (let ((?x47 (+ (- (- (- 4 (* 18 c)) (* 9 c n)) ?x41) ?x45 ?x46)))
 (and (= (- (+ (- 6) m) (* 6 n)) 0) (= ?x47 0) $x58 (= (+ (- (* 3 n n) k) (* 3 n)) 0) $x101))))))))))))) :qid k!39))
 ))
 (let ((?x391 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x56 (* 2 n)))
 (let ((?x471 (* (- 1) m)))
 (let ((?x74 (+ k m)))
 (let ((?x435 (+ 1 n)))
 (let ((?x306 (* ?x435 ?x74)))
 (let ((?x316 (* (- 3) c)))
 (let ((?x80 (* ?x74 ?x74)))
 (let ((?x45 (* 9 n)))
 (let ((?x454 (* (- 18) c)))
 (let ((?x397 (+ ?x454 (* (- 23) k) (* (- 9) (* ?x435 (+ c k))) (* (- 5) m) ?x45 ?x80)))
 (let (($x138 (= (+ m (* (- 6) n)) 6)))
 (let (($x356 (not $x138)))
 (let ((?x61 (* 3 n)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x505 (* 3 (* ?x435 ?x435))))
 (let (($x279 (not (= (* ?x435 ?x74 ?x74 (+ 3 ?x505 ?x233 ?x471 ?x61)) 0))))
 (let (($x240 (not (= (+ ?x505 ?x233 ?x471 ?x61) (- 3)))))
 (let (($x228 (or $x240 $x279 $x356 (not (= ?x397 (- 13))) (not (= (+ ?x316 (* (- 4) k) ?x306 ?x471 ?x56) (- 2))))))
 (let (($x511 (= (+ (* 3 (* n n)) ?x233 ?x61) 0)))
 (let (($x308 (= (+ ?x454 (* (- 9) (* n c)) (* (- 5) k) ?x45 (* k k)) (- 4))))
 (let (($x173 (and $x138 $x308 (= (+ ?x316 (* n k) ?x233 ?x56) 0) $x511 $x228)))
 (let ((?x95 (+ (- (* 3 (+ n 1) (+ n 1)) ?x74) (* 3 (+ n 1)))))
 (let ((?x66 (+ n 1)))
 (let ((?x89 (+ (- (+ (* (- 3) (+ c k)) (* ?x74 ?x66)) ?x74) (* 2 ?x66))))
 (let ((?x78 (- (- (- 4 (* 18 (+ c k))) (* 9 (+ c k) ?x66)) (* 5 ?x74))))
 (let (($x101 (or (not (= (- (+ (- 6) m 6) (* 6 ?x66)) 0)) (not (= (+ ?x78 (* 9 ?x66) ?x80) 0)) (not (= ?x89 0)) (not (= ?x95 0)) (not (= (* 4 ?x74 ?x74 ?x66 ?x95) 0)))))
 (let ((?x46 (* k k)))
 (let ((?x41 (* 5 k)))
 (let ((?x47 (+ (- (- (- 4 (* 18 c)) (* 9 c n)) ?x41) ?x45 ?x46)))
 (let (($x102 (and (= (- (+ (- 6) m) (* 6 n)) 0) (= ?x47 0) (= (+ (- (+ (* (- 3) c) (* k n)) k) ?x56) 0) (= (+ (- (* 3 n n) k) ?x61) 0) $x101)))
 (rewrite (= $x102 $x173)))))))))))))))))))))))))))))))))
 ))
 (let ((@x104 (asserted $x103)))
 (let ((@x469 (mp (mp @x104 (quant-intro (proof-bind ?x391) (= $x103 $x388)) $x388) (rewrite (= $x388 $x388)) $x388)))
 (let ((@x709 (mp (mp @x469 (quant-intro (proof-bind ?x338) (= $x388 $x570)) $x570) (quant-intro (proof-bind ?x556) (= $x570 $x532)) $x532)))
 (let ((@x693 (mp (mp~ @x709 (sk (~ $x532 $x552)) $x552) (rewrite (= $x552 $x248)) $x248)))
 (let ((@x695 (and-elim @x693 $x127)))
 (let ((@x304 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x299 $x145)) @x695 $x145)))
 (let (($x778 (<= n!0 (- 1))))
 (let (($x862 (not $x778)))
 (let (($x1145 (>= n!0 1)))
 (let (($x717 (<= k!2 0)))
 (let ((@x718 (hypothesis $x717)))
 (let (($x545 (>= k!2 0)))
 (let (($x195 (<= ?x245 (- 6))))
 (let (($x453 (<= ?x629 0)))
 (let ((@x186 (and-elim @x693 $x284)))
 (let ((@x152 (unit-resolution ((_ th-lemma arith assign-bounds 1 1) (or $x195 (not $x453) (not $x145))) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x284) $x453)) @x186 $x453) @x304 $x195)))
 (let ((@x360 (hypothesis (not $x545))))
 (let (($x150 (>= ?x126 (- 6))))
 (let ((@x229 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x299 $x150)) @x695 $x150)))
 (let ((@x607 (lemma ((_ th-lemma arith) @x360 @x152 @x229 @x229 @x360 @x152 @x229 @x360 @x152 false) $x545)))
 (let (($x331 (<= ?x343 (- 4))))
 (let ((@x291 (and-elim @x693 $x123)))
 (let ((@x112 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x123) $x331)) @x291 $x331)))
 (let (($x332 (>= ?x343 (- 4))))
 (let ((@x694 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x123) $x332)) @x291 $x332)))
 (let (($x351 (<= ?x565 0)))
 (let ((@x230 (and-elim @x693 $x669)))
 (let ((@x704 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x669) $x351)) @x230 $x351)))
 (let (($x451 (>= ?x565 0)))
 (let ((@x148 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x669) $x451)) @x230 $x451)))
 (let ((@x192 ((_ th-lemma arith gcd-test 2/3 2/3 2/3 2/3 -2/3 -2/3 -1/9 -1/9 1/9 1/9 -1/9 -1/9) @x607 @x718 @x607 @x718 @x148 @x704 @x607 @x718 @x694 @x112 @x607 @x718 false)))
 (let ((@x728 (lemma @x192 (not $x717))))
 (let (($x1149 (not $x1145)))
 (let ((@x1208 (hypothesis $x1149)))
 (let (($x1137 (>= (+ ?x551 ?x322 (* (- 6) c!3) (* (- 2) ?x350) ?x625) 3)))
 (let (($x1119 (not $x1137)))
 (let (($x463 (>= ?x245 (- 6))))
 (let (($x420 (>= ?x629 0)))
 (let ((@x533 ((_ th-lemma arith farkas -1 1 1) (hypothesis (not $x463)) @x229 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x284) $x420)) @x186 $x420) false)))
 (let ((@x242 (lemma @x533 $x463)))
 (let ((@x1221 ((_ th-lemma arith) @x785 @x112 @x1208 @x728 @x148 (hypothesis $x1137) @x1208 @x728 @x148 @x785 @x148 @x704 @x229 @x304 @x242 @x152 @x148 @x704 @x694 @x112 @x694 @x112 @x148 @x704 @x148 @x704 @x694 @x112 @x242 @x152 @x229 @x304 @x148 @x704 @x694 @x112 false)))
 (let ((@x1167 ((_ th-lemma arith farkas 1 2 1 -1/6 -1/3 -7/6 3/2 1 1) @x148 @x1208 @x728 @x785 @x694 @x728 (unit-resolution (lemma @x1221 (or $x1119 $x282 $x1145)) @x1208 @x785 $x1119) @x1208 @x728 false)))
 (let ((@x1154 (unit-resolution (lemma @x1167 (or $x1145 $x282)) @x785 $x1145)))
 (let ((@x1069 (unit-resolution ((_ th-lemma arith assign-bounds 1 6) (or $x201 (not $x145) $x778)) (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x1149 $x862)) @x1154 $x862) @x304 $x201)))
 (let (($x591 (<= n!0 1)))
 (let (($x161 (>= (+ ?x341 (* (- 2) c!3) ?x473 ?x625 ?x447 ?x448) 1)))
 (let ((@x809 (hypothesis $x161)))
 (let ((@x794 ((_ th-lemma arith) @x809 @x809 @x229 @x304 @x242 @x152 @x229 @x304 @x148 @x704 @x148 @x704 @x229 @x304 @x242 @x152 @x148 @x704 @x229 @x304 @x694 @x112 @x242 @x152 @x148 @x704 @x229 @x304 false)))
 (let (($x881 (not $x591)))
 (let ((@x1020 (hypothesis $x881)))
 (let (($x143 (not (<= n!0 (- 2)))))
 (let ((@x801 (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x778 $x143)) (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x591 $x862)) @x1020 $x862) $x143)))
 (let ((@x796 ((_ th-lemma arith farkas 1 1 3 3 1 1 1 1 1 1) @x229 @x152 @x801 @x1020 @x1020 @x242 @x148 @x229 @x1020 (lemma @x794 (not $x161)) false)))
 (let ((@x833 (lemma @x796 $x591)))
 (let ((@x913 (hypothesis $x591)))
 (let ((@x710 (hypothesis $x201)))
 (let (($x723 (not $x194)))
 (let ((@x117 (hypothesis $x723)))
 (let ((@x905 ((_ th-lemma arith gcd-test -2/3 -2/3 -2/3 -2/3 -2/3 -1/3 -1/3 -1/3 -1/3 -1/3 -1/3 -1/3 -1/3 -1/3 -1/3 1/3 1/3) @x117 @x704 @x785 @x710 @x913 @x117 @x704 @x785 @x710 @x913 @x117 @x704 @x785 @x710 @x913 @x148 @x704 false)))
 (let ((@x1126 (unit-resolution (lemma @x905 (or $x881 $x194 $x282 $x315)) @x833 (or $x194 $x282 $x315))))
 (let (($x601 (>= ?x261 (- 2))))
 (let (($x235 (not $x463)))
 (let (($x208 (not $x145)))
 (let ((@x1198 ((_ th-lemma arith assign-bounds 1 1 1 3 2 6 6 6 6) (or $x601 $x1149 $x881 (not $x451) $x208 $x235 $x1149 $x881 $x1149 $x881))))
 (let ((@x1218 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x159 $x723 (not $x601))) (unit-resolution @x1198 @x1154 @x304 @x242 @x833 @x148 $x601) (unit-resolution @x1126 @x1069 @x785 $x194) $x159)))
 (let ((@x1212 ((_ th-lemma arith eq-propagate -1 -1 -1 -1 -1 -1 3 3 -2 -2 6 6 6 6 6 6 6 6) @x1154 @x833 @x1154 @x833 @x148 @x704 @x229 @x304 @x242 @x152 @x1154 @x833 @x1154 @x833 @x1154 @x833 @x1154 @x833 (= ?x261 0))))
 (let ((@x1214 (mp (trans* (symm @x1212 (= 0 ?x261)) @x1218 $x1142) (rewrite (= $x1142 false)) false)))
 ((_ th-lemma arith gcd-test -1/3 -1/3 -2/3 -2/3 -2/3 -2/3) @x229 @x304 @x242 @x152 @x728 (lemma @x1214 $x282) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 60
 :arith-assert-diseq        22
 :arith-assert-lower        414
 :arith-assert-upper        235
 :arith-bound-prop          15
 :arith-branch-var          19
 :arith-conflicts           22
 :arith-eq-adapter          10
 :arith-fixed-eqs           70
 :arith-gcd-tests           135
 :arith-gomory-cuts         8
 :arith-grobner             24
 :arith-ineq-splits         19
 :arith-max-min             2476
 :arith-nonlinear-bounds    219
 :arith-nonlinear-horner    198
 :arith-num-rows            17
 :arith-offset-eqs          12
 :arith-patches             43
 :arith-patches_succ        6
 :arith-pivots              400
 :arith-pseudo-nonlinear    59
 :arith-row-summations      1638
 :arith-tableau-max-columns 67
 :arith-tableau-max-rows    17
 :conflicts                 30
 :decisions                 170
 :del-clause                67
 :final-checks              96
 :max-memory                3.90
 :memory                    3.22
 :minimized-lits            3
 :mk-bool-var               162
 :mk-clause                 82
 :num-allocs                2408756
 :num-checks                1
 :propagations              108
 :rlimit-count              111313
 :time                      0.05
 :total-time                0.06)
