unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x334 (* r!1 r!1)))
 (let ((?x170 (* (- 1) r!1)))
 (let ((?x200 (* 2 x!0)))
 (let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x153 (+ r00 ?x87 ?x103 ?x200 ?x170 ?x334)))
 (let (($x306 (<= ?x153 0)))
 (let (($x156 (= ?x153 0)))
 (let ((?x185 (* 7 ?x334)))
 (let ((?x165 (* (- 1) x!0)))
 (let ((?x195 (* 6 (* r!1 r!1 r!1))))
 (let ((?x95 (+ ?x195 ?x165 r!1 ?x185 (* (- 7) (* x!0 r!1)) (* (- 6) (* x!0 r!1 r!1)))))
 (let ((?x271 (* ?x95 ?x153)))
 (let (($x106 (= ?x271 0)))
 (let (($x264 (not $x106)))
 (let (($x336 (not $x156)))
 (let (($x252 (or $x336 $x264)))
 (let (($x308 (and $x156 $x252)))
 (let ((?x198 (+ r!1 ?x165 ?x185 (* (- 7) (* r!1 x!0)) (* (- 6) (* r!1 r!1 x!0)) ?x195)))
 (let ((?x35 (* 2 x00)))
 (let ((?x118 (* (- 1) r00)))
 (let (($x328 (= (+ r!1 (* (- 2) x!0) ?x118 (* (- 1) ?x334) ?x35 ?x36) 0)))
 (let (($x81 (or (not $x328) (not (= (* ?x198 (+ ?x170 ?x200 r00 ?x334 ?x87 ?x103)) 0)))))
 (let (($x82 (and $x328 $x81)))
 (let (($x304 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x66 (* (- 1) r)))
 (let ((?x109 (+ ?x66 ?x32 r00 ?x30 ?x87 ?x103)))
 (let ((?x321 (* 6 (* r r r))))
 (let ((?x326 (* (- 6) (* r r x))))
 (let ((?x348 (* (- 7) (* r x))))
 (let ((?x346 (* (- 1) x)))
 (let (($x343 (not (= (* (+ r ?x346 (* 7 ?x30) ?x348 ?x326 ?x321) ?x109) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x119 (* (- 1) ?x30)))
 (let ((?x118 (* (- 1) r00)))
 (let ((?x117 (* (- 2) x)))
 (let (($x121 (= (+ r ?x117 ?x118 ?x119 ?x35 ?x36) 0)))
 (let (($x217 (not $x121)))
 (and $x121 (or $x217 $x343)))))))))))))))))))) :qid k!27))
 ))
 (let (($x183 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x104 (+ 1 r)))
 (let ((?x191 (* ?x104 ?x104)))
 (let ((?x319 (* (- 3) r)))
 (let ((?x179 (+ (* 5 (* ?x104 (+ x (* (- 1) r)))) (* (- 6) (* ?x104 ?x104 (+ x (* (- 1) r)))))))
 (let (($x137 (not (= (* ?x179 (+ (- 1) ?x319 r00 ?x191 ?x32 ?x87 ?x103)) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x117 (* (- 2) x)))
 (let ((?x118 (* (- 1) r00)))
 (let (($x192 (not (= (+ (* 3 r) ?x118 (* (- 1) ?x191) ?x117 ?x35 ?x36) (- 1)))))
 (and (= (+ r ?x118 (* (- 1) (* r r)) ?x117 ?x35 ?x36) 0) (or $x192 $x137))))))))))))))) :qid k!27))
 ))
 (let ((?x341 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x66 (* (- 1) r)))
 (let ((?x109 (+ ?x66 ?x32 r00 ?x30 ?x87 ?x103)))
 (let ((?x321 (* 6 (* r r r))))
 (let ((?x326 (* (- 6) (* r r x))))
 (let ((?x348 (* (- 7) (* r x))))
 (let ((?x346 (* (- 1) x)))
 (let (($x343 (not (= (* (+ r ?x346 (* 7 ?x30) ?x348 ?x326 ?x321) ?x109) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x119 (* (- 1) ?x30)))
 (let ((?x118 (* (- 1) r00)))
 (let ((?x117 (* (- 2) x)))
 (let (($x121 (= (+ r ?x117 ?x118 ?x119 ?x35 ?x36) 0)))
 (let (($x217 (not $x121)))
 (let (($x64 (and $x121 (or $x217 $x343))))
 (let ((?x104 (+ 1 r)))
 (let ((?x191 (* ?x104 ?x104)))
 (let ((?x319 (* (- 3) r)))
 (let ((?x179 (+ (* 5 (* ?x104 (+ x ?x66))) (* (- 6) (* ?x104 ?x104 (+ x ?x66))))))
 (let (($x137 (not (= (* ?x179 (+ (- 1) ?x319 r00 ?x191 ?x32 ?x87 ?x103)) 0))))
 (let (($x192 (not (= (+ (* 3 r) ?x118 (* (- 1) ?x191) ?x117 ?x35 ?x36) (- 1)))))
 (let (($x232 (and (= (+ r ?x118 ?x119 ?x117 ?x35 ?x36) 0) (or $x192 $x137))))
 (rewrite (= $x232 $x64)))))))))))))))))))))))))))))
 ))
 (let (($x199 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x104 (+ 1 r)))
 (let ((?x191 (* ?x104 ?x104)))
 (let ((?x319 (* (- 3) r)))
 (let ((?x179 (+ (* 5 (* ?x104 (+ x (* (- 1) r)))) (* (- 6) (* ?x104 ?x104 (+ x (* (- 1) r)))))))
 (let (($x137 (not (= (* ?x179 (+ (- 1) ?x319 r00 ?x191 ?x32 ?x87 ?x103)) 0))))
 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x87 ?x103) 0) (or (not (= (+ ?x319 r00 ?x191 ?x32 ?x87 ?x103) 1)) $x137))))))))))) :qid k!27))
 ))
 (let ((?x141 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x104 (+ 1 r)))
 (let ((?x191 (* ?x104 ?x104)))
 (let ((?x319 (* (- 3) r)))
 (let ((?x179 (+ (* 5 (* ?x104 (+ x (* (- 1) r)))) (* (- 6) (* ?x104 ?x104 (+ x (* (- 1) r)))))))
 (let (($x137 (not (= (* ?x179 (+ (- 1) ?x319 r00 ?x191 ?x32 ?x87 ?x103)) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x117 (* (- 2) x)))
 (let ((?x118 (* (- 1) r00)))
 (let (($x192 (not (= (+ (* 3 r) ?x118 (* (- 1) ?x191) ?x117 ?x35 ?x36) (- 1)))))
 (let (($x232 (and (= (+ r ?x118 (* (- 1) (* r r)) ?x117 ?x35 ?x36) 0) (or $x192 $x137))))
 (let (($x138 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x87 ?x103) 0) (or (not (= (+ ?x319 r00 ?x191 ?x32 ?x87 ?x103) 1)) $x137))))
 (rewrite (= $x138 $x232))))))))))))))))))
 ))
 (let (($x61 (exists ((r Int) (x Int) )(! (let ((?x55 (- (* 5 (+ r 1) (- x r)) (* 6 (+ r 1) (+ r 1) (- x r)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let ((?x48 (- (- ?x46 ?x35) ?x36)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x48 0)) (not (= (* ?x48 ?x55) 0)))))))))) :qid k!27))
 ))
 (let ((?x148 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x104 (+ 1 r)))
 (let ((?x191 (* ?x104 ?x104)))
 (let ((?x319 (* (- 3) r)))
 (let ((?x179 (+ (* 5 (* ?x104 (+ x (* (- 1) r)))) (* (- 6) (* ?x104 ?x104 (+ x (* (- 1) r)))))))
 (let (($x137 (not (= (* ?x179 (+ (- 1) ?x319 r00 ?x191 ?x32 ?x87 ?x103)) 0))))
 (let (($x138 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x87 ?x103) 0) (or (not (= (+ ?x319 r00 ?x191 ?x32 ?x87 ?x103) 1)) $x137))))
 (let ((?x55 (- (* 5 (+ r 1) (- x r)) (* 6 (+ r 1) (+ r 1) (- x r)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let ((?x48 (- (- ?x46 ?x35) ?x36)))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x60 (and $x40 (or (not (= ?x48 0)) (not (= (* ?x48 ?x55) 0))))))
 (rewrite (= $x60 $x138)))))))))))))))))))
 ))
 (let ((@x62 (asserted $x61)))
 (let ((@x314 (mp (mp @x62 (quant-intro (proof-bind ?x148) (= $x61 $x199)) $x199) (rewrite (= $x199 $x199)) $x199)))
 (let ((@x189 (mp (mp @x314 (quant-intro (proof-bind ?x141) (= $x199 $x183)) $x183) (quant-intro (proof-bind ?x341) (= $x183 $x304)) $x304)))
 (let ((@x297 (mp (mp~ @x189 (sk (~ $x304 $x82)) $x82) (rewrite (= $x82 $x308)) $x308)))
 (let ((@x94 (and-elim @x297 $x156)))
 (let ((@x255 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x336 $x306)) @x94 $x306)))
 (let (($x307 (>= ?x153 0)))
 (let ((@x301 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x336 $x307)) @x94 $x307)))
 (let (($x184 (not (>= ?x271 0))))
 (let (($x276 (<= ?x271 0)))
 (let ((@x270 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x106 (not $x276) $x184)) (unit-resolution (and-elim @x297 $x252) @x94 $x264) (or (not $x276) $x184))))
 (let ((@x174 (unit-resolution @x270 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x276)) @x301 @x255 false) $x276) $x184)))
 ((_ th-lemma arith farkas 1 1 1) @x174 @x301 @x255 false)))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 19
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.46
 :memory                    3.06
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1033118
 :num-checks                1
 :propagations              4
 :rlimit-count              1329
 :time                      0.01
 :total-time                0.01)
