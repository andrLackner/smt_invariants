unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun q!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x75 (* y00 q00)))
 (let ((?x126 (+ r00 (* (- 1) (* y00 q!2)) ?x75 (* (- 1) r!1))))
 (let (($x91 (>= ?x126 0)))
 (let (($x128 (= ?x126 0)))
 (let ((?x136 (* 9 (* y00 y00))))
 (let ((?x68 (* (- 3) (* q!2 q!2 r!1))))
 (let ((?x140 (* (- 3) r!1)))
 (let ((?x237 (* (- 6) (* q!2 r!1))))
 (let ((?x243 (* 3 y00)))
 (let ((?x284 (+ ?x243 (* 6 (* y00 q!2)) (* 3 (* y00 q!2 q!2)) ?x237 ?x140 ?x68 ?x136 (* (- 9) (* y00 r!1)))))
 (let ((?x250 (* ?x284 (+ (* (- 1) r00) (* y00 q!2) (* (- 1) ?x75) r!1))))
 (let (($x244 (= ?x250 0)))
 (let (($x252 (not $x244)))
 (let (($x236 (not $x128)))
 (let (($x99 (or $x236 $x252)))
 (let (($x165 (and (= (+ y00 (* (- 1) y!0)) 0) $x128 $x99)))
 (let ((?x84 (* (- 1) ?x75)))
 (let ((?x125 (* q!2 y00)))
 (let ((?x67 (* (- 1) r00)))
 (let ((?x232 (+ r!1 ?x67 ?x125 ?x84)))
 (let ((?x149 (+ ?x140 ?x243 (* 6 ?x125) (* (- 9) (* r!1 y00)) ?x237 ?x68 ?x136 (* 3 (* q!2 q!2 y00)))))
 (let (($x248 (= ?x232 0)))
 (let (($x145 (and (= (+ y!0 (* (- 1) y00)) 0) $x248 (or (not $x248) (not (= (* ?x149 ?x232) 0))))))
 (let (($x262 (exists ((q Int) (r Int) (y Int) )(! (let ((?x75 (* y00 q00)))
 (let ((?x84 (* (- 1) ?x75)))
 (let ((?x39 (* q y00)))
 (let ((?x67 (* (- 1) r00)))
 (let ((?x98 (+ r ?x67 ?x39 ?x84)))
 (let ((?x260 (* 3 (* q q y00))))
 (let ((?x136 (* 9 (* y00 y00))))
 (let ((?x251 (* (- 3) (* q q r))))
 (let ((?x267 (* (- 6) (* q r))))
 (let ((?x171 (* (- 9) (* r y00))))
 (let ((?x269 (* 6 ?x39)))
 (let ((?x243 (* 3 y00)))
 (let ((?x240 (* (- 3) r)))
 (let (($x202 (not (= (* (+ ?x240 ?x243 ?x269 ?x171 ?x267 ?x251 ?x136 ?x260) ?x98) 0))))
 (let (($x103 (= ?x98 0)))
 (let (($x162 (not $x103)))
 (let (($x78 (= (+ y (* (- 1) y00)) 0)))
 (and $x78 $x103 (or $x162 $x202))))))))))))))))))) :qid k!31))
 ))
 (let (($x273 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x223 (* (- 1) ?x36)))
 (let ((?x67 (* (- 1) r00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x77 (+ r ?x69 ?x67 ?x223 (* y00 (+ 1 q)))))
 (let ((?x204 (+ (* (- 9) (* y00 (+ r ?x69))) (* (- 3) (* (+ 1 q) (+ 1 q) (+ r ?x69))))))
 (let (($x143 (or (not (= ?x77 0)) (not (= (* ?x204 ?x77) 0)))))
 (let (($x253 (= (+ r ?x67 ?x223 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x253 $x143))))))))) :qid k!31))
 ))
 (let ((?x265 (lambda ((q Int) (r Int) (y Int) )(let ((?x75 (* y00 q00)))
 (let ((?x84 (* (- 1) ?x75)))
 (let ((?x39 (* q y00)))
 (let ((?x67 (* (- 1) r00)))
 (let ((?x98 (+ r ?x67 ?x39 ?x84)))
 (let ((?x260 (* 3 (* q q y00))))
 (let ((?x136 (* 9 (* y00 y00))))
 (let ((?x251 (* (- 3) (* q q r))))
 (let ((?x267 (* (- 6) (* q r))))
 (let ((?x171 (* (- 9) (* r y00))))
 (let ((?x269 (* 6 ?x39)))
 (let ((?x243 (* 3 y00)))
 (let ((?x240 (* (- 3) r)))
 (let (($x202 (not (= (* (+ ?x240 ?x243 ?x269 ?x171 ?x267 ?x251 ?x136 ?x260) ?x98) 0))))
 (let (($x103 (= ?x98 0)))
 (let (($x162 (not $x103)))
 (let (($x78 (= (+ y (* (- 1) y00)) 0)))
 (let (($x300 (and $x78 $x103 (or $x162 $x202))))
 (let ((?x36 (* q00 y00)))
 (let ((?x223 (* (- 1) ?x36)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x77 (+ r ?x69 ?x67 ?x223 (* y00 (+ 1 q)))))
 (let ((?x204 (+ (* (- 9) (* y00 (+ r ?x69))) (* (- 3) (* (+ 1 q) (+ 1 q) (+ r ?x69))))))
 (let (($x143 (or (not (= ?x77 0)) (not (= (* ?x204 ?x77) 0)))))
 (let (($x253 (= (+ r ?x67 ?x223 (* y00 q)) 0)))
 (let (($x224 (and (= (+ y00 (* (- 1) y)) 0) $x253 $x143)))
 (rewrite (= $x224 $x300)))))))))))))))))))))))))))))
 ))
 (let (($x192 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x223 (* (- 1) ?x36)))
 (let ((?x67 (* (- 1) r00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x77 (+ r ?x69 ?x67 ?x223 (* y00 (+ 1 q)))))
 (let ((?x204 (+ (* (- 9) (* y00 (+ r ?x69))) (* (- 3) (* (+ 1 q) (+ 1 q) (+ r ?x69))))))
 (let (($x143 (or (not (= ?x77 0)) (not (= (* ?x204 ?x77) 0)))))
 (let (($x253 (= (+ r ?x67 ?x223 (* y00 q)) 0)))
 (and (= (+ ?x69 y) 0) $x253 $x143))))))))) :qid k!31))
 ))
 (let ((?x274 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x223 (* (- 1) ?x36)))
 (let ((?x67 (* (- 1) r00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x77 (+ r ?x69 ?x67 ?x223 (* y00 (+ 1 q)))))
 (let ((?x204 (+ (* (- 9) (* y00 (+ r ?x69))) (* (- 3) (* (+ 1 q) (+ 1 q) (+ r ?x69))))))
 (let (($x143 (or (not (= ?x77 0)) (not (= (* ?x204 ?x77) 0)))))
 (let (($x253 (= (+ r ?x67 ?x223 (* y00 q)) 0)))
 (let (($x224 (and (= (+ y00 (* (- 1) y)) 0) $x253 $x143)))
 (let (($x148 (and (= (+ ?x69 y) 0) $x253 $x143)))
 (rewrite (= $x148 $x224)))))))))))))
 ))
 (let (($x64 (exists ((q Int) (r Int) (y Int) )(! (let ((?x50 (+ (- (- (- r y00) r00) (* q00 y00)) (* (+ q 1) y00))))
 (let ((?x58 (- (* (- 9) (- r y00) y00) (* 3 (+ q 1) (+ q 1) (- r y00)))))
 (let (($x62 (or (not (= (+ (* (- 1) y00) y00) 0)) (not (= ?x50 0)) (not (= (* ?x58 ?x50) 0)))))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) $x62)))) :qid k!31))
 ))
 (let ((?x194 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x223 (* (- 1) ?x36)))
 (let ((?x67 (* (- 1) r00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x77 (+ r ?x69 ?x67 ?x223 (* y00 (+ 1 q)))))
 (let ((?x204 (+ (* (- 9) (* y00 (+ r ?x69))) (* (- 3) (* (+ 1 q) (+ 1 q) (+ r ?x69))))))
 (let (($x143 (or (not (= ?x77 0)) (not (= (* ?x204 ?x77) 0)))))
 (let (($x253 (= (+ r ?x67 ?x223 (* y00 q)) 0)))
 (let (($x148 (and (= (+ ?x69 y) 0) $x253 $x143)))
 (let ((?x50 (+ (- (- (- r y00) r00) ?x36) (* (+ q 1) y00))))
 (let ((?x58 (- (* (- 9) (- r y00) y00) (* 3 (+ q 1) (+ q 1) (- r y00)))))
 (let (($x62 (or (not (= (+ (* (- 1) y00) y00) 0)) (not (= ?x50 0)) (not (= (* ?x58 ?x50) 0)))))
 (let (($x63 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) $x62)))
 (rewrite (= $x63 $x148))))))))))))))))
 ))
 (let ((@x65 (asserted $x64)))
 (let ((@x275 (mp (mp @x65 (quant-intro (proof-bind ?x194) (= $x64 $x192)) $x192) (rewrite (= $x192 $x192)) $x192)))
 (let ((@x122 (mp (mp @x275 (quant-intro (proof-bind ?x274) (= $x192 $x273)) $x273) (quant-intro (proof-bind ?x265) (= $x273 $x262)) $x262)))
 (let ((@x106 (mp (mp~ @x122 (sk (~ $x262 $x145)) $x145) (rewrite (= $x145 $x165)) $x165)))
 (let ((@x85 (and-elim @x106 $x128)))
 (let ((@x109 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x236 $x91)) @x85 $x91)))
 (let (($x182 (<= ?x126 0)))
 (let ((@x119 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x236 $x182)) @x85 $x182)))
 (let (($x86 (not (<= ?x250 0))))
 (let (($x235 (>= ?x250 0)))
 (let ((@x217 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x244 $x86 (not $x235))) (unit-resolution (and-elim @x106 $x99) @x85 $x252) (or $x86 (not $x235)))))
 (let ((@x159 (unit-resolution @x217 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x235)) @x119 @x109 false) $x235) $x86)))
 ((_ th-lemma arith farkas 1 1 1) @x159 @x119 @x109 false)))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        10
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-fixed-eqs           2
 :arith-max-min             54
 :arith-nonlinear-bounds    2
 :arith-num-rows            4
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      2
 :arith-tableau-max-columns 25
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.46
 :memory                    3.06
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1049856
 :num-checks                1
 :propagations              6
 :rlimit-count              1704
 :time                      0.01
 :total-time                0.02)
