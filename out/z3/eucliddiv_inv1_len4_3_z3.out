unsat
((set-logic NIA)
(proof
(let (($x96 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x149 (* (- 1) ?x36)))
 (let ((?x72 (* (- 1) r00)))
 (let ((?x74 (* (- 1) y00)))
 (let (($x139 (not (= (+ r ?x74 ?x72 ?x149 (* y00 (+ 1 q))) 0))))
 (let (($x358 (= (+ r ?x72 ?x149 (* y00 q)) 0)))
 (let ((?x90 (* (- 1) y)))
 (let ((?x148 (+ y00 ?x90)))
 (let (($x386 (= ?x148 0)))
 (and $x386 $x358 $x139)))))))))) :qid k!31))
 ))
 (let (($x336 (exists ((q Int) (r Int) (y Int) )(! false :qid k!31))
 ))
 (let ((@x342 (elim-unused (= $x336 false))))
 (let ((?x393 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x149 (* (- 1) ?x36)))
 (let ((?x72 (* (- 1) r00)))
 (let ((?x74 (* (- 1) y00)))
 (let (($x139 (not (= (+ r ?x74 ?x72 ?x149 (* y00 (+ 1 q))) 0))))
 (let (($x358 (= (+ r ?x72 ?x149 (* y00 q)) 0)))
 (let ((?x90 (* (- 1) y)))
 (let ((?x148 (+ y00 ?x90)))
 (let (($x386 (= ?x148 0)))
 (let (($x159 (and $x386 $x358 $x139)))
 (let (($x108 (= (+ r ?x72 (* q y00) (* (- 1) (* y00 q00))) 0)))
 (let (($x116 (not $x108)))
 (let (($x83 (= (+ y ?x74) 0)))
 (let (($x329 (and $x83 $x108 $x116)))
 (let ((@x333 (rewrite (= $x329 false))))
 (let ((@x367 (monotonicity (rewrite (= ?x148 (+ ?x90 y00))) (= $x386 (= (+ ?x90 y00) 0)))))
 (let ((@x371 (trans @x367 (rewrite (= (= (+ ?x90 y00) 0) $x83)) (= $x386 $x83))))
 (let ((@x403 (monotonicity @x371 (rewrite (= $x358 $x108)) (rewrite (= $x139 $x116)) (= $x159 $x329))))
 (trans @x403 @x333 (= $x159 false)))))))))))))))))))))
 ))
 (let ((@x399 (trans (quant-intro (proof-bind ?x393) (= $x96 $x336)) @x342 (= $x96 false))))
 (let (($x424 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x149 (* (- 1) ?x36)))
 (let ((?x72 (* (- 1) r00)))
 (let ((?x74 (* (- 1) y00)))
 (let (($x139 (not (= (+ r ?x74 ?x72 ?x149 (* y00 (+ 1 q))) 0))))
 (let (($x358 (= (+ r ?x72 ?x149 (* y00 q)) 0)))
 (and (= (+ ?x74 y) 0) $x358 $x139))))))) :qid k!31))
 ))
 (let ((?x388 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x149 (* (- 1) ?x36)))
 (let ((?x72 (* (- 1) r00)))
 (let ((?x74 (* (- 1) y00)))
 (let (($x139 (not (= (+ r ?x74 ?x72 ?x149 (* y00 (+ 1 q))) 0))))
 (let (($x358 (= (+ r ?x72 ?x149 (* y00 q)) 0)))
 (let ((?x90 (* (- 1) y)))
 (let ((?x148 (+ y00 ?x90)))
 (let (($x386 (= ?x148 0)))
 (let (($x159 (and $x386 $x358 $x139)))
 (let (($x422 (and (= (+ ?x74 y) 0) $x358 $x139)))
 (rewrite (= $x422 $x159))))))))))))))
 ))
 (let (($x69 (exists ((q Int) (r Int) (y Int) )(! (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x45 (- r y00)))
 (let ((?x48 (+ q 1)))
 (let ((?x62 (* 2 ?x48 ?x45 ?x45 y00)))
 (let ((?x59 (* 10 ?x48 ?x48 ?x45)))
 (let ((?x56 (* 0 ?x45 ?x45)))
 (let ((?x54 (- 3)))
 (let ((?x55 (* ?x54 ?x48 ?x45 y00 y00)))
 (let ((?x57 (+ ?x55 ?x56)))
 (let ((?x60 (- ?x57 ?x59)))
 (let ((?x63 (+ ?x60 ?x62)))
 (let ((?x64 (* ?x63 ?x42)))
 (let (($x65 (= ?x64 0)))
 (let (($x66 (not $x65)))
 (let (($x52 (not (= (+ (- (- ?x45 r00) (* q00 y00)) (* ?x48 y00)) 0))))
 (let (($x43 (= ?x42 0)))
 (let (($x44 (not $x43)))
 (let (($x67 (or $x44 $x52 $x66)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x67)))))))))))))))))))))) :qid k!31))
 ))
 (let ((?x426 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x149 (* (- 1) ?x36)))
 (let ((?x72 (* (- 1) r00)))
 (let ((?x74 (* (- 1) y00)))
 (let (($x139 (not (= (+ r ?x74 ?x72 ?x149 (* y00 (+ 1 q))) 0))))
 (let (($x358 (= (+ r ?x72 ?x149 (* y00 q)) 0)))
 (let (($x422 (and (= (+ ?x74 y) 0) $x358 $x139)))
 (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x45 (- r y00)))
 (let ((?x48 (+ q 1)))
 (let ((?x62 (* 2 ?x48 ?x45 ?x45 y00)))
 (let ((?x59 (* 10 ?x48 ?x48 ?x45)))
 (let ((?x56 (* 0 ?x45 ?x45)))
 (let ((?x54 (- 3)))
 (let ((?x55 (* ?x54 ?x48 ?x45 y00 y00)))
 (let ((?x57 (+ ?x55 ?x56)))
 (let ((?x60 (- ?x57 ?x59)))
 (let ((?x63 (+ ?x60 ?x62)))
 (let ((?x64 (* ?x63 ?x42)))
 (let (($x65 (= ?x64 0)))
 (let (($x66 (not $x65)))
 (let (($x52 (not (= (+ (- (- ?x45 r00) ?x36) (* ?x48 y00)) 0))))
 (let (($x43 (= ?x42 0)))
 (let (($x44 (not $x43)))
 (let (($x67 (or $x44 $x52 $x66)))
 (let (($x41 (= (+ (- (- r r00) ?x36) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x68 (and $x33 $x41 $x67)))
 (rewrite (= $x68 $x422))))))))))))))))))))))))))))))))
 ))
 (let ((@x70 (asserted $x69)))
 (let ((@x361 (mp (mp @x70 (quant-intro (proof-bind ?x426) (= $x69 $x424)) $x424) (rewrite (= $x424 $x424)) $x424)))
 (mp (mp @x361 (quant-intro (proof-bind ?x388) (= $x424 $x96)) $x96) @x399 false))))))))))))))

(:max-memory   3.37
 :memory       3.06
 :mk-bool-var  6
 :num-allocs   961178
 :num-checks   1
 :rlimit-count 485
 :time         0.01
 :total-time   0.01)
